{"ast":null,"code":"import { CONTEXT_STORE } from '../globals';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {\n  return class MinimalBaseAudioContext extends eventTargetConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext);\n      this._nativeContext = _nativeContext;\n      CONTEXT_STORE.set(this, _nativeContext);\n      if (isNativeOfflineAudioContext(_nativeContext)) {\n        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n      }\n      this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n      this._listener = createAudioListener(this, _nativeContext);\n      this._onstatechange = null;\n    }\n    get currentTime() {\n      return this._nativeContext.currentTime;\n    }\n    get destination() {\n      return this._destination;\n    }\n    get listener() {\n      return this._listener;\n    }\n    get onstatechange() {\n      return this._onstatechange;\n    }\n    set onstatechange(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeContext.onstatechange = wrappedListener;\n      const nativeOnStateChange = this._nativeContext.onstatechange;\n      this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n    }\n    get sampleRate() {\n      return this._nativeContext.sampleRate;\n    }\n    get state() {\n      return this._nativeContext.state;\n    }\n  };\n};","map":{"version":3,"names":["CONTEXT_STORE","createMinimalBaseAudioContextConstructor","audioDestinationNodeConstructor","createAudioListener","eventTargetConstructor","isNativeOfflineAudioContext","unrenderedAudioWorkletNodeStore","wrapEventListener","MinimalBaseAudioContext","constructor","_nativeContext","numberOfChannels","set","Set","_destination","_listener","_onstatechange","currentTime","destination","listener","onstatechange","value","wrappedListener","nativeOnStateChange","sampleRate","state"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/minimal-base-audio-context-constructor.ts"],"sourcesContent":["import { CONTEXT_STORE } from '../globals';\nimport { IAudioDestinationNode, IAudioListener, IMinimalBaseAudioContext, IMinimalBaseAudioContextEventMap } from '../interfaces';\nimport { TAudioContextState, TContext, TEventHandler, TMinimalBaseAudioContextConstructorFactory, TNativeContext } from '../types';\n\nexport const createMinimalBaseAudioContextConstructor: TMinimalBaseAudioContextConstructorFactory = (\n    audioDestinationNodeConstructor,\n    createAudioListener,\n    eventTargetConstructor,\n    isNativeOfflineAudioContext,\n    unrenderedAudioWorkletNodeStore,\n    wrapEventListener\n) => {\n    return class MinimalBaseAudioContext<T extends TContext>\n        extends eventTargetConstructor<IMinimalBaseAudioContextEventMap>\n        implements IMinimalBaseAudioContext<T>\n    {\n        private _destination: IAudioDestinationNode<T>;\n\n        private _listener: IAudioListener;\n\n        private _onstatechange: null | TEventHandler<T>;\n\n        constructor(private _nativeContext: TNativeContext, numberOfChannels: number) {\n            super(_nativeContext);\n\n            CONTEXT_STORE.set(<T>(<unknown>this), _nativeContext);\n\n            if (isNativeOfflineAudioContext(_nativeContext)) {\n                unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n            }\n\n            this._destination = new audioDestinationNodeConstructor(<T>(<unknown>this), numberOfChannels);\n            this._listener = createAudioListener(<T>(<unknown>this), _nativeContext);\n            this._onstatechange = null;\n        }\n\n        get currentTime(): number {\n            return this._nativeContext.currentTime;\n        }\n\n        get destination(): IAudioDestinationNode<T> {\n            return this._destination;\n        }\n\n        get listener(): IAudioListener {\n            return this._listener;\n        }\n\n        get onstatechange(): null | TEventHandler<T> {\n            return this._onstatechange;\n        }\n\n        set onstatechange(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeContext.onstatechange = wrappedListener;\n\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n\n            this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n        }\n\n        get sampleRate(): number {\n            return this._nativeContext.sampleRate;\n        }\n\n        get state(): TAudioContextState {\n            return this._nativeContext.state;\n        }\n    };\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,YAAY;AAI1C,OAAO,MAAMC,wCAAwC,GAA+CA,CAChGC,+BAA+B,EAC/BC,mBAAmB,EACnBC,sBAAsB,EACtBC,2BAA2B,EAC3BC,+BAA+B,EAC/BC,iBAAiB,KACjB;EACA,OAAO,MAAMC,uBACT,SAAQJ,sBAAwD;IAShEK,YAAoBC,cAA8B,EAAEC,gBAAwB;MACxE,KAAK,CAACD,cAAc,CAAC;MADL,KAAAA,cAAc,GAAdA,cAAc;MAG9BV,aAAa,CAACY,GAAG,CAAc,IAAK,EAAEF,cAAc,CAAC;MAErD,IAAIL,2BAA2B,CAACK,cAAc,CAAC,EAAE;QAC7CJ,+BAA+B,CAACM,GAAG,CAACF,cAAc,EAAE,IAAIG,GAAG,EAAE,CAAC;;MAGlE,IAAI,CAACC,YAAY,GAAG,IAAIZ,+BAA+B,CAAc,IAAK,EAAES,gBAAgB,CAAC;MAC7F,IAAI,CAACI,SAAS,GAAGZ,mBAAmB,CAAc,IAAK,EAAEO,cAAc,CAAC;MACxE,IAAI,CAACM,cAAc,GAAG,IAAI;IAC9B;IAEA,IAAIC,WAAWA,CAAA;MACX,OAAO,IAAI,CAACP,cAAc,CAACO,WAAW;IAC1C;IAEA,IAAIC,WAAWA,CAAA;MACX,OAAO,IAAI,CAACJ,YAAY;IAC5B;IAEA,IAAIK,QAAQA,CAAA;MACR,OAAO,IAAI,CAACJ,SAAS;IACzB;IAEA,IAAIK,aAAaA,CAAA;MACb,OAAO,IAAI,CAACJ,cAAc;IAC9B;IAEA,IAAII,aAAaA,CAACC,KAAK;MACnB,MAAMC,eAAe,GAAG,OAAOD,KAAK,KAAK,UAAU,GAAGd,iBAAiB,CAAC,IAAI,EAAEc,KAAK,CAAC,GAAG,IAAI;MAE3F,IAAI,CAACX,cAAc,CAACU,aAAa,GAAGE,eAAe;MAEnD,MAAMC,mBAAmB,GAAG,IAAI,CAACb,cAAc,CAACU,aAAa;MAE7D,IAAI,CAACJ,cAAc,GAAGO,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,KAAKD,eAAe,GAAGD,KAAK,GAAGE,mBAAmB;IAC/H;IAEA,IAAIC,UAAUA,CAAA;MACV,OAAO,IAAI,CAACd,cAAc,CAACc,UAAU;IACzC;IAEA,IAAIC,KAAKA,CAAA;MACL,OAAO,IAAI,CAACf,cAAc,CAACe,KAAK;IACpC;GACH;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}