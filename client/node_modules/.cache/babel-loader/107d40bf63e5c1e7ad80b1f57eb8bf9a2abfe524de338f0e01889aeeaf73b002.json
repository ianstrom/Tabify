{"ast":null,"code":"import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Synth is composed simply of a [[OmniOscillator]] routed through an [[AmplitudeEnvelope]].\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(Synth.getDefaults(), arguments));\n    this.name = \"Synth\";\n    const options = optionsFromArguments(Synth.getDefaults(), arguments);\n    this.oscillator = new OmniOscillator(Object.assign({\n      context: this.context,\n      detune: options.detune,\n      onstop: () => this.onsilence(this)\n    }, options.oscillator));\n    this.frequency = this.oscillator.frequency;\n    this.detune = this.oscillator.detune;\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope));\n    // connect the oscillators to the output\n    this.oscillator.chain(this.envelope, this.output);\n    readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.3\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"triangle\"\n      })\n    });\n  }\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n  _triggerEnvelopeAttack(time, velocity) {\n    // the envelopes\n    this.envelope.triggerAttack(time, velocity);\n    this.oscillator.start(time);\n    // if there is no release portion, stop the oscillator\n    if (this.envelope.sustain === 0) {\n      const computedAttack = this.toSeconds(this.envelope.attack);\n      const computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  }\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["AmplitudeEnvelope","Envelope","ToneAudioNode","omitFromObject","optionsFromArguments","readOnly","OmniOscillator","Source","Monophonic","Synth","constructor","getDefaults","arguments","name","options","oscillator","Object","assign","context","detune","onstop","onsilence","frequency","envelope","chain","output","keys","attack","decay","release","sustain","type","_triggerEnvelopeAttack","time","velocity","triggerAttack","start","computedAttack","toSeconds","computedDecay","stop","_triggerEnvelopeRelease","triggerRelease","getLevelAtTime","getValueAtTime","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/instrument/Synth.ts"],"sourcesContent":["import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorOptions, OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Synth is composed simply of a [[OmniOscillator]] routed through an [[AmplitudeEnvelope]].\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth<Options extends SynthOptions = SynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"Synth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * @param options the options available for the synth.\n\t */\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}, options.oscillator));\n\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t) as OmniOscillatorOptions,\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}