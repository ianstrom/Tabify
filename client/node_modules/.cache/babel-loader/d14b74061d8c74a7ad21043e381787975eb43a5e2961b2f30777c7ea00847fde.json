{"ast":null,"code":"import { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst abs = new Tone.Abs().toDestination();\n * \tconst signal = new Tone.Signal(1);\n * \tsignal.rampTo(-1, 0.5);\n * \tsignal.connect(abs);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Abs extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"Abs\";\n    /**\n     * The node which converts the audio ranges\n     */\n    this._abs = new WaveShaper({\n      context: this.context,\n      mapping: val => {\n        if (Math.abs(val) < 0.001) {\n          return 0;\n        } else {\n          return Math.abs(val);\n        }\n      }\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n    this.input = this._abs;\n    /**\n     * The output range [0, 1]\n     */\n    this.output = this._abs;\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this._abs.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["SignalOperator","WaveShaper","Abs","constructor","name","_abs","context","mapping","val","Math","abs","input","output","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/signal/Abs.ts"],"sourcesContent":["import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst abs = new Tone.Abs().toDestination();\n * \tconst signal = new Tone.Signal(1);\n * \tsignal.rampTo(-1, 0.5);\n * \tsignal.connect(abs);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,UAAU,QAAQ,cAAc;AAEzC;;;;;;;;;;;;AAYA,OAAM,MAAOC,GAAI,SAAQF,cAAoC;EAA7DG,YAAA;;IAEU,KAAAC,IAAI,GAAW,KAAK;IAE7B;;;IAGQ,KAAAC,IAAI,GAAG,IAAIJ,UAAU,CAAC;MAC7BK,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,OAAO,EAAEC,GAAG,IAAG;QACd,IAAIC,IAAI,CAACC,GAAG,CAACF,GAAG,CAAC,GAAG,KAAK,EAAE;UAC1B,OAAO,CAAC;SACR,MAAM;UACN,OAAOC,IAAI,CAACC,GAAG,CAACF,GAAG,CAAC;;MAEtB;KACA,CAAC;IAEF;;;IAGA,KAAAG,KAAK,GAAG,IAAI,CAACN,IAAI;IAEjB;;;IAGA,KAAAO,MAAM,GAAG,IAAI,CAACP,IAAI;EAUnB;EARC;;;EAGAQ,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACR,IAAI,CAACQ,OAAO,EAAE;IACnB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}