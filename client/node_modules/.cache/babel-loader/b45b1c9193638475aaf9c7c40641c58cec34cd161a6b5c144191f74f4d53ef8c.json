{"ast":null,"code":"export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = nativeAudioBufferSourceNode => {\n  nativeAudioBufferSourceNode.start = (start => {\n    return function () {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let duration = arguments.length > 2 ? arguments[2] : undefined;\n      const buffer = nativeAudioBufferSourceNode.buffer;\n      // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n      const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);\n      // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n      if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n        start.call(nativeAudioBufferSourceNode, when, 0, 0);\n      } else {\n        start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n      }\n    };\n  })(nativeAudioBufferSourceNode.start);\n};","map":{"version":3,"names":["wrapAudioBufferSourceNodeStartMethodOffsetClamping","nativeAudioBufferSourceNode","start","when","arguments","length","undefined","offset","duration","buffer","clampedOffset","Math","min","context","sampleRate","call"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.ts"],"sourcesContent":["import { TNativeAudioBufferSourceNode } from '../types';\n\nexport const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode: TNativeAudioBufferSourceNode): void => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration?: number) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);\n\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            } else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n"],"mappings":"AAEA,OAAO,MAAMA,kDAAkD,GAAIC,2BAAyD,IAAU;EAClIA,2BAA2B,CAACC,KAAK,GAAG,CAAEA,KAAK,IAAI;IAC3C,OAAO,YAA4C;MAAA,IAA3CC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IAAEI,QAAiB,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAC3C,MAAMG,MAAM,GAAGR,2BAA2B,CAACQ,MAAM;MACjD;MACA,MAAMC,aAAa,GAAGD,MAAM,KAAK,IAAI,GAAGF,MAAM,GAAGI,IAAI,CAACC,GAAG,CAACH,MAAM,CAACD,QAAQ,EAAED,MAAM,CAAC;MAElF;MACA,IAAIE,MAAM,KAAK,IAAI,IAAIC,aAAa,GAAGD,MAAM,CAACD,QAAQ,GAAG,GAAG,GAAGP,2BAA2B,CAACY,OAAO,CAACC,UAAU,EAAE;QAC3GZ,KAAK,CAACa,IAAI,CAACd,2BAA2B,EAAEE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;OACtD,MAAM;QACHD,KAAK,CAACa,IAAI,CAACd,2BAA2B,EAAEE,IAAI,EAAEO,aAAa,EAAEF,QAAQ,CAAC;;IAE9E,CAAC;EACL,CAAC,EAAEP,2BAA2B,CAACC,KAAK,CAAC;AACzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}