{"ast":null,"code":"import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n  return (nativeContext, options) => {\n    const channelCountMode = options.channelCountMode;\n    /*\n     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n     * which supports it and therefore it can't be supported at all.\n     */\n    if (channelCountMode === 'clamped-max') {\n      throw createNotSupportedError();\n    }\n    // Bug #105: Safari does not support the StereoPannerNode.\n    if (nativeContext.createStereoPanner === undefined) {\n      return createNativeStereoPannerNodeFaker(nativeContext, options);\n    }\n    const nativeStereoPannerNode = nativeContext.createStereoPanner();\n    assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n    /*\n     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n     * which supports it and therefore it can't be supported at all.\n     */\n    Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n      get: () => channelCountMode,\n      set: value => {\n        if (value !== channelCountMode) {\n          throw createNotSupportedError();\n        }\n      }\n    });\n    return nativeStereoPannerNode;\n  };\n};","map":{"version":3,"names":["assignNativeAudioNodeAudioParamValue","assignNativeAudioNodeOptions","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFaker","createNotSupportedError","nativeContext","options","channelCountMode","createStereoPanner","undefined","nativeStereoPannerNode","Object","defineProperty","get","set","value"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/native-stereo-panner-node-factory.ts"],"sourcesContent":["import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeStereoPannerNodeFactoryFactory } from '../types';\n\nexport const createNativeStereoPannerNodeFactory: TNativeStereoPannerNodeFactoryFactory = (\n    createNativeStereoPannerNodeFaker,\n    createNotSupportedError\n) => {\n    return (nativeContext, options) => {\n        const channelCountMode = options.channelCountMode;\n\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n            throw createNotSupportedError();\n        }\n\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n            return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n\n        const nativeStereoPannerNode = nativeContext.createStereoPanner();\n\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n            get: () => channelCountMode,\n            set: (value) => {\n                if (value !== channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n\n        return nativeStereoPannerNode;\n    };\n};\n"],"mappings":"AAAA,SAASA,oCAAoC,QAAQ,uDAAuD;AAC5G,SAASC,4BAA4B,QAAQ,6CAA6C;AAG1F,OAAO,MAAMC,mCAAmC,GAA0CA,CACtFC,iCAAiC,EACjCC,uBAAuB,KACvB;EACA,OAAO,CAACC,aAAa,EAAEC,OAAO,KAAI;IAC9B,MAAMC,gBAAgB,GAAGD,OAAO,CAACC,gBAAgB;IAEjD;;;;IAIA,IAAIA,gBAAgB,KAAK,aAAa,EAAE;MACpC,MAAMH,uBAAuB,EAAE;;IAGnC;IACA,IAAIC,aAAa,CAACG,kBAAkB,KAAKC,SAAS,EAAE;MAChD,OAAON,iCAAiC,CAACE,aAAa,EAAEC,OAAO,CAAC;;IAGpE,MAAMI,sBAAsB,GAAGL,aAAa,CAACG,kBAAkB,EAAE;IAEjEP,4BAA4B,CAACS,sBAAsB,EAAEJ,OAAO,CAAC;IAE7DN,oCAAoC,CAACU,sBAAsB,EAAEJ,OAAO,EAAE,KAAK,CAAC;IAE5E;;;;IAIAK,MAAM,CAACC,cAAc,CAACF,sBAAsB,EAAE,kBAAkB,EAAE;MAC9DG,GAAG,EAAEA,CAAA,KAAMN,gBAAgB;MAC3BO,GAAG,EAAGC,KAAK,IAAI;QACX,IAAIA,KAAK,KAAKR,gBAAgB,EAAE;UAC5B,MAAMH,uBAAuB,EAAE;;MAEvC;KACH,CAAC;IAEF,OAAOM,sBAAsB;EACjC,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}