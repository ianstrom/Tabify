{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/interfaces/base-audio-context.ts"],"sourcesContent":["import { TContext, TDecodeErrorCallback, TDecodeSuccessCallback } from '../types';\nimport { IAnalyserNode } from './analyser-node';\nimport { IAudioBuffer } from './audio-buffer';\nimport { IAudioBufferSourceNode } from './audio-buffer-source-node';\nimport { IAudioNode } from './audio-node';\nimport { IAudioWorklet } from './audio-worklet';\nimport { IBiquadFilterNode } from './biquad-filter-node';\nimport { IConstantSourceNode } from './constant-source-node';\nimport { IConvolverNode } from './convolver-node';\nimport { IDelayNode } from './delay-node';\nimport { IDynamicsCompressorNode } from './dynamics-compressor-node';\nimport { IGainNode } from './gain-node';\nimport { IIIRFilterNode } from './iir-filter-node';\nimport { IMinimalBaseAudioContext } from './minimal-base-audio-context';\nimport { IOscillatorNode } from './oscillator-node';\nimport { IPannerNode } from './panner-node';\nimport { IPeriodicWave } from './periodic-wave';\nimport { IPeriodicWaveConstraints } from './periodic-wave-constraints';\nimport { IStereoPannerNode } from './stereo-panner-node';\nimport { IWaveShaperNode } from './wave-shaper-node';\n\nexport interface IBaseAudioContext<T extends TContext> extends IMinimalBaseAudioContext<T> {\n    // The audioWorklet property is only available in a SecureContext.\n    readonly audioWorklet?: IAudioWorklet;\n\n    createAnalyser(): IAnalyserNode<T>;\n\n    createBiquadFilter(): IBiquadFilterNode<T>;\n\n    createBuffer(numberOfChannels: number, length: number, sampleRate: number): IAudioBuffer;\n\n    createBufferSource(): IAudioBufferSourceNode<T>;\n\n    createChannelMerger(numberOfInputs?: number): IAudioNode<T>;\n\n    createChannelSplitter(numberOfOutputs?: number): IAudioNode<T>;\n\n    createConstantSource(): IConstantSourceNode<T>;\n\n    createConvolver(): IConvolverNode<T>;\n\n    createDelay(maxDelayTime?: number): IDelayNode<T>;\n\n    createDynamicsCompressor(): IDynamicsCompressorNode<T>;\n\n    createGain(): IGainNode<T>;\n\n    createIIRFilter(feedforward: Iterable<number>, feedback: Iterable<number>): IIIRFilterNode<T>;\n\n    createOscillator(): IOscillatorNode<T>;\n\n    createPanner(): IPannerNode<T>;\n\n    createPeriodicWave(real: Iterable<number>, imag: Iterable<number>, constraints?: Partial<IPeriodicWaveConstraints>): IPeriodicWave;\n\n    createStereoPanner(): IStereoPannerNode<T>;\n\n    createWaveShaper(): IWaveShaperNode<T>;\n\n    decodeAudioData(\n        audioData: ArrayBuffer,\n        successCallback?: TDecodeSuccessCallback,\n        errorCallback?: TDecodeErrorCallback\n    ): Promise<AudioBuffer>;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}