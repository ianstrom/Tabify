{"ast":null,"code":"import { StereoFeedbackEffect } from \"./StereoFeedbackEffect\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport class StereoXFeedbackEffect extends StereoFeedbackEffect {\n  constructor(options) {\n    super(options);\n    // the left output connected to the right input\n    this._feedbackL.disconnect();\n    this._feedbackL.connect(this._feedbackMerge, 0, 1);\n    // the left output connected to the right input\n    this._feedbackR.disconnect();\n    this._feedbackR.connect(this._feedbackMerge, 0, 0);\n    readOnly(this, [\"feedback\"]);\n  }\n}","map":{"version":3,"names":["StereoFeedbackEffect","readOnly","StereoXFeedbackEffect","constructor","options","_feedbackL","disconnect","connect","_feedbackMerge","_feedbackR"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/effect/StereoXFeedbackEffect.ts"],"sourcesContent":["import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"./StereoFeedbackEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface StereoXFeedbackEffectOptions extends StereoFeedbackEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport class StereoXFeedbackEffect<Options extends StereoXFeedbackEffectOptions> extends StereoFeedbackEffect<Options> {\n\t\n\tconstructor(options: StereoXFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\t\t// the left output connected to the right input\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 1);\n\n\t\t// the left output connected to the right input\n\t\tthis._feedbackR.disconnect();\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 0);\n\t\t\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAqC,wBAAwB;AAE1F,SAASC,QAAQ,QAAQ,wBAAwB;AAMjD;;;;;;;;;;;;;AAaA,OAAM,MAAOC,qBAAoE,SAAQF,oBAA6B;EAErHG,YAAYC,OAAqC;IAEhD,KAAK,CAACA,OAAO,CAAC;IACd;IACA,IAAI,CAACC,UAAU,CAACC,UAAU,EAAE;IAC5B,IAAI,CAACD,UAAU,CAACE,OAAO,CAAC,IAAI,CAACC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC;IAElD;IACA,IAAI,CAACC,UAAU,CAACH,UAAU,EAAE;IAC5B,IAAI,CAACG,UAAU,CAACF,OAAO,CAAC,IAAI,CAACC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC;IAElDP,QAAQ,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,CAAC;EAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}