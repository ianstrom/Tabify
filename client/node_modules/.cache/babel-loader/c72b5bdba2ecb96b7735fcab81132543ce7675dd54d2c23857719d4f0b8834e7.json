{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n    const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n    nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n    return [fakeNativeDestinationAudioNode, output, 0];\n  }\n  nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n  return [nativeDestinationAudioNode, output, input];\n};","map":{"version":3,"names":["isNativeAudioNodeFaker","connectNativeAudioNodeToNativeAudioNode","nativeSourceAudioNode","nativeDestinationAudioNode","output","input","fakeNativeDestinationAudioNode","inputs","connect"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/helpers/connect-native-audio-node-to-native-audio-node.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { INativeAudioNodeFaker } from '../interfaces';\nimport { TConnectNativeAudioNodeToNativeAudioNodeFunction, TNativeAudioNode } from '../types';\n\nexport const connectNativeAudioNodeToNativeAudioNode: TConnectNativeAudioNodeToNativeAudioNodeFunction = (\n    nativeSourceAudioNode: INativeAudioNodeFaker | TNativeAudioNode,\n    nativeDestinationAudioNode: INativeAudioNodeFaker | TNativeAudioNode,\n    output: number,\n    input: number\n): [TNativeAudioNode, number, number] => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n\n        nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n\n        return [fakeNativeDestinationAudioNode, output, 0];\n    }\n\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n\n    return [nativeDestinationAudioNode, output, input];\n};\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,mCAAmC;AAI1E,OAAO,MAAMC,uCAAuC,GAAqDA,CACrGC,qBAA+D,EAC/DC,0BAAoE,EACpEC,MAAc,EACdC,KAAa,KACuB;EACpC,IAAIL,sBAAsB,CAACG,0BAA0B,CAAC,EAAE;IACpD,MAAMG,8BAA8B,GAAGH,0BAA0B,CAACI,MAAM,CAACF,KAAK,CAAC;IAE/EH,qBAAqB,CAACM,OAAO,CAACF,8BAA8B,EAAEF,MAAM,EAAE,CAAC,CAAC;IAExE,OAAO,CAACE,8BAA8B,EAAEF,MAAM,EAAE,CAAC,CAAC;;EAGtDF,qBAAqB,CAACM,OAAO,CAACL,0BAA0B,EAAEC,MAAM,EAAEC,KAAK,CAAC;EAExE,OAAO,CAACF,0BAA0B,EAAEC,MAAM,EAAEC,KAAK,CAAC;AACtD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}