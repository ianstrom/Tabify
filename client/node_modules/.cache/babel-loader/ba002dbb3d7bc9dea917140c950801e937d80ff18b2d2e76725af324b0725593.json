{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/types/audio-worklet-node-constructor-factory.ts"],"sourcesContent":["import { TAddUnrenderedAudioWorkletNodeFunction } from './add-unrendered-audio-worklet-node-function';\nimport { TAudioNodeConstructor } from './audio-node-constructor';\nimport { TAudioParamFactory } from './audio-param-factory';\nimport { TAudioWorkletNodeConstructor } from './audio-worklet-node-constructor';\nimport { TAudioWorkletNodeRendererFactory } from './audio-worklet-node-renderer-factory';\nimport { TGetAudioNodeConnectionsFunction } from './get-audio-node-connections-function';\nimport { TGetBackupOfflineAudioContextFunction } from './get-backup-offline-audio-context-function';\nimport { TGetNativeContextFunction } from './get-native-context-function';\nimport { TIsNativeOfflineAudioContextFunction } from './is-native-offline-audio-context-function';\nimport { TNativeAudioWorkletNodeConstructor } from './native-audio-worklet-node-constructor';\nimport { TNativeAudioWorkletNodeFactory } from './native-audio-worklet-node-factory';\nimport { TSanitizeAudioWorkletNodeOptionsFunction } from './sanitize-audio-worklet-node-options-function';\nimport { TSetActiveAudioWorkletNodeInputsFunction } from './set-active-audio-worklet-node-inputs-function';\nimport { TTestAudioWorkletNodeOptionsClonabilityFunction } from './test-audio-worklet-node-options-clonability-function';\nimport { TWrapEventListenerFunction } from './wrap-event-listener-function';\n\nexport type TAudioWorkletNodeConstructorFactory = (\n    addUnrenderedAudioWorkletNode: TAddUnrenderedAudioWorkletNodeFunction,\n    audioNodeConstructor: TAudioNodeConstructor,\n    createAudioParam: TAudioParamFactory,\n    createAudioWorkletNodeRenderer: TAudioWorkletNodeRendererFactory,\n    createNativeAudioWorkletNode: TNativeAudioWorkletNodeFactory,\n    getAudioNodeConnections: TGetAudioNodeConnectionsFunction,\n    getBackupOfflineAudioContext: TGetBackupOfflineAudioContextFunction,\n    getNativeContext: TGetNativeContextFunction,\n    isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction,\n    nativeAudioWorkletNodeConstructor: null | TNativeAudioWorkletNodeConstructor,\n    sanitizeAudioWorkletNodeOptions: TSanitizeAudioWorkletNodeOptionsFunction,\n    setActiveAudioWorkletNodeInputs: TSetActiveAudioWorkletNodeInputsFunction,\n    testAudioWorkletNodeOptionsClonability: TTestAudioWorkletNodeOptionsClonabilityFunction,\n    wrapEventListener: TWrapEventListenerFunction\n) => TAudioWorkletNodeConstructor;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}