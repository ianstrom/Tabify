{"ast":null,"code":"import { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * const input = new Tone.Oscillator(230, \"sawtooth\").start();\n * const shift = new Tone.FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\nexport class FrequencyShifter extends Effect {\n  constructor() {\n    super(optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n    this.name = \"FrequencyShifter\";\n    const options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      minValue: -this.context.sampleRate / 2,\n      maxValue: this.context.sampleRate / 2\n    });\n    this._sine = new ToneOscillatorNode({\n      context: this.context,\n      type: \"sine\"\n    });\n    this._cosine = new Oscillator({\n      context: this.context,\n      phase: -90,\n      type: \"sine\"\n    });\n    this._sineMultiply = new Multiply({\n      context: this.context\n    });\n    this._cosineMultiply = new Multiply({\n      context: this.context\n    });\n    this._negate = new Negate({\n      context: this.context\n    });\n    this._add = new Add({\n      context: this.context\n    });\n    this._phaseShifter = new PhaseShiftAllpass({\n      context: this.context\n    });\n    this.effectSend.connect(this._phaseShifter);\n    // connect the carrier frequency signal to the two oscillators\n    this.frequency.fan(this._sine.frequency, this._cosine.frequency);\n    this._phaseShifter.offset90.connect(this._cosineMultiply);\n    this._cosine.connect(this._cosineMultiply.factor);\n    this._phaseShifter.connect(this._sineMultiply);\n    this._sine.connect(this._sineMultiply.factor);\n    this._sineMultiply.connect(this._negate);\n    this._cosineMultiply.connect(this._add);\n    this._negate.connect(this._add.addend);\n    this._add.connect(this.effectReturn);\n    // start the oscillators at the same time\n    const now = this.immediate();\n    this._sine.start(now);\n    this._cosine.start(now);\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      frequency: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this._add.dispose();\n    this._cosine.dispose();\n    this._cosineMultiply.dispose();\n    this._negate.dispose();\n    this._phaseShifter.dispose();\n    this._sine.dispose();\n    this._sineMultiply.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["PhaseShiftAllpass","optionsFromArguments","Effect","Add","Multiply","Negate","Signal","Oscillator","ToneOscillatorNode","FrequencyShifter","constructor","getDefaults","arguments","name","options","frequency","context","units","value","minValue","sampleRate","maxValue","_sine","type","_cosine","phase","_sineMultiply","_cosineMultiply","_negate","_add","_phaseShifter","effectSend","connect","fan","offset90","factor","addend","effectReturn","now","immediate","start","Object","assign","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/effect/FrequencyShifter.ts"],"sourcesContent":["import { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { Frequency } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n\ninterface FrequencyShifterOptions extends EffectOptions {\n\tfrequency: Frequency;\n}\n\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * const input = new Tone.Oscillator(230, \"sawtooth\").start();\n * const shift = new Tone.FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\nexport class FrequencyShifter extends Effect<FrequencyShifterOptions> {\n\n\treadonly name: string = \"FrequencyShifter\";\n\n\t/**\n\t * The ring modulators carrier frequency. This frequency determines\n\t * by how many Hertz the input signal will be shifted up or down. Default is 0.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The ring modulators sine carrier\n\t */\n\tprivate _sine: ToneOscillatorNode;\n\n\t/**\n\t * The ring modulators cosine carrier\n\t */\n\tprivate _cosine: Oscillator;\n\n\t/**\n\t * The sine multiply operator\n\t */\n\tprivate _sineMultiply: Multiply;\n\n\t/**\n\t * The cosine multiply operator\n\t */\n\tprivate _cosineMultiply: Multiply;\n\n\t/**\n\t * The negate operator\n\t */\n\tprivate _negate: Negate;\n\n\t/**\n\t * The final add operator\n\t */\n\tprivate _add: Add;\n\n\t/**\n\t * The phase shifter to create the initial 90Â° phase offset\n\t */\n\tprivate _phaseShifter: PhaseShiftAllpass;\n\n\t/**\n\t * @param frequency The incoming signal is shifted by this frequency value.\n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<FrequencyShifterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t\tminValue: -this.context.sampleRate / 2,\n\t\t\tmaxValue: this.context.sampleRate / 2,\n\t\t});\n\n\t\tthis._sine = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._cosine = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: -90,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._sineMultiply = new Multiply({ context: this.context });\n\t\tthis._cosineMultiply = new Multiply({ context: this.context });\n\t\tthis._negate = new Negate({ context: this.context });\n\t\tthis._add = new Add({ context: this.context });\n\n\t\tthis._phaseShifter = new PhaseShiftAllpass({ context: this.context });\n\t\tthis.effectSend.connect(this._phaseShifter);\n\n\t\t// connect the carrier frequency signal to the two oscillators\n\t\tthis.frequency.fan(this._sine.frequency, this._cosine.frequency);\n\n\t\tthis._phaseShifter.offset90.connect(this._cosineMultiply);\n\t\tthis._cosine.connect(this._cosineMultiply.factor);\n\n\t\tthis._phaseShifter.connect(this._sineMultiply);\n\t\tthis._sine.connect(this._sineMultiply.factor);\n\t\tthis._sineMultiply.connect(this._negate);\n\n\t\tthis._cosineMultiply.connect(this._add);\n\t\tthis._negate.connect(this._add.addend);\n\n\t\tthis._add.connect(this.effectReturn);\n\n\t\t// start the oscillators at the same time\n\t\tconst now = this.immediate();\n\t\tthis._sine.start(now);\n\t\tthis._cosine.start(now);\n\t}\n\n\tstatic getDefaults(): FrequencyShifterOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._add.dispose();\n\t\tthis._cosine.dispose();\n\t\tthis._cosineMultiply.dispose();\n\t\tthis._negate.dispose();\n\t\tthis._phaseShifter.dispose();\n\t\tthis._sine.dispose();\n\t\tthis._sineMultiply.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}