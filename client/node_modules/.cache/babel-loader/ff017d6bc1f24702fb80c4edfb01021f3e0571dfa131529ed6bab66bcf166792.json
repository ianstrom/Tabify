{"ast":null,"code":"import { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport class TimeBaseClass extends Tone {\n  /**\n   * @param context The context associated with the time value. Used to compute\n   * Transport and context-relative timing.\n   * @param  value  The time value as a number, string or object\n   * @param  units  Unit values\n   */\n  constructor(context, value, units) {\n    super();\n    /**\n     * The default units\n     */\n    this.defaultUnits = \"s\";\n    this._val = value;\n    this._units = units;\n    this.context = context;\n    this._expressions = this._getExpressions();\n  }\n  /**\n   * All of the time encoding expressions\n   */\n  _getExpressions() {\n    return {\n      hz: {\n        method: value => {\n          return this._frequencyToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)hz$/i\n      },\n      i: {\n        method: value => {\n          return this._ticksToUnits(parseInt(value, 10));\n        },\n        regexp: /^(\\d+)i$/i\n      },\n      m: {\n        method: value => {\n          return this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n        },\n        regexp: /^(\\d+)m$/i\n      },\n      n: {\n        method: (value, dot) => {\n          const numericValue = parseInt(value, 10);\n          const scalar = dot === \".\" ? 1.5 : 1;\n          if (numericValue === 1) {\n            return this._beatsToUnits(this._getTimeSignature()) * scalar;\n          } else {\n            return this._beatsToUnits(4 / numericValue) * scalar;\n          }\n        },\n        regexp: /^(\\d+)n(\\.?)$/i\n      },\n      number: {\n        method: value => {\n          return this._expressions[this.defaultUnits].method.call(this, value);\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)$/\n      },\n      s: {\n        method: value => {\n          return this._secondsToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)s$/\n      },\n      samples: {\n        method: value => {\n          return parseInt(value, 10) / this.context.sampleRate;\n        },\n        regexp: /^(\\d+)samples$/\n      },\n      t: {\n        method: value => {\n          const numericValue = parseInt(value, 10);\n          return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n        },\n        regexp: /^(\\d+)t$/i\n      },\n      tr: {\n        method: (m, q, s) => {\n          let total = 0;\n          if (m && m !== \"0\") {\n            total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n          if (q && q !== \"0\") {\n            total += this._beatsToUnits(parseFloat(q));\n          }\n          if (s && s !== \"0\") {\n            total += this._beatsToUnits(parseFloat(s) / 4);\n          }\n          return total;\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/\n      }\n    };\n  }\n  //-------------------------------------\n  // \tVALUE OF\n  //-------------------------------------\n  /**\n   * Evaluate the time value. Returns the time in seconds.\n   */\n  valueOf() {\n    if (this._val instanceof TimeBaseClass) {\n      this.fromType(this._val);\n    }\n    if (isUndef(this._val)) {\n      return this._noArg();\n    } else if (isString(this._val) && isUndef(this._units)) {\n      for (const units in this._expressions) {\n        if (this._expressions[units].regexp.test(this._val.trim())) {\n          this._units = units;\n          break;\n        }\n      }\n    } else if (isObject(this._val)) {\n      let total = 0;\n      for (const typeName in this._val) {\n        if (isDefined(this._val[typeName])) {\n          const quantity = this._val[typeName];\n          // @ts-ignore\n          const time = new this.constructor(this.context, typeName).valueOf() * quantity;\n          total += time;\n        }\n      }\n      return total;\n    }\n    if (isDefined(this._units)) {\n      const expr = this._expressions[this._units];\n      const matching = this._val.toString().trim().match(expr.regexp);\n      if (matching) {\n        return expr.method.apply(this, matching.slice(1));\n      } else {\n        return expr.method.call(this, this._val);\n      }\n    } else if (isString(this._val)) {\n      return parseFloat(this._val);\n    } else {\n      return this._val;\n    }\n  }\n  //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n  /**\n   * Returns the value of a frequency in the current units\n   */\n  _frequencyToUnits(freq) {\n    return 1 / freq;\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n  _beatsToUnits(beats) {\n    return 60 / this._getBpm() * beats;\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n  _secondsToUnits(seconds) {\n    return seconds;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n  _ticksToUnits(ticks) {\n    return ticks * this._beatsToUnits(1) / this._getPPQ();\n  }\n  /**\n   * With no arguments, return 'now'\n   */\n  _noArg() {\n    return this._now();\n  }\n  //-------------------------------------\n  // \tTEMPO CONVERSIONS\n  //-------------------------------------\n  /**\n   * Return the bpm\n   */\n  _getBpm() {\n    return this.context.transport.bpm.value;\n  }\n  /**\n   * Return the timeSignature\n   */\n  _getTimeSignature() {\n    return this.context.transport.timeSignature;\n  }\n  /**\n   * Return the PPQ or 192 if Transport is not available\n   */\n  _getPPQ() {\n    return this.context.transport.PPQ;\n  }\n  //-------------------------------------\n  // \tCONVERSION INTERFACE\n  //-------------------------------------\n  /**\n   * Coerce a time type into this units type.\n   * @param type Any time type units\n   */\n  fromType(type) {\n    this._units = undefined;\n    switch (this.defaultUnits) {\n      case \"s\":\n        this._val = type.toSeconds();\n        break;\n      case \"i\":\n        this._val = type.toTicks();\n        break;\n      case \"hz\":\n        this._val = type.toFrequency();\n        break;\n      case \"midi\":\n        this._val = type.toMidi();\n        break;\n    }\n    return this;\n  }\n  /**\n   * Return the value in hertz\n   */\n  toFrequency() {\n    return 1 / this.toSeconds();\n  }\n  /**\n   * Return the time in samples\n   */\n  toSamples() {\n    return this.toSeconds() * this.context.sampleRate;\n  }\n  /**\n   * Return the time in milliseconds.\n   */\n  toMilliseconds() {\n    return this.toSeconds() * 1000;\n  }\n}","map":{"version":3,"names":["Tone","isDefined","isObject","isString","isUndef","TimeBaseClass","constructor","context","value","units","defaultUnits","_val","_units","_expressions","_getExpressions","hz","method","_frequencyToUnits","parseFloat","regexp","i","_ticksToUnits","parseInt","m","_beatsToUnits","_getTimeSignature","n","dot","numericValue","scalar","number","call","s","_secondsToUnits","samples","sampleRate","t","Math","floor","tr","q","total","valueOf","fromType","_noArg","test","trim","typeName","quantity","time","expr","matching","toString","match","apply","slice","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","transport","bpm","timeSignature","PPQ","type","undefined","toSeconds","toTicks","toFrequency","toMidi","toSamples","toMilliseconds"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/core/type/TimeBase.ts"],"sourcesContent":["import { BaseContext } from \"../context/BaseContext\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: BaseContext;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\t/**\n\t * @param context The context associated with the time value. Used to compute\n\t * Transport and context-relative timing.\n\t * @param  value  The time value as a number, string or object\n\t * @param  units  Unit values\n\t */\n\tconstructor(context: BaseContext, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t//-------------------------------------\n\t// \tVALUE OF\n\t//-------------------------------------\n\n\t/**\n\t * Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t * With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t//-------------------------------------\n\t// \tTEMPO CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t//-------------------------------------\n\t// \tCONVERSION INTERFACE\n\t//-------------------------------------\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t * Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t * Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t * Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t * Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}