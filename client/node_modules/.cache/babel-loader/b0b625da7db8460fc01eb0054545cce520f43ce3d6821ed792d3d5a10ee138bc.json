{"ast":null,"code":"export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n  return (nativeAudioNode, whenConnected, whenDisconnected) => {\n    const connections = new Set();\n    nativeAudioNode.connect = (connect => {\n      // tslint:disable-next-line:invalid-void no-inferrable-types\n      return function (destination) {\n        let output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        let input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        const wasDisconnected = connections.size === 0;\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], connection => connection[0] === destination && connection[1] === output && connection[2] === input, true);\n          if (wasDisconnected) {\n            whenConnected();\n          }\n          return destination;\n        }\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], connection => connection[0] === destination && connection[1] === output, true);\n        if (wasDisconnected) {\n          whenConnected();\n        }\n        return;\n      };\n    })(nativeAudioNode.connect);\n    nativeAudioNode.disconnect = (disconnect => {\n      return (destinationOrOutput, output, input) => {\n        const wasConnected = connections.size > 0;\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n          for (const connection of connections) {\n            if (connection[1] === destinationOrOutput) {\n              connections.delete(connection);\n            }\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n          for (const connection of connections) {\n            if (connection[0] === destinationOrOutput && (output === undefined || connection[1] === output) && (input === undefined || connection[2] === input)) {\n              connections.delete(connection);\n            }\n          }\n        }\n        const isDisconnected = connections.size === 0;\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    })(nativeAudioNode.disconnect);\n    return nativeAudioNode;\n  };\n};","map":{"version":3,"names":["createMonitorConnections","insertElementInSet","isNativeAudioNode","nativeAudioNode","whenConnected","whenDisconnected","connections","Set","connect","destination","output","arguments","length","undefined","input","wasDisconnected","size","call","connection","disconnect","destinationOrOutput","wasConnected","apply","clear","delete","isDisconnected"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/monitor-connections.ts"],"sourcesContent":["import { TMonitorConnectionsFactory, TNativeAudioNode, TNativeAudioParam } from '../types';\n\nexport const createMonitorConnections: TMonitorConnectionsFactory = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set<[TNativeAudioNode, number, number] | [TNativeAudioParam, number]>();\n\n        nativeAudioNode.connect = <TNativeAudioNode['connect']>((connect) => {\n            // tslint:disable-next-line:invalid-void no-inferrable-types\n            return (destination: TNativeAudioNode | TNativeAudioParam, output = 0, input: number = 0): void | TNativeAudioNode => {\n                const wasDisconnected = connections.size === 0;\n\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    (<(destination: TNativeAudioNode, output?: number, input?: number) => TNativeAudioNode>connect).call(\n                        nativeAudioNode,\n                        destination,\n                        output,\n                        input\n                    );\n\n                    insertElementInSet(\n                        connections,\n                        [destination, output, input],\n                        (connection) => connection[0] === destination && connection[1] === output && connection[2] === input,\n                        true\n                    );\n\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n\n                    return destination;\n                }\n\n                connect.call(nativeAudioNode, destination, output);\n\n                insertElementInSet(\n                    connections,\n                    [destination, output],\n                    (connection) => connection[0] === destination && connection[1] === output,\n                    true\n                );\n\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n\n                return;\n            };\n        })(nativeAudioNode.connect);\n\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput?: number | TNativeAudioNode | TNativeAudioParam, output?: number, input?: number): void => {\n                const wasConnected = connections.size > 0;\n\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n\n                    connections.clear();\n                } else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    (<(output: number) => void>disconnect).call(nativeAudioNode, destinationOrOutput);\n\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                } else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        (<(destination: TNativeAudioNode, output?: number, input?: number) => void>disconnect).call(\n                            nativeAudioNode,\n                            destinationOrOutput,\n                            output,\n                            input\n                        );\n                    } else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        (<(destination: TNativeAudioParam, output?: number) => void>disconnect).call(\n                            nativeAudioNode,\n                            destinationOrOutput,\n                            output\n                        );\n                    }\n\n                    for (const connection of connections) {\n                        if (\n                            connection[0] === destinationOrOutput &&\n                            (output === undefined || connection[1] === output) &&\n                            (input === undefined || connection[2] === input)\n                        ) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n\n                const isDisconnected = connections.size === 0;\n\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n\n        return nativeAudioNode;\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}