{"ast":null,"code":"export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = nativeAnalyserNode => {\n  nativeAnalyserNode.getFloatTimeDomainData = array => {\n    const byteTimeDomainData = new Uint8Array(array.length);\n    nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n    const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n    for (let i = 0; i < length; i += 1) {\n      array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n    }\n    return array;\n  };\n};","map":{"version":3,"names":["wrapAnalyserNodeGetFloatTimeDomainDataMethod","nativeAnalyserNode","getFloatTimeDomainData","array","byteTimeDomainData","Uint8Array","length","getByteTimeDomainData","Math","max","fftSize","i"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/helpers/wrap-analyser-node-get-float-time-domain-data-method.ts"],"sourcesContent":["import { TNativeAnalyserNode } from '../types';\n\nexport const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode: TNativeAnalyserNode): void => {\n    nativeAnalyserNode.getFloatTimeDomainData = (array: Float32Array) => {\n        const byteTimeDomainData = new Uint8Array(array.length);\n\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n\n        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n\n        for (let i = 0; i < length; i += 1) {\n            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n\n        return array;\n    };\n};\n"],"mappings":"AAEA,OAAO,MAAMA,4CAA4C,GAAIC,kBAAuC,IAAU;EAC1GA,kBAAkB,CAACC,sBAAsB,GAAIC,KAAmB,IAAI;IAChE,MAAMC,kBAAkB,GAAG,IAAIC,UAAU,CAACF,KAAK,CAACG,MAAM,CAAC;IAEvDL,kBAAkB,CAACM,qBAAqB,CAACH,kBAAkB,CAAC;IAE5D,MAAME,MAAM,GAAGE,IAAI,CAACC,GAAG,CAACL,kBAAkB,CAACE,MAAM,EAAEL,kBAAkB,CAACS,OAAO,CAAC;IAE9E,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,IAAI,CAAC,EAAE;MAChCR,KAAK,CAACQ,CAAC,CAAC,GAAG,CAACP,kBAAkB,CAACO,CAAC,CAAC,GAAG,GAAG,IAAI,SAAS;;IAGxD,OAAOR,KAAK;EAChB,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}