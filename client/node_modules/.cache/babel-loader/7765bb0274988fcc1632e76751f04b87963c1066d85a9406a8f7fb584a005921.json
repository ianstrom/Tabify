{"ast":null,"code":"import { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\nexport class Pow extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n    this.name = \"Pow\";\n    const options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n    this._exponentScaler = this.input = this.output = new WaveShaper({\n      context: this.context,\n      mapping: this._expFunc(options.value),\n      length: 8192\n    });\n    this._exponent = options.value;\n  }\n  static getDefaults() {\n    return Object.assign(SignalOperator.getDefaults(), {\n      value: 1\n    });\n  }\n  /**\n   * the function which maps the waveshaper\n   * @param exponent exponent value\n   */\n  _expFunc(exponent) {\n    return val => {\n      return Math.pow(Math.abs(val), exponent);\n    };\n  }\n  /**\n   * The value of the exponent.\n   */\n  get value() {\n    return this._exponent;\n  }\n  set value(exponent) {\n    this._exponent = exponent;\n    this._exponentScaler.setMap(this._expFunc(this._exponent));\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._exponentScaler.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["WaveShaper","optionsFromArguments","SignalOperator","Pow","constructor","Object","assign","getDefaults","arguments","name","options","_exponentScaler","input","output","context","mapping","_expFunc","value","length","_exponent","exponent","val","Math","pow","abs","setMap","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/signal/Pow.ts"],"sourcesContent":["import { WaveShaper, WaveShaperMappingFn } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\n\nexport interface PowOptions extends ToneAudioNodeOptions {\n\tvalue: number;\n}\n\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25. \n * @category Signal\n */\nexport class Pow extends SignalOperator<PowOptions> {\n\n\treadonly name: string = \"Pow\";\n\n\tprivate _exponent: number;\n\n\tprivate _exponentScaler: WaveShaper;\n\n\tinput: WaveShaper;\n\n\toutput: WaveShaper;\n\n\t/**\n\t * @param value Constant exponent value to use\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<PowOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._exponentScaler = this.input = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tmapping: this._expFunc(options.value),\n\t\t\tlength: 8192,\n\t\t});\n\n\t\tthis._exponent = options.value;\n\t}\n\n\tstatic getDefaults(): PowOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\t/**\n\t * the function which maps the waveshaper\n\t * @param exponent exponent value\n\t */\n\tprivate _expFunc(exponent: number): WaveShaperMappingFn {\n\t\treturn (val: number) => {\n\t\t\treturn Math.pow(Math.abs(val), exponent);\n\t\t};\n\t}\n\n\t/**\n\t * The value of the exponent.\n\t */\n\tget value(): number {\n\t\treturn this._exponent;\n\t}\n\tset value(exponent: number) {\n\t\tthis._exponent = exponent;\n\t\tthis._exponentScaler.setMap(this._expFunc(this._exponent));\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponentScaler.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAA6B,cAAc;AAC9D,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,cAAc,QAAQ,kBAAkB;AAOjD;;;;;;;;;AASA,OAAM,MAAOC,GAAI,SAAQD,cAA0B;EAiBlDE,YAAA;IACC,KAAK,CAACC,MAAM,CAACC,MAAM,CAACL,oBAAoB,CAACE,GAAG,CAACI,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAhB3E,KAAAC,IAAI,GAAW,KAAK;IAiB5B,MAAMC,OAAO,GAAGT,oBAAoB,CAACE,GAAG,CAACI,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IAE7E,IAAI,CAACG,eAAe,GAAG,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIb,UAAU,CAAC;MAChEc,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,OAAO,EAAE,IAAI,CAACC,QAAQ,CAACN,OAAO,CAACO,KAAK,CAAC;MACrCC,MAAM,EAAE;KACR,CAAC;IAEF,IAAI,CAACC,SAAS,GAAGT,OAAO,CAACO,KAAK;EAC/B;EAEA,OAAOV,WAAWA,CAAA;IACjB,OAAOF,MAAM,CAACC,MAAM,CAACJ,cAAc,CAACK,WAAW,EAAE,EAAE;MAClDU,KAAK,EAAE;KACP,CAAC;EACH;EAEA;;;;EAIQD,QAAQA,CAACI,QAAgB;IAChC,OAAQC,GAAW,IAAI;MACtB,OAAOC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACH,GAAG,CAAC,EAAED,QAAQ,CAAC;IACzC,CAAC;EACF;EAEA;;;EAGA,IAAIH,KAAKA,CAAA;IACR,OAAO,IAAI,CAACE,SAAS;EACtB;EACA,IAAIF,KAAKA,CAACG,QAAgB;IACzB,IAAI,CAACD,SAAS,GAAGC,QAAQ;IACzB,IAAI,CAACT,eAAe,CAACc,MAAM,CAAC,IAAI,CAACT,QAAQ,CAAC,IAAI,CAACG,SAAS,CAAC,CAAC;EAC3D;EAEA;;;EAGAO,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACf,eAAe,CAACe,OAAO,EAAE;IAC9B,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}