{"ast":null,"code":"export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = convertNumberToUnsignedLong => {\n  return audioBuffer => {\n    audioBuffer.copyFromChannel = (copyFromChannel => {\n      return function (destination, channelNumberAsNumber) {\n        let bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n        if (bufferOffset < audioBuffer.length) {\n          return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyFromChannel);\n    audioBuffer.copyToChannel = (copyToChannel => {\n      return function (source, channelNumberAsNumber) {\n        let bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n        if (bufferOffset < audioBuffer.length) {\n          return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyToChannel);\n  };\n};","map":{"version":3,"names":["createWrapAudioBufferCopyChannelMethodsOutOfBounds","convertNumberToUnsignedLong","audioBuffer","copyFromChannel","destination","channelNumberAsNumber","bufferOffsetAsNumber","arguments","length","undefined","bufferOffset","channelNumber","call","copyToChannel","source"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.ts"],"sourcesContent":["import { TNativeAudioBuffer, TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory } from '../types';\n\nexport const createWrapAudioBufferCopyChannelMethodsOutOfBounds: TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory = (\n    convertNumberToUnsignedLong\n) => {\n    return (audioBuffer: TNativeAudioBuffer): void => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n"],"mappings":"AAEA,OAAO,MAAMA,kDAAkD,GAC3DC,2BAA2B,IAC3B;EACA,OAAQC,WAA+B,IAAU;IAC7CA,WAAW,CAACC,eAAe,GAAG,CAAEA,eAAe,IAAI;MAC/C,OAAO,UAACC,WAAyB,EAAEC,qBAA6B,EAA8B;QAAA,IAA5BC,oBAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;QACtF,MAAMG,YAAY,GAAGT,2BAA2B,CAACK,oBAAoB,CAAC;QACtE,MAAMK,aAAa,GAAGV,2BAA2B,CAACI,qBAAqB,CAAC;QAExE,IAAIK,YAAY,GAAGR,WAAW,CAACM,MAAM,EAAE;UACnC,OAAOL,eAAe,CAACS,IAAI,CAACV,WAAW,EAAEE,WAAW,EAAEO,aAAa,EAAED,YAAY,CAAC;;MAE1F,CAAC;IACL,CAAC,EAAER,WAAW,CAACC,eAAe,CAAC;IAE/BD,WAAW,CAACW,aAAa,GAAG,CAAEA,aAAa,IAAI;MAC3C,OAAO,UAACC,MAAoB,EAAET,qBAA6B,EAA8B;QAAA,IAA5BC,oBAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;QACjF,MAAMG,YAAY,GAAGT,2BAA2B,CAACK,oBAAoB,CAAC;QACtE,MAAMK,aAAa,GAAGV,2BAA2B,CAACI,qBAAqB,CAAC;QAExE,IAAIK,YAAY,GAAGR,WAAW,CAACM,MAAM,EAAE;UACnC,OAAOK,aAAa,CAACD,IAAI,CAACV,WAAW,EAAEY,MAAM,EAAEH,aAAa,EAAED,YAAY,CAAC;;MAEnF,CAAC;IACL,CAAC,EAAER,WAAW,CAACW,aAAa,CAAC;EACjC,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}