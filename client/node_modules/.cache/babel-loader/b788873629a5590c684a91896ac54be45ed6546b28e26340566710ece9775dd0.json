{"ast":null,"code":"import { FeedbackEffect } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport class PitchShift extends FeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n    this.name = \"PitchShift\";\n    const options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n    this._frequency = new Signal({\n      context: this.context\n    });\n    this._delayA = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoA = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\"\n    }).connect(this._delayA.delayTime);\n    this._delayB = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoB = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\",\n      phase: 180\n    }).connect(this._delayB.delayTime);\n    this._crossFade = new CrossFade({\n      context: this.context\n    });\n    this._crossFadeLFO = new LFO({\n      context: this.context,\n      min: 0,\n      max: 1,\n      type: \"triangle\",\n      phase: 90\n    }).connect(this._crossFade.fade);\n    this._feedbackDelay = new Delay({\n      delayTime: options.delayTime,\n      context: this.context\n    });\n    this.delayTime = this._feedbackDelay.delayTime;\n    readOnly(this, \"delayTime\");\n    this._pitch = options.pitch;\n    this._windowSize = options.windowSize;\n    // connect the two delay lines up\n    this._delayA.connect(this._crossFade.a);\n    this._delayB.connect(this._crossFade.b);\n    // connect the frequency\n    this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n    // route the input\n    this.effectSend.fan(this._delayA, this._delayB);\n    this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n    // start the LFOs at the same time\n    const now = this.now();\n    this._lfoA.start(now);\n    this._lfoB.start(now);\n    this._crossFadeLFO.start(now);\n    // set the initial value\n    this.windowSize = this._windowSize;\n  }\n  static getDefaults() {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      pitch: 0,\n      windowSize: 0.1,\n      delayTime: 0,\n      feedback: 0\n    });\n  }\n  /**\n   * Repitch the incoming signal by some interval (measured in semi-tones).\n   * @example\n   * const pitchShift = new Tone.PitchShift().toDestination();\n   * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n   * pitchShift.pitch = -12; // down one octave\n   * pitchShift.pitch = 7; // up a fifth\n   */\n  get pitch() {\n    return this._pitch;\n  }\n  set pitch(interval) {\n    this._pitch = interval;\n    let factor = 0;\n    if (interval < 0) {\n      this._lfoA.min = 0;\n      this._lfoA.max = this._windowSize;\n      this._lfoB.min = 0;\n      this._lfoB.max = this._windowSize;\n      factor = intervalToFrequencyRatio(interval - 1) + 1;\n    } else {\n      this._lfoA.min = this._windowSize;\n      this._lfoA.max = 0;\n      this._lfoB.min = this._windowSize;\n      this._lfoB.max = 0;\n      factor = intervalToFrequencyRatio(interval) - 1;\n    }\n    this._frequency.value = factor * (1.2 / this._windowSize);\n  }\n  /**\n   * The window size corresponds roughly to the sample length in a looping sampler.\n   * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n   * signal, but larger values will result in smoother pitch shifting for larger intervals.\n   * A nominal range of 0.03 to 0.1 is recommended.\n   */\n  get windowSize() {\n    return this._windowSize;\n  }\n  set windowSize(size) {\n    this._windowSize = this.toSeconds(size);\n    this.pitch = this._pitch;\n  }\n  dispose() {\n    super.dispose();\n    this._frequency.dispose();\n    this._delayA.dispose();\n    this._delayB.dispose();\n    this._lfoA.dispose();\n    this._lfoB.dispose();\n    this._crossFade.dispose();\n    this._crossFadeLFO.dispose();\n    this._feedbackDelay.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["FeedbackEffect","optionsFromArguments","LFO","Delay","CrossFade","Signal","readOnly","intervalToFrequencyRatio","PitchShift","constructor","getDefaults","arguments","name","options","_frequency","context","_delayA","maxDelay","_lfoA","min","max","type","connect","delayTime","_delayB","_lfoB","phase","_crossFade","_crossFadeLFO","fade","_feedbackDelay","_pitch","pitch","_windowSize","windowSize","a","b","fan","frequency","effectSend","chain","effectReturn","now","start","Object","assign","feedback","interval","factor","value","size","toSeconds","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/effect/PitchShift.ts"],"sourcesContent":["import { Interval, Seconds, Time } from \"../core/type/Units\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n\nexport interface PitchShiftOptions extends FeedbackEffectOptions {\n\tpitch: Interval;\n\twindowSize: Seconds;\n\tdelayTime: Time;\n}\n\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport class PitchShift extends FeedbackEffect<PitchShiftOptions> {\n\n\treadonly name: string = \"PitchShift\";\n\n\t/**\n\t * The pitch signal\n\t */\n\tprivate _frequency: Signal<\"frequency\">;\n\n\t/**\n\t * Uses two DelayNodes to cover up the jump in the sawtooth wave.\n\t */\n\tprivate _delayA: Delay;\n\n\t/**\n\t * The first LFO.\n\t */\n\tprivate _lfoA: LFO;\n\n\t/**\n\t * The second DelayNode\n\t */\n\tprivate _delayB: Delay;\n\n\t/**\n\t * The second LFO.\n\t */\n\tprivate _lfoB: LFO;\n\n\t/**\n\t * Cross fade quickly between the two delay lines to cover up the jump in the sawtooth wave\n\t */\n\tprivate _crossFade: CrossFade;\n\n\t/**\n\t * LFO which alternates between the two delay lines to cover up the disparity in the\n\t * sawtooth wave.\n\t */\n\tprivate _crossFadeLFO: LFO;\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _feedbackDelay: Delay;\n\n\t/**\n\t * The amount of delay on the input signal\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Hold the current pitch\n\t */\n\tprivate _pitch: Interval;\n\n\t/**\n\t * Hold the current windowSize\n\t */\n\tprivate _windowSize;\n\n\t/**\n\t * @param pitch The interval to transpose the incoming signal by.\n\t */\n\tconstructor(pitch?: Interval);\n\tconstructor(options?: Partial<PitchShiftOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n\t\tconst options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n\n\t\tthis._frequency = new Signal({ context: this.context });\n\t\tthis._delayA = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoA = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\"\n\t\t}).connect(this._delayA.delayTime);\n\t\tthis._delayB = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoB = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\",\n\t\t\tphase: 180\n\t\t}).connect(this._delayB.delayTime);\n\t\tthis._crossFade = new CrossFade({ context: this.context });\n\t\tthis._crossFadeLFO = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\ttype: \"triangle\",\n\t\t\tphase: 90\n\t\t}).connect(this._crossFade.fade);\n\t\tthis._feedbackDelay = new Delay({\n\t\t\tdelayTime: options.delayTime,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis.delayTime = this._feedbackDelay.delayTime;\n\t\treadOnly(this, \"delayTime\");\n\t\tthis._pitch = options.pitch;\n\n\t\tthis._windowSize = options.windowSize;\n\n\t\t// connect the two delay lines up\n\t\tthis._delayA.connect(this._crossFade.a);\n\t\tthis._delayB.connect(this._crossFade.b);\n\t\t// connect the frequency\n\t\tthis._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t\t// route the input\n\t\tthis.effectSend.fan(this._delayA, this._delayB);\n\t\tthis._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t\t// start the LFOs at the same time\n\t\tconst now = this.now();\n\t\tthis._lfoA.start(now);\n\t\tthis._lfoB.start(now);\n\t\tthis._crossFadeLFO.start(now);\n\t\t// set the initial value\n\t\tthis.windowSize = this._windowSize;\n\t}\n\n\tstatic getDefaults(): PitchShiftOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tpitch: 0,\n\t\t\twindowSize: 0.1,\n\t\t\tdelayTime: 0,\n\t\t\tfeedback: 0\n\t\t});\n\t}\n\n\t/**\n\t * Repitch the incoming signal by some interval (measured in semi-tones).\n\t * @example\n\t * const pitchShift = new Tone.PitchShift().toDestination();\n\t * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n\t * pitchShift.pitch = -12; // down one octave\n\t * pitchShift.pitch = 7; // up a fifth\n\t */\n\tget pitch() {\n\t\treturn this._pitch;\n\t}\n\tset pitch(interval) {\n\t\tthis._pitch = interval;\n\t\tlet factor = 0;\n\t\tif (interval < 0) {\n\t\t\tthis._lfoA.min = 0;\n\t\t\tthis._lfoA.max = this._windowSize;\n\t\t\tthis._lfoB.min = 0;\n\t\t\tthis._lfoB.max = this._windowSize;\n\t\t\tfactor = intervalToFrequencyRatio(interval - 1) + 1;\n\t\t} else {\n\t\t\tthis._lfoA.min = this._windowSize;\n\t\t\tthis._lfoA.max = 0;\n\t\t\tthis._lfoB.min = this._windowSize;\n\t\t\tthis._lfoB.max = 0;\n\t\t\tfactor = intervalToFrequencyRatio(interval) - 1;\n\t\t}\n\t\tthis._frequency.value = factor * (1.2 / this._windowSize);\n\t}\n\n\t/**\n\t * The window size corresponds roughly to the sample length in a looping sampler.\n\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t * signal, but larger values will result in smoother pitch shifting for larger intervals.\n\t * A nominal range of 0.03 to 0.1 is recommended.\n\t */\n\tget windowSize(): Seconds {\n\t\treturn this._windowSize;\n\t}\n\tset windowSize(size) {\n\t\tthis._windowSize = this.toSeconds(size);\n\t\tthis.pitch = this._pitch;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._frequency.dispose();\n\t\tthis._delayA.dispose();\n\t\tthis._delayB.dispose();\n\t\tthis._lfoA.dispose();\n\t\tthis._lfoB.dispose();\n\t\tthis._crossFade.dispose();\n\t\tthis._crossFadeLFO.dispose();\n\t\tthis._feedbackDelay.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AACA,SAASA,cAAc,QAA+B,kBAAkB;AACxE,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,KAAK,QAAQ,uBAAuB;AAC7C,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,SAASC,wBAAwB,QAAQ,0BAA0B;AAQnE;;;;;;;;AAQA,OAAM,MAAOC,UAAW,SAAQR,cAAiC;EAiEhES,YAAA;IAEC,KAAK,CAACR,oBAAoB,CAACO,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAjEnE,KAAAC,IAAI,GAAW,YAAY;IAkEnC,MAAMC,OAAO,GAAGZ,oBAAoB,CAACO,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IAEpF,IAAI,CAACG,UAAU,GAAG,IAAIT,MAAM,CAAC;MAAEU,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IACvD,IAAI,CAACC,OAAO,GAAG,IAAIb,KAAK,CAAC;MACxBc,QAAQ,EAAE,CAAC;MACXF,OAAO,EAAE,IAAI,CAACA;KACd,CAAC;IACF,IAAI,CAACG,KAAK,GAAG,IAAIhB,GAAG,CAAC;MACpBa,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBI,GAAG,EAAE,CAAC;MACNC,GAAG,EAAE,GAAG;MACRC,IAAI,EAAE;KACN,CAAC,CAACC,OAAO,CAAC,IAAI,CAACN,OAAO,CAACO,SAAS,CAAC;IAClC,IAAI,CAACC,OAAO,GAAG,IAAIrB,KAAK,CAAC;MACxBc,QAAQ,EAAE,CAAC;MACXF,OAAO,EAAE,IAAI,CAACA;KACd,CAAC;IACF,IAAI,CAACU,KAAK,GAAG,IAAIvB,GAAG,CAAC;MACpBa,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBI,GAAG,EAAE,CAAC;MACNC,GAAG,EAAE,GAAG;MACRC,IAAI,EAAE,UAAU;MAChBK,KAAK,EAAE;KACP,CAAC,CAACJ,OAAO,CAAC,IAAI,CAACE,OAAO,CAACD,SAAS,CAAC;IAClC,IAAI,CAACI,UAAU,GAAG,IAAIvB,SAAS,CAAC;MAAEW,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAC1D,IAAI,CAACa,aAAa,GAAG,IAAI1B,GAAG,CAAC;MAC5Ba,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBI,GAAG,EAAE,CAAC;MACNC,GAAG,EAAE,CAAC;MACNC,IAAI,EAAE,UAAU;MAChBK,KAAK,EAAE;KACP,CAAC,CAACJ,OAAO,CAAC,IAAI,CAACK,UAAU,CAACE,IAAI,CAAC;IAChC,IAAI,CAACC,cAAc,GAAG,IAAI3B,KAAK,CAAC;MAC/BoB,SAAS,EAAEV,OAAO,CAACU,SAAS;MAC5BR,OAAO,EAAE,IAAI,CAACA;KACd,CAAC;IACF,IAAI,CAACQ,SAAS,GAAG,IAAI,CAACO,cAAc,CAACP,SAAS;IAC9CjB,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC;IAC3B,IAAI,CAACyB,MAAM,GAAGlB,OAAO,CAACmB,KAAK;IAE3B,IAAI,CAACC,WAAW,GAAGpB,OAAO,CAACqB,UAAU;IAErC;IACA,IAAI,CAAClB,OAAO,CAACM,OAAO,CAAC,IAAI,CAACK,UAAU,CAACQ,CAAC,CAAC;IACvC,IAAI,CAACX,OAAO,CAACF,OAAO,CAAC,IAAI,CAACK,UAAU,CAACS,CAAC,CAAC;IACvC;IACA,IAAI,CAACtB,UAAU,CAACuB,GAAG,CAAC,IAAI,CAACnB,KAAK,CAACoB,SAAS,EAAE,IAAI,CAACb,KAAK,CAACa,SAAS,EAAE,IAAI,CAACV,aAAa,CAACU,SAAS,CAAC;IAC7F;IACA,IAAI,CAACC,UAAU,CAACF,GAAG,CAAC,IAAI,CAACrB,OAAO,EAAE,IAAI,CAACQ,OAAO,CAAC;IAC/C,IAAI,CAACG,UAAU,CAACa,KAAK,CAAC,IAAI,CAACV,cAAc,EAAE,IAAI,CAACW,YAAY,CAAC;IAC7D;IACA,MAAMC,GAAG,GAAG,IAAI,CAACA,GAAG,EAAE;IACtB,IAAI,CAACxB,KAAK,CAACyB,KAAK,CAACD,GAAG,CAAC;IACrB,IAAI,CAACjB,KAAK,CAACkB,KAAK,CAACD,GAAG,CAAC;IACrB,IAAI,CAACd,aAAa,CAACe,KAAK,CAACD,GAAG,CAAC;IAC7B;IACA,IAAI,CAACR,UAAU,GAAG,IAAI,CAACD,WAAW;EACnC;EAEA,OAAOvB,WAAWA,CAAA;IACjB,OAAOkC,MAAM,CAACC,MAAM,CAAC7C,cAAc,CAACU,WAAW,EAAE,EAAE;MAClDsB,KAAK,EAAE,CAAC;MACRE,UAAU,EAAE,GAAG;MACfX,SAAS,EAAE,CAAC;MACZuB,QAAQ,EAAE;KACV,CAAC;EACH;EAEA;;;;;;;;EAQA,IAAId,KAAKA,CAAA;IACR,OAAO,IAAI,CAACD,MAAM;EACnB;EACA,IAAIC,KAAKA,CAACe,QAAQ;IACjB,IAAI,CAAChB,MAAM,GAAGgB,QAAQ;IACtB,IAAIC,MAAM,GAAG,CAAC;IACd,IAAID,QAAQ,GAAG,CAAC,EAAE;MACjB,IAAI,CAAC7B,KAAK,CAACC,GAAG,GAAG,CAAC;MAClB,IAAI,CAACD,KAAK,CAACE,GAAG,GAAG,IAAI,CAACa,WAAW;MACjC,IAAI,CAACR,KAAK,CAACN,GAAG,GAAG,CAAC;MAClB,IAAI,CAACM,KAAK,CAACL,GAAG,GAAG,IAAI,CAACa,WAAW;MACjCe,MAAM,GAAGzC,wBAAwB,CAACwC,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC;KACnD,MAAM;MACN,IAAI,CAAC7B,KAAK,CAACC,GAAG,GAAG,IAAI,CAACc,WAAW;MACjC,IAAI,CAACf,KAAK,CAACE,GAAG,GAAG,CAAC;MAClB,IAAI,CAACK,KAAK,CAACN,GAAG,GAAG,IAAI,CAACc,WAAW;MACjC,IAAI,CAACR,KAAK,CAACL,GAAG,GAAG,CAAC;MAClB4B,MAAM,GAAGzC,wBAAwB,CAACwC,QAAQ,CAAC,GAAG,CAAC;;IAEhD,IAAI,CAACjC,UAAU,CAACmC,KAAK,GAAGD,MAAM,IAAI,GAAG,GAAG,IAAI,CAACf,WAAW,CAAC;EAC1D;EAEA;;;;;;EAMA,IAAIC,UAAUA,CAAA;IACb,OAAO,IAAI,CAACD,WAAW;EACxB;EACA,IAAIC,UAAUA,CAACgB,IAAI;IAClB,IAAI,CAACjB,WAAW,GAAG,IAAI,CAACkB,SAAS,CAACD,IAAI,CAAC;IACvC,IAAI,CAAClB,KAAK,GAAG,IAAI,CAACD,MAAM;EACzB;EAEAqB,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACtC,UAAU,CAACsC,OAAO,EAAE;IACzB,IAAI,CAACpC,OAAO,CAACoC,OAAO,EAAE;IACtB,IAAI,CAAC5B,OAAO,CAAC4B,OAAO,EAAE;IACtB,IAAI,CAAClC,KAAK,CAACkC,OAAO,EAAE;IACpB,IAAI,CAAC3B,KAAK,CAAC2B,OAAO,EAAE;IACpB,IAAI,CAACzB,UAAU,CAACyB,OAAO,EAAE;IACzB,IAAI,CAACxB,aAAa,CAACwB,OAAO,EAAE;IAC5B,IAAI,CAACtB,cAAc,CAACsB,OAAO,EAAE;IAC7B,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}