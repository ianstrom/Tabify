{"ast":null,"code":"import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass } from \"./Frequency\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"MidiClass\";\n    this.defaultUnits = \"midi\";\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n  _frequencyToUnits(freq) {\n    return ftom(super._frequencyToUnits(freq));\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n  _ticksToUnits(ticks) {\n    return ftom(super._ticksToUnits(ticks));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n  _beatsToUnits(beats) {\n    return ftom(super._beatsToUnits(beats));\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n  _secondsToUnits(seconds) {\n    return ftom(super._secondsToUnits(seconds));\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toMidi(); // 60\n   */\n  toMidi() {\n    return this.valueOf();\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toFrequency(); // 261.6255653005986\n   */\n  toFrequency() {\n    return mtof(this.toMidi());\n  }\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return A new transposed MidiClass\n   * @example\n   * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n   */\n  transpose(interval) {\n    return new MidiClass(this.context, this.toMidi() + interval);\n  }\n}\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value, units) {\n  return new MidiClass(getContext(), value, units);\n}","map":{"version":3,"names":["getContext","ftom","mtof","FrequencyClass","MidiClass","constructor","name","defaultUnits","_frequencyToUnits","freq","_ticksToUnits","ticks","_beatsToUnits","beats","_secondsToUnits","seconds","toMidi","valueOf","toFrequency","transpose","interval","context","Midi","value","units"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/core/type/Midi.ts"],"sourcesContent":["import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\treadonly name: string = \"MidiClass\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Midi(60).toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Midi(60).toFrequency(); // 261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return A new transposed MidiClass\n\t * @example\n\t * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,WAAW;AACtC,SAASC,IAAI,EAAEC,IAAI,QAAQ,eAAe;AAC1C,SAASC,cAAc,QAAuB,aAAa;AAI3D;;;;;;AAMA,OAAM,MAAOC,SAAU,SAAQD,cAAwB;EAAvDE,YAAA;;IAEU,KAAAC,IAAI,GAAW,WAAW;IAE1B,KAAAC,YAAY,GAAG,MAAM;EAyD/B;EAvDC;;;EAGUC,iBAAiBA,CAACC,IAAW;IACtC,OAAOR,IAAI,CAAC,KAAK,CAACO,iBAAiB,CAACC,IAAI,CAAC,CAAC;EAC3C;EAEA;;;EAGUC,aAAaA,CAACC,KAAY;IACnC,OAAOV,IAAI,CAAC,KAAK,CAACS,aAAa,CAACC,KAAK,CAAC,CAAC;EACxC;EAEA;;;EAGUC,aAAaA,CAACC,KAAa;IACpC,OAAOZ,IAAI,CAAC,KAAK,CAACW,aAAa,CAACC,KAAK,CAAC,CAAC;EACxC;EAEA;;;EAGUC,eAAeA,CAACC,OAAgB;IACzC,OAAOd,IAAI,CAAC,KAAK,CAACa,eAAe,CAACC,OAAO,CAAC,CAAC;EAC5C;EAEA;;;;;EAKAC,MAAMA,CAAA;IACL,OAAO,IAAI,CAACC,OAAO,EAAE;EACtB;EAEA;;;;;EAKAC,WAAWA,CAAA;IACV,OAAOhB,IAAI,CAAC,IAAI,CAACc,MAAM,EAAE,CAAC;EAC3B;EAEA;;;;;;EAMAG,SAASA,CAACC,QAAkB;IAC3B,OAAO,IAAIhB,SAAS,CAAC,IAAI,CAACiB,OAAO,EAAE,IAAI,CAACL,MAAM,EAAE,GAAGI,QAAQ,CAAC;EAC7D;;AAGD;;;;AAIA,OAAM,SAAUE,IAAIA,CAACC,KAAiB,EAAEC,KAAqB;EAC5D,OAAO,IAAIpB,SAAS,CAACJ,UAAU,EAAE,EAAEuB,KAAK,EAAEC,KAAK,CAAC;AACjD"},"metadata":{},"sourceType":"module","externalDependencies":[]}