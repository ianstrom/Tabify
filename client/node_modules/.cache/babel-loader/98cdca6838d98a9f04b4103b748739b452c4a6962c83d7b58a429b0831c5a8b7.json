{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\nexport class Tremolo extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    this.name = \"Tremolo\";\n    const options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    this._lfoL = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._amplitudeL = new Gain({\n      context: this.context\n    });\n    this._amplitudeR = new Gain({\n      context: this.context\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    this.depth = new Signal({\n      context: this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"frequency\", \"depth\"]);\n    this.connectEffectLeft(this._amplitudeL);\n    this.connectEffectRight(this._amplitudeR);\n    this._lfoL.connect(this._amplitudeL.gain);\n    this._lfoR.connect(this._amplitudeR.gain);\n    this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n    this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n    this.spread = options.spread;\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 10,\n      type: \"sine\",\n      depth: 0.5,\n      spread: 180\n    });\n  }\n  /**\n   * Start the tremolo.\n   */\n  start(time) {\n    this._lfoL.start(time);\n    this._lfoR.start(time);\n    return this;\n  }\n  /**\n   * Stop the tremolo.\n   */\n  stop(time) {\n    this._lfoL.stop(time);\n    this._lfoR.stop(time);\n    return this;\n  }\n  /**\n   * Sync the effect to the transport.\n   */\n  sync() {\n    this._lfoL.sync();\n    this._lfoR.sync();\n    this.context.transport.syncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport\n   */\n  unsync() {\n    this._lfoL.unsync();\n    this._lfoR.unsync();\n    this.context.transport.unsyncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * The oscillator type.\n   */\n  get type() {\n    return this._lfoL.type;\n  }\n  set type(type) {\n    this._lfoL.type = type;\n    this._lfoR.type = type;\n  }\n  /**\n   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n   * When set to 180, LFO's will be panned hard left and right respectively.\n   */\n  get spread() {\n    return this._lfoR.phase - this._lfoL.phase; // 180\n  }\n\n  set spread(spread) {\n    this._lfoL.phase = 90 - spread / 2;\n    this._lfoR.phase = spread / 2 + 90;\n  }\n  dispose() {\n    super.dispose();\n    this._lfoL.dispose();\n    this._lfoR.dispose();\n    this._amplitudeL.dispose();\n    this._amplitudeR.dispose();\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["StereoEffect","LFO","Gain","Signal","optionsFromArguments","readOnly","Tremolo","constructor","getDefaults","arguments","name","options","_lfoL","context","type","min","max","_lfoR","_amplitudeL","_amplitudeR","frequency","value","units","depth","connectEffectLeft","connectEffectRight","connect","gain","fan","amplitude","spread","Object","assign","start","time","stop","sync","transport","syncSignal","unsync","unsyncSignal","phase","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/effect/Tremolo.ts"],"sourcesContent":["import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { Degrees, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface TremoloOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n\tspread: Degrees;\n}\n\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n * \n * @category Effect\n */\nexport class Tremolo extends StereoEffect<TremoloOptions> {\n\n\treadonly name: string = \"Tremolo\";\n\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeL: Gain;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeR: Gain;\n\n\t/**\n\t * The frequency of the tremolo.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The depth of the effect. A depth of 0, has no effect\n\t * on the amplitude, and a depth of 1 makes the amplitude\n\t * modulate fully between 0 and 1.\n\t */\n\treadonly depth: Signal<\"normalRange\">;\n\n\t/**\n\t * @param frequency The rate of the effect.\n\t * @param depth The depth of the effect.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<TremoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._amplitudeL = new Gain({ context: this.context });\n\t\tthis._amplitudeR = new Gain({ context: this.context });\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.frequency,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.depth = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.depth,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.connectEffectLeft(this._amplitudeL);\n\t\tthis.connectEffectRight(this._amplitudeR);\n\t\tthis._lfoL.connect(this._amplitudeL.gain);\n\t\tthis._lfoR.connect(this._amplitudeR.gain);\n\t\tthis.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t\tthis.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): TremoloOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 10,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tdepth: 0.5,\n\t\t\tspread: 180,\n\t\t});\n\t}\n\n\t/**\n\t * Start the tremolo.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the tremolo.\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the effect to the transport.\n\t */\n\tsync(): this {\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase; // 180\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread / 2);\n\t\tthis._lfoR.phase = (spread / 2) + 90;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._amplitudeL.dispose();\n\t\tthis._amplitudeR.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}