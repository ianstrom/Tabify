{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeBiquadFilterNodes = new WeakMap();\n    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n      const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        const options = {\n          Q: nativeBiquadFilterNode.Q.value,\n          channelCount: nativeBiquadFilterNode.channelCount,\n          channelCountMode: nativeBiquadFilterNode.channelCountMode,\n          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n          detune: nativeBiquadFilterNode.detune.value,\n          frequency: nativeBiquadFilterNode.frequency.value,\n          gain: nativeBiquadFilterNode.gain.value,\n          type: nativeBiquadFilterNode.type\n        };\n        nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n      return nativeBiquadFilterNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createBiquadFilterNodeRendererFactory","connectAudioParam","createNativeBiquadFilterNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeBiquadFilterNodes","WeakMap","createBiquadFilterNode","proxy","nativeOfflineAudioContext","nativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","options","Q","value","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","set","render","renderedNativeBiquadFilterNode","get","undefined","Promise","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/biquad-filter-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IBiquadFilterNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TBiquadFilterNodeRendererFactoryFactory, TNativeBiquadFilterNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createBiquadFilterNodeRendererFactory: TBiquadFilterNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeBiquadFilterNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeBiquadFilterNodes = new WeakMap<TNativeOfflineAudioContext, TNativeBiquadFilterNode>();\n\n        const createBiquadFilterNode = async (proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode<T, TNativeBiquadFilterNode>(proxy);\n\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            return nativeBiquadFilterNode;\n        };\n\n        return {\n            render(proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeBiquadFilterNode> {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,MAAMC,qCAAqC,GAA4CA,CAC1FC,iBAAiB,EACjBC,4BAA4B,EAC5BC,kBAAkB,EAClBC,gBAAgB,EAChBC,uBAAuB,KACvB;EACA,OAAO,MAAmE;IACtE,MAAMC,+BAA+B,GAAG,IAAIC,OAAO,EAAuD;IAE1G,MAAMC,sBAAsB,GAAG,MAAAA,CAAOC,KAA2B,EAAEC,yBAAqD,KAAI;MACxH,IAAIC,sBAAsB,GAAGR,kBAAkB,CAA6BM,KAAK,CAAC;MAElF;;;;MAIA,MAAMG,sCAAsC,GAAGb,gBAAgB,CAACY,sBAAsB,EAAED,yBAAyB,CAAC;MAElH,IAAI,CAACE,sCAAsC,EAAE;QACzC,MAAMC,OAAO,GAAG;UACZC,CAAC,EAAEH,sBAAsB,CAACG,CAAC,CAACC,KAAK;UACjCC,YAAY,EAAEL,sBAAsB,CAACK,YAAY;UACjDC,gBAAgB,EAAEN,sBAAsB,CAACM,gBAAgB;UACzDC,qBAAqB,EAAEP,sBAAsB,CAACO,qBAAqB;UACnEC,MAAM,EAAER,sBAAsB,CAACQ,MAAM,CAACJ,KAAK;UAC3CK,SAAS,EAAET,sBAAsB,CAACS,SAAS,CAACL,KAAK;UACjDM,IAAI,EAAEV,sBAAsB,CAACU,IAAI,CAACN,KAAK;UACvCO,IAAI,EAAEX,sBAAsB,CAACW;SAChC;QAEDX,sBAAsB,GAAGT,4BAA4B,CAACQ,yBAAyB,EAAEG,OAAO,CAAC;;MAG7FP,+BAA+B,CAACiB,GAAG,CAACb,yBAAyB,EAAEC,sBAAsB,CAAC;MAEtF,IAAI,CAACC,sCAAsC,EAAE;QACzC,MAAMR,gBAAgB,CAACM,yBAAyB,EAAED,KAAK,CAACK,CAAC,EAAEH,sBAAsB,CAACG,CAAC,CAAC;QACpF,MAAMV,gBAAgB,CAACM,yBAAyB,EAAED,KAAK,CAACU,MAAM,EAAER,sBAAsB,CAACQ,MAAM,CAAC;QAC9F,MAAMf,gBAAgB,CAACM,yBAAyB,EAAED,KAAK,CAACW,SAAS,EAAET,sBAAsB,CAACS,SAAS,CAAC;QACpG,MAAMhB,gBAAgB,CAACM,yBAAyB,EAAED,KAAK,CAACY,IAAI,EAAEV,sBAAsB,CAACU,IAAI,CAAC;OAC7F,MAAM;QACH,MAAMpB,iBAAiB,CAACS,yBAAyB,EAAED,KAAK,CAACK,CAAC,EAAEH,sBAAsB,CAACG,CAAC,CAAC;QACrF,MAAMb,iBAAiB,CAACS,yBAAyB,EAAED,KAAK,CAACU,MAAM,EAAER,sBAAsB,CAACQ,MAAM,CAAC;QAC/F,MAAMlB,iBAAiB,CAACS,yBAAyB,EAAED,KAAK,CAACW,SAAS,EAAET,sBAAsB,CAACS,SAAS,CAAC;QACrG,MAAMnB,iBAAiB,CAACS,yBAAyB,EAAED,KAAK,CAACY,IAAI,EAAEV,sBAAsB,CAACU,IAAI,CAAC;;MAG/F,MAAMhB,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,sBAAsB,CAAC;MAEvF,OAAOA,sBAAsB;IACjC,CAAC;IAED,OAAO;MACHa,MAAMA,CAACf,KAA2B,EAAEC,yBAAqD;QACrF,MAAMe,8BAA8B,GAAGnB,+BAA+B,CAACoB,GAAG,CAAChB,yBAAyB,CAAC;QAErG,IAAIe,8BAA8B,KAAKE,SAAS,EAAE;UAC9C,OAAOC,OAAO,CAACC,OAAO,CAACJ,8BAA8B,CAAC;;QAG1D,OAAOjB,sBAAsB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACnE;KACH;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}