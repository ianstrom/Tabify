{"ast":null,"code":"import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n// @todo window is guaranteed to be defined because isSecureContext checks that as well.\nwindow) : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);","map":{"version":3,"names":["createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","createAbortError","createAddActiveInputConnectionToAudioNode","createAddAudioNodeConnections","createAddAudioParamConnections","createAddAudioWorkletModule","createAddConnectionToAudioNode","createAddPassiveInputConnectionToAudioNode","createAddSilentConnection","createAddUnrenderedAudioWorkletNode","createAnalyserNodeConstructor","createAnalyserNodeRendererFactory","createAudioBufferConstructor","createAudioBufferSourceNodeConstructor","createAudioBufferSourceNodeRendererFactory","createAudioContextConstructor","createAudioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createAudioListenerFactory","createAudioNodeConstructor","createAudioParamFactory","createAudioParamRenderer","createAudioWorkletNodeConstructor","createAudioWorkletNodeRendererFactory","createBaseAudioContextConstructor","createBiquadFilterNodeConstructor","createBiquadFilterNodeRendererFactory","createCacheTestResult","createChannelMergerNodeConstructor","createChannelMergerNodeRendererFactory","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createConnectAudioParam","createConnectMultipleOutputs","createConnectedNativeAudioBufferSourceNodeFactory","createConstantSourceNodeConstructor","createConstantSourceNodeRendererFactory","createConvertNumberToUnsignedLong","createConvolverNodeConstructor","createConvolverNodeRendererFactory","createCreateNativeOfflineAudioContext","createDataCloneError","createDecodeAudioData","createDecrementCycleCounter","createDelayNodeConstructor","createDelayNodeRendererFactory","createDeleteActiveInputConnectionToAudioNode","createDeleteUnrenderedAudioWorkletNode","createDetectCycles","createDisconnectMultipleOutputs","createDynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRendererFactory","createEncodingError","createEvaluateSource","createEventTargetConstructor","createExposeCurrentFrameAndCurrentTime","createFetchSource","createGainNodeConstructor","createGainNodeRendererFactory","createGetActiveAudioWorkletNodeInputs","createGetAudioNodeRenderer","createGetAudioNodeTailTime","createGetAudioParamRenderer","createGetBackupOfflineAudioContext","createGetNativeContext","createGetOrCreateBackupOfflineAudioContext","createGetUnrenderedAudioWorkletNodes","createIIRFilterNodeConstructor","createIIRFilterNodeRendererFactory","createIncrementCycleCounterFactory","createIndexSizeError","createInvalidAccessError","createInvalidStateError","createIsAnyAudioContext","createIsAnyAudioNode","createIsAnyAudioParam","createIsAnyOfflineAudioContext","createIsNativeAudioContext","createIsNativeAudioNode","createIsNativeAudioParam","createIsNativeContext","createIsNativeOfflineAudioContext","createIsSecureContext","createIsSupportedPromise","createMediaElementAudioSourceNodeConstructor","createMediaStreamAudioDestinationNodeConstructor","createMediaStreamAudioSourceNodeConstructor","createMediaStreamTrackAudioSourceNodeConstructor","createMinimalAudioContextConstructor","createMinimalBaseAudioContextConstructor","createMinimalOfflineAudioContextConstructor","createMonitorConnections","createNativeAnalyserNodeFactory","createNativeAudioBufferConstructor","createNativeAudioBufferSourceNodeFactory","createNativeAudioContextConstructor","createNativeAudioDestinationNodeFactory","createNativeAudioWorkletNodeConstructor","createNativeAudioWorkletNodeFactory","createNativeAudioWorkletNodeFakerFactory","createNativeBiquadFilterNode","createNativeChannelMergerNodeFactory","createNativeChannelSplitterNode","createNativeConstantSourceNodeFactory","createNativeConstantSourceNodeFakerFactory","createNativeConvolverNodeFactory","createNativeDelayNode","createNativeDynamicsCompressorNodeFactory","createNativeGainNode","createNativeIIRFilterNodeFactory","createNativeIIRFilterNodeFakerFactory","createNativeMediaElementAudioSourceNode","createNativeMediaStreamAudioDestinationNode","createNativeMediaStreamAudioSourceNode","createNativeMediaStreamTrackAudioSourceNodeFactory","createNativeOfflineAudioContextConstructor","createNativeOscillatorNodeFactory","createNativePannerNodeFactory","createNativePannerNodeFakerFactory","createNativePeriodicWaveFactory","createNativeScriptProcessorNode","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFakerFactory","createNativeWaveShaperNodeFactory","createNativeWaveShaperNodeFakerFactory","createNotSupportedError","createOfflineAudioContextConstructor","createOscillatorNodeConstructor","createOscillatorNodeRendererFactory","createPannerNodeConstructor","createPannerNodeRendererFactory","createPeriodicWaveConstructor","createRenderAutomation","createRenderInputsOfAudioNode","createRenderInputsOfAudioParam","createRenderNativeOfflineAudioContext","createSetActiveAudioWorkletNodeInputs","createSetAudioNodeTailTime","createStartRendering","createStereoPannerNodeConstructor","createStereoPannerNodeRendererFactory","createTestAudioBufferConstructorSupport","createTestAudioBufferCopyChannelMethodsSubarraySupport","createTestAudioContextCloseMethodSupport","createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","createTestAudioContextOptionsSupport","createTestAudioNodeConnectMethodSupport","createTestAudioWorkletProcessorNoOutputsSupport","createTestAudioWorkletProcessorPostMessageSupport","createTestChannelMergerNodeChannelCountSupport","createTestConstantSourceNodeAccurateSchedulingSupport","createTestConvolverNodeBufferReassignabilitySupport","createTestConvolverNodeChannelCountSupport","createTestIsSecureContextSupport","createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","createTestOfflineAudioContextCurrentTimeSupport","createTestStereoPannerNodeDefaultValueSupport","createUnknownError","createWaveShaperNodeConstructor","createWaveShaperNodeRendererFactory","createWindow","createWrapAudioBufferCopyChannelMethods","createWrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","createWrapChannelMergerNode","AUDIO_NODE_CONNECTIONS_STORE","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","CONTEXT_STORE","CYCLE_COUNTERS","connectNativeAudioNodeToNativeAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getAudioParamConnections","getEventListenersOfAudioNode","getFirstSample","getNativeAudioNode","getNativeAudioParam","getValueForKey","insertElementInSet","isActiveAudioNode","isDCCurve","isPartOfACycle","isPassiveAudioNode","overwriteAccessors","pickElementFromSet","sanitizeAudioWorkletNodeOptions","sanitizeChannelSplitterOptions","sanitizePeriodicWaveOptions","setValueAtTimeUntilPossible","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","testAudioWorkletNodeOptionsClonability","testDomExceptionConstructorSupport","testPromiseSupport","testTransferablesSupport","wrapAudioBufferSourceNodeStartMethodOffsetClamping","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","wrapEventListener","addActiveInputConnectionToAudioNode","addPassiveInputConnectionToAudioNode","deleteActiveInputConnectionToAudioNode","audioNodeTailTimeStore","WeakMap","getAudioNodeTailTime","cacheTestResult","Map","window","createNativeAnalyserNode","getAudioNodeRenderer","renderInputsOfAudioNode","createAnalyserNodeRenderer","getNativeContext","nativeOfflineAudioContextConstructor","isNativeOfflineAudioContext","audioParamAudioNodeStore","eventTargetConstructor","nativeAudioContextConstructor","isNativeAudioContext","isNativeAudioNode","isNativeAudioParam","nativeAudioWorkletNodeConstructor","audioNodeConstructor","analyserNodeConstructor","AnalyserNode","audioBufferStore","WeakSet","nativeAudioBufferConstructor","convertNumberToUnsignedLong","Uint32Array","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","audioBufferConstructor","AudioBuffer","addSilentConnection","renderInputsOfAudioParam","connectAudioParam","createNativeAudioBufferSourceNode","renderAutomation","createAudioBufferSourceNodeRenderer","createAudioParam","audioBufferSourceNodeConstructor","AudioBufferSourceNode","audioDestinationNodeConstructor","createBiquadFilterNodeRenderer","setAudioNodeTailTime","biquadFilterNodeConstructor","monitorConnections","wrapChannelMergerNode","createNativeChannelMergerNode","createChannelMergerNodeRenderer","channelMergerNodeConstructor","createChannelSplitterNodeRenderer","channelSplitterNodeConstructor","createNativeConstantSourceNodeFaker","createNativeConstantSourceNode","createConstantSourceNodeRenderer","constantSourceNodeConstructor","createNativeConvolverNode","createConvolverNodeRenderer","convolverNodeConstructor","createDelayNodeRenderer","delayNodeConstructor","createNativeDynamicsCompressorNode","createDynamicsCompressorNodeRenderer","dynamicsCompressorNodeConstructor","createGainNodeRenderer","gainNodeConstructor","createNativeIIRFilterNodeFaker","renderNativeOfflineAudioContext","createIIRFilterNodeRenderer","createNativeIIRFilterNode","iIRFilterNodeConstructor","createAudioListener","unrenderedAudioWorkletNodeStore","minimalBaseAudioContextConstructor","createNativeOscillatorNode","createOscillatorNodeRenderer","oscillatorNodeConstructor","createConnectedNativeAudioBufferSourceNode","createNativeWaveShaperNodeFaker","createNativeWaveShaperNode","createNativePannerNodeFaker","createNativePannerNode","createPannerNodeRenderer","pannerNodeConstructor","createNativePeriodicWave","periodicWaveConstructor","nativeStereoPannerNodeFakerFactory","createNativeStereoPannerNode","createStereoPannerNodeRenderer","stereoPannerNodeConstructor","createWaveShaperNodeRenderer","waveShaperNodeConstructor","isSecureContext","exposeCurrentFrameAndCurrentTime","backupOfflineAudioContextStore","getOrCreateBackupOfflineAudioContext","addAudioWorkletModule","undefined","isNativeContext","decodeAudioData","baseAudioContextConstructor","mediaElementAudioSourceNodeConstructor","mediaStreamAudioDestinationNodeConstructor","mediaStreamAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","mediaStreamTrackAudioSourceNodeConstructor","audioContextConstructor","AudioContext","getUnrenderedAudioWorkletNodes","addUnrenderedAudioWorkletNode","connectMultipleOutputs","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","activeAudioWorkletNodeInputsStore","getActiveAudioWorkletNodeInputs","createNativeAudioWorkletNodeFaker","createNativeAudioWorkletNode","createAudioWorkletNodeRenderer","getBackupOfflineAudioContext","setActiveAudioWorkletNodeInputs","audioWorkletNodeConstructor","AudioWorkletNode","BiquadFilterNode","ChannelMergerNode","ChannelSplitterNode","ConvolverNode","ConstantSourceNode","DelayNode","DynamicsCompressorNode","GainNode","IIRFilterNode","MediaElementAudioSourceNode","MediaStreamAudioDestinationNode","MediaStreamAudioSourceNode","MediaStreamTrackAudioSourceNode","minimalAudioContextConstructor","MinimalAudioContext","createNativeOfflineAudioContext","startRendering","minimalOfflineAudioContextConstructor","MinimalOfflineAudioContext","offlineAudioContextConstructor","OfflineAudioContext","OscillatorNode","PannerNode","PeriodicWave","StereoPannerNode","WaveShaperNode","isAnyAudioContext","isAnyAudioNode","isAnyAudioParam","isAnyOfflineAudioContext","isSupported"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/module.ts"],"sourcesContent":["import {\n    createCancelAndHoldAutomationEvent,\n    createCancelScheduledValuesAutomationEvent,\n    createExponentialRampToValueAutomationEvent,\n    createLinearRampToValueAutomationEvent,\n    createSetTargetAutomationEvent,\n    createSetValueAutomationEvent,\n    createSetValueCurveAutomationEvent\n} from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport {\n    AUDIO_NODE_CONNECTIONS_STORE,\n    AUDIO_NODE_STORE,\n    AUDIO_PARAM_CONNECTIONS_STORE,\n    AUDIO_PARAM_STORE,\n    CONTEXT_STORE,\n    CYCLE_COUNTERS\n} from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\nimport {\n    IAnalyserNode,\n    IAudioBuffer,\n    IAudioBufferSourceNode,\n    IAudioContext,\n    IAudioNode,\n    IAudioWorkletNode,\n    IBiquadFilterNode,\n    IConstantSourceNode,\n    IConvolverNode,\n    IDelayNode,\n    IDynamicsCompressorNode,\n    IGainNode,\n    IIIRFilterNode,\n    IMediaElementAudioSourceNode,\n    IMediaStreamAudioDestinationNode,\n    IMediaStreamAudioSourceNode,\n    IMediaStreamTrackAudioSourceNode,\n    IMinimalAudioContext,\n    IMinimalOfflineAudioContext,\n    IOfflineAudioContext,\n    IOfflineAudioContextConstructor,\n    IOscillatorNode,\n    IPannerNode,\n    IPeriodicWave,\n    IStereoPannerNode,\n    IWaveShaperNode\n} from './interfaces';\nimport {\n    TActiveAudioWorkletNodeInputsStore,\n    TAddAudioWorkletModuleFunction,\n    TAnalyserNodeConstructor,\n    TAudioBufferConstructor,\n    TAudioBufferSourceNodeConstructor,\n    TAudioBufferStore,\n    TAudioContextConstructor,\n    TAudioParamAudioNodeStore,\n    TAudioWorkletNodeConstructor,\n    TBackupOfflineAudioContextStore,\n    TBiquadFilterNodeConstructor,\n    TChannelMergerNodeConstructor,\n    TChannelSplitterNodeConstructor,\n    TConstantSourceNodeConstructor,\n    TContext,\n    TConvolverNodeConstructor,\n    TDecodeAudioDataFunction,\n    TDelayNodeConstructor,\n    TDynamicsCompressorNodeConstructor,\n    TGainNodeConstructor,\n    TIIRFilterNodeConstructor,\n    TMediaElementAudioSourceNodeConstructor,\n    TMediaStreamAudioDestinationNodeConstructor,\n    TMediaStreamAudioSourceNodeConstructor,\n    TMediaStreamTrackAudioSourceNodeConstructor,\n    TMinimalAudioContextConstructor,\n    TMinimalOfflineAudioContextConstructor,\n    TOscillatorNodeConstructor,\n    TPannerNodeConstructor,\n    TPeriodicWaveConstructor,\n    TStereoPannerNodeConstructor,\n    TUnrenderedAudioWorkletNodeStore,\n    TWaveShaperNodeConstructor\n} from './types';\n\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\n\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore: TAudioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst audioNodeConstructor = createAudioNodeConstructor(\n    createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE),\n    createAddConnectionToAudioNode(\n        addActiveInputConnectionToAudioNode,\n        addPassiveInputConnectionToAudioNode,\n        connectNativeAudioNodeToNativeAudioNode,\n        deleteActiveInputConnectionToAudioNode,\n        disconnectNativeAudioNodeFromNativeAudioNode,\n        getAudioNodeConnections,\n        getAudioNodeTailTime,\n        getEventListenersOfAudioNode,\n        getNativeAudioNode,\n        insertElementInSet,\n        isActiveAudioNode,\n        isPartOfACycle,\n        isPassiveAudioNode\n    ),\n    cacheTestResult,\n    createIncrementCycleCounterFactory(\n        CYCLE_COUNTERS,\n        disconnectNativeAudioNodeFromNativeAudioNode,\n        getAudioNodeConnections,\n        getNativeAudioNode,\n        getNativeAudioParam,\n        isActiveAudioNode\n    ),\n    createIndexSizeError,\n    createInvalidAccessError,\n    createNotSupportedError,\n    createDecrementCycleCounter(\n        connectNativeAudioNodeToNativeAudioNode,\n        CYCLE_COUNTERS,\n        getAudioNodeConnections,\n        getNativeAudioNode,\n        getNativeAudioParam,\n        getNativeContext,\n        isActiveAudioNode,\n        isNativeOfflineAudioContext\n    ),\n    createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey),\n    eventTargetConstructor,\n    getNativeContext,\n    isNativeAudioContext,\n    isNativeAudioNode,\n    isNativeAudioParam,\n    isNativeOfflineAudioContext,\n    nativeAudioWorkletNodeConstructor\n);\nconst analyserNodeConstructor: TAnalyserNodeConstructor = createAnalyserNodeConstructor(\n    audioNodeConstructor,\n    createAnalyserNodeRenderer,\n    createIndexSizeError,\n    createNativeAnalyserNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\n\ntype analyserNodeConstructor<T extends TContext> = IAnalyserNode<T>;\n\nexport { analyserNodeConstructor as AnalyserNode };\n\nconst audioBufferStore: TAudioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor: TAudioBufferConstructor = createAudioBufferConstructor(\n    audioBufferStore,\n    cacheTestResult,\n    createNotSupportedError,\n    nativeAudioBufferConstructor,\n    nativeOfflineAudioContextConstructor,\n    createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor),\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n);\n\ntype audioBufferConstructor = IAudioBuffer;\n\nexport { audioBufferConstructor as AudioBuffer };\n\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(\n    addSilentConnection,\n    cacheTestResult,\n    testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport,\n    testAudioBufferSourceNodeStartMethodOffsetClampingSupport,\n    testAudioBufferSourceNodeStopMethodNullifiedBufferSupport,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioBufferSourceNodeStartMethodOffsetClamping,\n    createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors),\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(\n    connectAudioParam,\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst createAudioParam = createAudioParamFactory(\n    createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE),\n    audioParamAudioNodeStore,\n    AUDIO_PARAM_STORE,\n    createAudioParamRenderer,\n    createCancelAndHoldAutomationEvent,\n    createCancelScheduledValuesAutomationEvent,\n    createExponentialRampToValueAutomationEvent,\n    createLinearRampToValueAutomationEvent,\n    createSetTargetAutomationEvent,\n    createSetValueAutomationEvent,\n    createSetValueCurveAutomationEvent,\n    nativeAudioContextConstructor,\n    setValueAtTimeUntilPossible\n);\nconst audioBufferSourceNodeConstructor: TAudioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(\n    audioNodeConstructor,\n    createAudioBufferSourceNodeRenderer,\n    createAudioParam,\n    createInvalidStateError,\n    createNativeAudioBufferSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n);\n\ntype audioBufferSourceNodeConstructor<T extends TContext> = IAudioBufferSourceNode<T>;\n\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\n\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(\n    audioNodeConstructor,\n    createAudioDestinationNodeRenderer,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors),\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    renderInputsOfAudioNode\n);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(\n    connectAudioParam,\n    createNativeBiquadFilterNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor: TBiquadFilterNodeConstructor = createBiquadFilterNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createBiquadFilterNodeRenderer,\n    createInvalidAccessError,\n    createNativeBiquadFilterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(\n    createNativeChannelMergerNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst channelMergerNodeConstructor: TChannelMergerNodeConstructor = createChannelMergerNodeConstructor(\n    audioNodeConstructor,\n    createChannelMergerNodeRenderer,\n    createNativeChannelMergerNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(\n    createNativeChannelSplitterNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst channelSplitterNodeConstructor: TChannelSplitterNodeConstructor = createChannelSplitterNodeConstructor(\n    audioNodeConstructor,\n    createChannelSplitterNodeRenderer,\n    createNativeChannelSplitterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    sanitizeChannelSplitterOptions\n);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(\n    addSilentConnection,\n    createNativeAudioBufferSourceNode,\n    createNativeGainNode,\n    monitorConnections\n);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(\n    addSilentConnection,\n    cacheTestResult,\n    createNativeConstantSourceNodeFaker,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport\n);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(\n    connectAudioParam,\n    createNativeConstantSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst constantSourceNodeConstructor: TConstantSourceNodeConstructor = createConstantSourceNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createConstantSourceNodeRenderer,\n    createNativeConstantSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(\n    createNativeConvolverNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst convolverNodeConstructor: TConvolverNodeConstructor = createConvolverNodeConstructor(\n    audioNodeConstructor,\n    createConvolverNodeRenderer,\n    createNativeConvolverNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(\n    connectAudioParam,\n    createNativeDelayNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst delayNodeConstructor: TDelayNodeConstructor = createDelayNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createDelayNodeRenderer,\n    createNativeDelayNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(\n    connectAudioParam,\n    createNativeDynamicsCompressorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst dynamicsCompressorNodeConstructor: TDynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createDynamicsCompressorNodeRenderer,\n    createNativeDynamicsCompressorNode,\n    createNotSupportedError,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createGainNodeRenderer = createGainNodeRendererFactory(\n    connectAudioParam,\n    createNativeGainNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst gainNodeConstructor: TGainNodeConstructor = createGainNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createGainNodeRenderer,\n    createNativeGainNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(\n    createInvalidAccessError,\n    createInvalidStateError,\n    createNativeScriptProcessorNode,\n    createNotSupportedError\n);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(\n    cacheTestResult,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor)\n);\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor: TIIRFilterNodeConstructor = createIIRFilterNodeConstructor(\n    audioNodeConstructor,\n    createNativeIIRFilterNode,\n    createIIRFilterNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createAudioListener = createAudioListenerFactory(\n    createAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    getFirstSample,\n    isNativeOfflineAudioContext,\n    overwriteAccessors\n);\nconst unrenderedAudioWorkletNodeStore: TUnrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(\n    audioDestinationNodeConstructor,\n    createAudioListener,\n    eventTargetConstructor,\n    isNativeOfflineAudioContext,\n    unrenderedAudioWorkletNodeStore,\n    wrapEventListener\n);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(\n    addSilentConnection,\n    cacheTestResult,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(\n    connectAudioParam,\n    createNativeOscillatorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst oscillatorNodeConstructor: TOscillatorNodeConstructor = createOscillatorNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeOscillatorNode,\n    createOscillatorNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(\n    createConnectedNativeAudioBufferSourceNode,\n    createInvalidStateError,\n    createNativeGainNode,\n    isDCCurve,\n    monitorConnections\n);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(\n    createConnectedNativeAudioBufferSourceNode,\n    createInvalidStateError,\n    createNativeWaveShaperNodeFaker,\n    isDCCurve,\n    monitorConnections,\n    nativeAudioContextConstructor,\n    overwriteAccessors\n);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(\n    connectNativeAudioNodeToNativeAudioNode,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getFirstSample,\n    monitorConnections\n);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(\n    connectAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativePannerNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n);\nconst pannerNodeConstructor: TPannerNodeConstructor = createPannerNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createNativePannerNode,\n    createPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor: TPeriodicWaveConstructor = createPeriodicWaveConstructor(\n    createNativePeriodicWave,\n    getNativeContext,\n    new WeakSet(),\n    sanitizePeriodicWaveOptions\n);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeGainNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    monitorConnections\n);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(\n    connectAudioParam,\n    createNativeStereoPannerNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst stereoPannerNodeConstructor: TStereoPannerNodeConstructor = createStereoPannerNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeStereoPannerNode,\n    createStereoPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(\n    createNativeWaveShaperNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst waveShaperNodeConstructor: TWaveShaperNodeConstructor = createWaveShaperNodeConstructor(\n    audioNodeConstructor,\n    createInvalidStateError,\n    createNativeWaveShaperNode,\n    createWaveShaperNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore: TBackupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(\n    backupOfflineAudioContextStore,\n    nativeOfflineAudioContextConstructor\n);\n\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule: undefined | TAddAudioWorkletModuleFunction = isSecureContext\n    ? createAddAudioWorkletModule(\n          cacheTestResult,\n          createNotSupportedError,\n          createEvaluateSource(window),\n          exposeCurrentFrameAndCurrentTime,\n          createFetchSource(createAbortError),\n          getNativeContext,\n          getOrCreateBackupOfflineAudioContext,\n          isNativeOfflineAudioContext,\n          nativeAudioWorkletNodeConstructor,\n          new WeakMap(),\n          new WeakMap(),\n          createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n          // @todo window is guaranteed to be defined because isSecureContext checks that as well.\n          <NonNullable<typeof window>>window\n      )\n    : undefined;\n\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\n\nexport const decodeAudioData: TDecodeAudioDataFunction = createDecodeAudioData(\n    audioBufferStore,\n    cacheTestResult,\n    createDataCloneError,\n    createEncodingError,\n    new WeakSet(),\n    getNativeContext,\n    isNativeContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    testPromiseSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n);\n\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(\n    addAudioWorkletModule,\n    analyserNodeConstructor,\n    audioBufferConstructor,\n    audioBufferSourceNodeConstructor,\n    biquadFilterNodeConstructor,\n    channelMergerNodeConstructor,\n    channelSplitterNodeConstructor,\n    constantSourceNodeConstructor,\n    convolverNodeConstructor,\n    decodeAudioData,\n    delayNodeConstructor,\n    dynamicsCompressorNodeConstructor,\n    gainNodeConstructor,\n    iIRFilterNodeConstructor,\n    minimalBaseAudioContextConstructor,\n    oscillatorNodeConstructor,\n    pannerNodeConstructor,\n    periodicWaveConstructor,\n    stereoPannerNodeConstructor,\n    waveShaperNodeConstructor\n);\nconst mediaElementAudioSourceNodeConstructor: TMediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(\n    audioNodeConstructor,\n    createNativeMediaElementAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst mediaStreamAudioDestinationNodeConstructor: TMediaStreamAudioDestinationNodeConstructor =\n    createMediaStreamAudioDestinationNodeConstructor(\n        audioNodeConstructor,\n        createNativeMediaStreamAudioDestinationNode,\n        getNativeContext,\n        isNativeOfflineAudioContext\n    );\nconst mediaStreamAudioSourceNodeConstructor: TMediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(\n    audioNodeConstructor,\n    createNativeMediaStreamAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(\n    createInvalidStateError,\n    isNativeOfflineAudioContext\n);\nconst mediaStreamTrackAudioSourceNodeConstructor: TMediaStreamTrackAudioSourceNodeConstructor =\n    createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor: TAudioContextConstructor = createAudioContextConstructor(\n    baseAudioContextConstructor,\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    mediaElementAudioSourceNodeConstructor,\n    mediaStreamAudioDestinationNodeConstructor,\n    mediaStreamAudioSourceNodeConstructor,\n    mediaStreamTrackAudioSourceNodeConstructor,\n    nativeAudioContextConstructor\n);\n\ntype audioContextConstructor = IAudioContext;\n\nexport { audioContextConstructor as AudioContext };\n\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore: TActiveAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(\n    connectMultipleOutputs,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getActiveAudioWorkletNodeInputs,\n    monitorConnections\n);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(\n    createInvalidStateError,\n    createNativeAudioWorkletNodeFaker,\n    createNativeGainNode,\n    createNotSupportedError,\n    monitorConnections\n);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(\n    connectAudioParam,\n    connectMultipleOutputs,\n    createNativeAudioBufferSourceNode,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    deleteUnrenderedAudioWorkletNode,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getNativeAudioNode,\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor: undefined | TAudioWorkletNodeConstructor = isSecureContext\n    ? createAudioWorkletNodeConstructor(\n          addUnrenderedAudioWorkletNode,\n          audioNodeConstructor,\n          createAudioParam,\n          createAudioWorkletNodeRenderer,\n          createNativeAudioWorkletNode,\n          getAudioNodeConnections,\n          getBackupOfflineAudioContext,\n          getNativeContext,\n          isNativeOfflineAudioContext,\n          nativeAudioWorkletNodeConstructor,\n          sanitizeAudioWorkletNodeOptions,\n          setActiveAudioWorkletNodeInputs,\n          testAudioWorkletNodeOptionsClonability,\n          wrapEventListener\n      )\n    : undefined;\n\ntype audioWorkletNodeConstructor<T extends TContext> = undefined | IAudioWorkletNode<T>;\n\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\n\ntype biquadFilterNodeConstructor<T extends TContext> = IBiquadFilterNode<T>;\n\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\n\ntype channelMergerNodeConstructor<T extends TContext> = IAudioNode<T>;\n\nexport { channelMergerNodeConstructor as ChannelMergerNode };\n\ntype channelSplitterNodeConstructor<T extends TContext> = IAudioNode<T>;\n\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\n\ntype constantSourceNodeConstructor<T extends TContext> = IConstantSourceNode<T>;\n\nexport { convolverNodeConstructor as ConvolverNode };\n\ntype convolverNodeConstructor<T extends TContext> = IConvolverNode<T>;\n\nexport { constantSourceNodeConstructor as ConstantSourceNode };\n\ntype delayNodeConstructor<T extends TContext> = IDelayNode<T>;\n\nexport { delayNodeConstructor as DelayNode };\n\ntype dynamicsCompressorNodeConstructor<T extends TContext> = IDynamicsCompressorNode<T>;\n\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\n\ntype gainNodeConstructor<T extends TContext> = IGainNode<T>;\n\nexport { gainNodeConstructor as GainNode };\n\ntype iIRFilterNodeConstructor<T extends TContext> = IIIRFilterNode<T>;\n\nexport { iIRFilterNodeConstructor as IIRFilterNode };\n\ntype mediaElementAudioSourceNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaElementAudioSourceNode<T>;\n\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\n\ntype mediaStreamAudioDestinationNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaStreamAudioDestinationNode<T>;\n\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\n\ntype mediaStreamAudioSourceNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaStreamAudioSourceNode<T>;\n\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\n\ntype mediaStreamTrackAudioSourceNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaStreamTrackAudioSourceNode<T>;\n\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\n\nconst minimalAudioContextConstructor: TMinimalAudioContextConstructor = createMinimalAudioContextConstructor(\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    minimalBaseAudioContextConstructor,\n    nativeAudioContextConstructor\n);\n\ntype minimalAudioContextConstructor = IMinimalAudioContext;\n\nexport { minimalAudioContextConstructor as MinimalAudioContext };\n\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(\n    createNotSupportedError,\n    nativeOfflineAudioContextConstructor\n);\nconst startRendering = createStartRendering(\n    audioBufferStore,\n    cacheTestResult,\n    getAudioNodeRenderer,\n    getUnrenderedAudioWorkletNodes,\n    renderNativeOfflineAudioContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n);\nconst minimalOfflineAudioContextConstructor: TMinimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    minimalBaseAudioContextConstructor,\n    startRendering\n);\n\ntype minimalOfflineAudioContextConstructor = IMinimalOfflineAudioContext;\n\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\n\nconst offlineAudioContextConstructor: IOfflineAudioContextConstructor = createOfflineAudioContextConstructor(\n    baseAudioContextConstructor,\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    startRendering\n);\n\ntype offlineAudioContextConstructor = IOfflineAudioContext;\n\nexport { offlineAudioContextConstructor as OfflineAudioContext };\n\ntype oscillatorNodeConstructor<T extends TContext> = IOscillatorNode<T>;\n\nexport { oscillatorNodeConstructor as OscillatorNode };\n\ntype pannerNodeConstructor<T extends TContext> = IPannerNode<T>;\n\nexport { pannerNodeConstructor as PannerNode };\n\ntype periodicWaveConstructor = IPeriodicWave;\n\nexport { periodicWaveConstructor as PeriodicWave };\n\ntype stereoPannerNodeConstructor<T extends TContext> = IStereoPannerNode<T>;\n\nexport { stereoPannerNodeConstructor as StereoPannerNode };\n\ntype waveShaperNodeConstructor<T extends TContext> = IWaveShaperNode<T>;\n\nexport { waveShaperNodeConstructor as WaveShaperNode };\n\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\n\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\n\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\n\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\n\nexport const isSupported = () =>\n    createIsSupportedPromise(\n        cacheTestResult,\n        createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor),\n        createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor),\n        createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor),\n        createTestAudioContextOptionsSupport(nativeAudioContextConstructor),\n        createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor),\n        createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n        createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor),\n        createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor),\n        createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor),\n        createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor),\n        testDomExceptionConstructorSupport,\n        createTestIsSecureContextSupport(window),\n        createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor),\n        createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor),\n        testTransferablesSupport\n    );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}