{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n    const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeOscillatorNode = getNativeAudioNode(proxy);\n      // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeOscillatorNode.channelCount,\n          channelCountMode: nativeOscillatorNode.channelCountMode,\n          channelInterpretation: nativeOscillatorNode.channelInterpretation,\n          detune: nativeOscillatorNode.detune.value,\n          frequency: nativeOscillatorNode.frequency.value,\n          periodicWave: periodicWave === null ? undefined : periodicWave,\n          type: nativeOscillatorNode.type\n        };\n        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n        if (start !== null) {\n          nativeOscillatorNode.start(start);\n        }\n        if (stop !== null) {\n          nativeOscillatorNode.stop(stop);\n        }\n      }\n      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n      return nativeOscillatorNode;\n    };\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n        return createOscillatorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createOscillatorNodeRendererFactory","connectAudioParam","createNativeOscillatorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeOscillatorNodes","WeakMap","periodicWave","start","stop","createOscillatorNode","proxy","nativeOfflineAudioContext","nativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","detune","value","frequency","undefined","type","set","render","renderedNativeOscillatorNode","get","Promise","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/oscillator-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IOscillatorNode, IPeriodicWave } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeOscillatorNode, TOscillatorNodeRendererFactoryFactory } from '../types';\n\nexport const createOscillatorNodeRendererFactory: TOscillatorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeOscillatorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeOscillatorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeOscillatorNode>();\n\n        let periodicWave: null | IPeriodicWave = null;\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createOscillatorNode = async (proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode<T, TNativeOscillatorNode>(proxy);\n\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n\n            return nativeOscillatorNode;\n        };\n\n        return {\n            set periodicWave(value: null | IPeriodicWave) {\n                periodicWave = value;\n            },\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeOscillatorNode> {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,MAAMC,mCAAmC,GAA0CA,CACtFC,iBAAiB,EACjBC,0BAA0B,EAC1BC,kBAAkB,EAClBC,gBAAgB,EAChBC,uBAAuB,KACvB;EACA,OAAO,MAAmE;IACtE,MAAMC,6BAA6B,GAAG,IAAIC,OAAO,EAAqD;IAEtG,IAAIC,YAAY,GAAyB,IAAI;IAC7C,IAAIC,KAAK,GAAkB,IAAI;IAC/B,IAAIC,IAAI,GAAkB,IAAI;IAE9B,MAAMC,oBAAoB,GAAG,MAAAA,CAAOC,KAAyB,EAAEC,yBAAqD,KAAI;MACpH,IAAIC,oBAAoB,GAAGX,kBAAkB,CAA2BS,KAAK,CAAC;MAE9E;MACA,MAAMG,oCAAoC,GAAGhB,gBAAgB,CAACe,oBAAoB,EAAED,yBAAyB,CAAC;MAE9G,IAAI,CAACE,oCAAoC,EAAE;QACvC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,oBAAoB,CAACG,YAAY;UAC/CC,gBAAgB,EAAEJ,oBAAoB,CAACI,gBAAgB;UACvDC,qBAAqB,EAAEL,oBAAoB,CAACK,qBAAqB;UACjEC,MAAM,EAAEN,oBAAoB,CAACM,MAAM,CAACC,KAAK;UACzCC,SAAS,EAAER,oBAAoB,CAACQ,SAAS,CAACD,KAAK;UAC/Cb,YAAY,EAAEA,YAAY,KAAK,IAAI,GAAGe,SAAS,GAAGf,YAAY;UAC9DgB,IAAI,EAAEV,oBAAoB,CAACU;SAC9B;QAEDV,oBAAoB,GAAGZ,0BAA0B,CAACW,yBAAyB,EAAEG,OAAO,CAAC;QAErF,IAAIP,KAAK,KAAK,IAAI,EAAE;UAChBK,oBAAoB,CAACL,KAAK,CAACA,KAAK,CAAC;;QAGrC,IAAIC,IAAI,KAAK,IAAI,EAAE;UACfI,oBAAoB,CAACJ,IAAI,CAACA,IAAI,CAAC;;;MAIvCJ,6BAA6B,CAACmB,GAAG,CAACZ,yBAAyB,EAAEC,oBAAoB,CAAC;MAElF,IAAI,CAACC,oCAAoC,EAAE;QACvC,MAAMX,gBAAgB,CAACS,yBAAyB,EAAED,KAAK,CAACQ,MAAM,EAAEN,oBAAoB,CAACM,MAAM,CAAC;QAC5F,MAAMhB,gBAAgB,CAACS,yBAAyB,EAAED,KAAK,CAACU,SAAS,EAAER,oBAAoB,CAACQ,SAAS,CAAC;OACrG,MAAM;QACH,MAAMrB,iBAAiB,CAACY,yBAAyB,EAAED,KAAK,CAACQ,MAAM,EAAEN,oBAAoB,CAACM,MAAM,CAAC;QAC7F,MAAMnB,iBAAiB,CAACY,yBAAyB,EAAED,KAAK,CAACU,SAAS,EAAER,oBAAoB,CAACQ,SAAS,CAAC;;MAGvG,MAAMjB,uBAAuB,CAACO,KAAK,EAAEC,yBAAyB,EAAEC,oBAAoB,CAAC;MAErF,OAAOA,oBAAoB;IAC/B,CAAC;IAED,OAAO;MACH,IAAIN,YAAYA,CAACa,KAA2B;QACxCb,YAAY,GAAGa,KAAK;MACxB,CAAC;MACD,IAAIZ,KAAKA,CAACY,KAAa;QACnBZ,KAAK,GAAGY,KAAK;MACjB,CAAC;MACD,IAAIX,IAAIA,CAACW,KAAa;QAClBX,IAAI,GAAGW,KAAK;MAChB,CAAC;MACDK,MAAMA,CAACd,KAAyB,EAAEC,yBAAqD;QACnF,MAAMc,4BAA4B,GAAGrB,6BAA6B,CAACsB,GAAG,CAACf,yBAAyB,CAAC;QAEjG,IAAIc,4BAA4B,KAAKJ,SAAS,EAAE;UAC5C,OAAOM,OAAO,CAACC,OAAO,CAACH,4BAA4B,CAAC;;QAGxD,OAAOhB,oBAAoB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACjE;KACH;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}