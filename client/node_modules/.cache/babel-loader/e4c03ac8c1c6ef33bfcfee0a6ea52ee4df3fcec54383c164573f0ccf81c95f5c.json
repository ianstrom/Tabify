{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections) => {\n  return (nativeContext, baseLatency, processorConstructor, options) => {\n    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n      throw createNotSupportedError();\n    }\n    const outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount);\n    // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n    if (outputChannelCount.some(channelCount => channelCount < 1)) {\n      throw createNotSupportedError();\n    }\n    if (outputChannelCount.length !== options.numberOfOutputs) {\n      throw createIndexSizeError();\n    }\n    // Bug #61: This is not part of the standard but required for the faker to work.\n    if (options.channelCountMode !== 'explicit') {\n      throw createNotSupportedError();\n    }\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n    // Bug #61: This is not part of the standard but required for the faker to work.\n    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n      throw createNotSupportedError();\n    }\n    const messageChannel = new MessageChannel();\n    const gainNodes = [];\n    const inputChannelSplitterNodes = [];\n    for (let i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes.push(createNativeGainNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: options.channelCountMode,\n        channelInterpretation: options.channelInterpretation,\n        gain: 1\n      }));\n      inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        numberOfOutputs: options.channelCount\n      }));\n    }\n    const constantSourceNodes = [];\n    if (processorConstructor.parameterDescriptors !== undefined) {\n      for (const {\n        defaultValue,\n        maxValue,\n        minValue,\n        name\n      } of processorConstructor.parameterDescriptors) {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue\n        });\n        Object.defineProperties(constantSourceNode.offset, {\n          defaultValue: {\n            get: () => defaultValue === undefined ? 0 : defaultValue\n          },\n          maxValue: {\n            get: () => maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n          },\n          minValue: {\n            get: () => minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n          }\n        });\n        constantSourceNodes.push(constantSourceNode);\n      }\n    }\n    const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n    });\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters,\n    // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    Math.max(1, numberOfOutputChannels));\n    const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: Math.max(1, numberOfOutputChannels),\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: Math.max(1, numberOfOutputChannels)\n    });\n    const outputChannelMergerNodes = [];\n    for (let i = 0; i < options.numberOfOutputs; i += 1) {\n      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: outputChannelCount[i]\n      }));\n    }\n    for (let i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes[i].connect(inputChannelSplitterNodes[i]);\n      for (let j = 0; j < options.channelCount; j += 1) {\n        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n      }\n    }\n    const parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map((_ref, index) => {\n      let {\n        name\n      } = _ref;\n      const constantSourceNode = constantSourceNodes[index];\n      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n      constantSourceNode.start(0);\n      return [name, constantSourceNode.offset];\n    }));\n    inputChannelMergerNode.connect(scriptProcessorNode);\n    let channelInterpretation = options.channelInterpretation;\n    let onprocessorerror = null;\n    // Bug #87: Expose at least one output to make this node connectable.\n    const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n    const nativeAudioWorkletNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n      get channelCount() {\n        return options.channelCount;\n      },\n      set channelCount(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n      get channelCountMode() {\n        return options.channelCountMode;\n      },\n      set channelCountMode(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n      get channelInterpretation() {\n        return channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        for (const gainNode of gainNodes) {\n          gainNode.channelInterpretation = value;\n        }\n        channelInterpretation = value;\n      },\n      get context() {\n        return scriptProcessorNode.context;\n      },\n      get inputs() {\n        return gainNodes;\n      },\n      get numberOfInputs() {\n        return options.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return options.numberOfOutputs;\n      },\n      get onprocessorerror() {\n        return onprocessorerror;\n      },\n      set onprocessorerror(value) {\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n        }\n        onprocessorerror = typeof value === 'function' ? value : null;\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n        }\n      },\n      get parameters() {\n        return parameterMap;\n      },\n      get port() {\n        return messageChannel.port2;\n      },\n      addEventListener() {\n        return scriptProcessorNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n      disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n      dispatchEvent() {\n        return scriptProcessorNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener() {\n        return scriptProcessorNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    const patchedEventListeners = new Map();\n    messageChannel.port1.addEventListener = (addEventListener => {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        if (args[0] === 'message') {\n          const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n          if (unpatchedEventListener !== null) {\n            const patchedEventListener = patchedEventListeners.get(args[1]);\n            if (patchedEventListener !== undefined) {\n              args[1] = patchedEventListener;\n            } else {\n              args[1] = event => {\n                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));\n              };\n              patchedEventListeners.set(unpatchedEventListener, args[1]);\n            }\n          }\n        }\n        return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    })(messageChannel.port1.addEventListener);\n    messageChannel.port1.removeEventListener = (removeEventListener => {\n      return function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        if (args[0] === 'message') {\n          const patchedEventListener = patchedEventListeners.get(args[1]);\n          if (patchedEventListener !== undefined) {\n            patchedEventListeners.delete(args[1]);\n            args[1] = patchedEventListener;\n          }\n        }\n        return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    })(messageChannel.port1.removeEventListener);\n    let onmessage = null;\n    Object.defineProperty(messageChannel.port1, 'onmessage', {\n      get: () => onmessage,\n      set: value => {\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.removeEventListener('message', onmessage);\n        }\n        onmessage = typeof value === 'function' ? value : null;\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.addEventListener('message', onmessage);\n          messageChannel.port1.start();\n        }\n      }\n    });\n    processorConstructor.prototype.port = messageChannel.port1;\n    let audioWorkletProcessor = null;\n    const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n    audioWorkletProcessorPromise.then(dWrkltPrcssr => audioWorkletProcessor = dWrkltPrcssr);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n    const parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce((prmtrs, _ref2) => {\n      let {\n        name\n      } = _ref2;\n      return {\n        ...prmtrs,\n        [name]: new Float32Array(128)\n      };\n    }, {});\n    let isActive = true;\n    const disconnectOutputsGraph = () => {\n      if (options.numberOfOutputs > 0) {\n        scriptProcessorNode.disconnect(outputChannelSplitterNode);\n      }\n      for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n        const outputChannelMergerNode = outputChannelMergerNodes[i];\n        for (let j = 0; j < outputChannelCount[i]; j += 1) {\n          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n        }\n        outputChannelSplitterNodeOutput += outputChannelCount[i];\n      }\n    };\n    const activeInputIndexes = new Map();\n    // tslint:disable-next-line:deprecation\n    scriptProcessorNode.onaudioprocess = _ref3 => {\n      let {\n        inputBuffer,\n        outputBuffer\n      } = _ref3;\n      if (audioWorkletProcessor !== null) {\n        const activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n        for (let i = 0; i < bufferSize; i += 128) {\n          for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.channelCount; k += 1) {\n              copyFromChannel(inputBuffer, inputs[j], k, k, i);\n            }\n          }\n          if (processorConstructor.parameterDescriptors !== undefined) {\n            processorConstructor.parameterDescriptors.forEach((_ref4, index) => {\n              let {\n                name\n              } = _ref4;\n              copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n          }\n          for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n              // The byteLength will be 0 when the ArrayBuffer was transferred.\n              if (outputs[j][k].byteLength === 0) {\n                outputs[j][k] = new Float32Array(128);\n              }\n            }\n          }\n          try {\n            const potentiallyEmptyInputs = inputs.map((input, index) => {\n              const activeInput = activeInputs[index];\n              if (activeInput.size > 0) {\n                activeInputIndexes.set(index, bufferSize / 128);\n                return input;\n              }\n              const count = activeInputIndexes.get(index);\n              if (count === undefined) {\n                return [];\n              }\n              if (input.every(channelData => channelData.every(sample => sample === 0))) {\n                if (count === 1) {\n                  activeInputIndexes.delete(index);\n                } else {\n                  activeInputIndexes.set(index, count - 1);\n                }\n              }\n              return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + i / nativeContext.sampleRate, nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n            isActive = activeSourceFlag;\n            for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n              for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n              }\n              outputChannelSplitterNodeOutput += outputChannelCount[j];\n            }\n          } catch (error) {\n            isActive = false;\n            nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {\n              colno: error.colno,\n              filename: error.filename,\n              lineno: error.lineno,\n              message: error.message\n            }));\n          }\n          if (!isActive) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n              gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n              for (let k = 0; k < options.channelCount; k += 1) {\n                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);\n              }\n            }\n            if (processorConstructor.parameterDescriptors !== undefined) {\n              const length = processorConstructor.parameterDescriptors.length;\n              for (let j = 0; j < length; j += 1) {\n                const constantSourceNode = constantSourceNodes[j];\n                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                constantSourceNode.stop();\n              }\n            }\n            inputChannelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n            if (isConnected) {\n              disconnectOutputsGraph();\n            } else {\n              disconnectFakeGraph();\n            }\n            break;\n          }\n        }\n      }\n    };\n    let isConnected = false;\n    // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    const nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n    const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n    const disconnectFakeGraph = () => {\n      scriptProcessorNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n    const whenConnected = () => {\n      if (isActive) {\n        disconnectFakeGraph();\n        if (options.numberOfOutputs > 0) {\n          scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n          const outputChannelMergerNode = outputChannelMergerNodes[i];\n          for (let j = 0; j < outputChannelCount[i]; j += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n          }\n          outputChannelSplitterNodeOutput += outputChannelCount[i];\n        }\n      }\n      isConnected = true;\n    };\n    const whenDisconnected = () => {\n      if (isActive) {\n        connectFakeGraph();\n        disconnectOutputsGraph();\n      }\n      isConnected = false;\n    };\n    connectFakeGraph();\n    return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","computeBufferSize","copyFromChannel","copyToChannel","createAudioWorkletProcessor","createNestedArrays","ReadOnlyMap","createNativeAudioWorkletNodeFakerFactory","connectMultipleOutputs","createIndexSizeError","createInvalidStateError","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeConstantSourceNode","createNativeGainNode","createNativeScriptProcessorNode","createNotSupportedError","disconnectMultipleOutputs","exposeCurrentFrameAndCurrentTime","getActiveAudioWorkletNodeInputs","monitorConnections","nativeContext","baseLatency","processorConstructor","options","numberOfInputs","numberOfOutputs","outputChannelCount","Array","isArray","from","some","channelCount","length","channelCountMode","numberOfInputChannels","numberOfOutputChannels","reduce","sum","value","numberOfParameters","parameterDescriptors","undefined","messageChannel","MessageChannel","gainNodes","inputChannelSplitterNodes","i","push","channelInterpretation","gain","constantSourceNodes","defaultValue","maxValue","minValue","name","constantSourceNode","offset","parameterData","Object","defineProperties","get","inputChannelMergerNode","Math","max","bufferSize","sampleRate","scriptProcessorNode","outputChannelSplitterNode","outputChannelMergerNodes","connect","j","parameterMap","map","_ref","index","start","onprocessorerror","outputAudioNodes","nativeAudioWorkletNodeFaker","_","gainNode","context","inputs","removeEventListener","addEventListener","parameters","port","port2","arguments","bind","disconnect","dispatchEvent","patchedEventListeners","Map","port1","_len","args","_key","unpatchedEventListener","handleEvent","patchedEventListener","event","currentTime","set","call","_len2","_key2","delete","onmessage","defineProperty","prototype","audioWorkletProcessor","audioWorkletProcessorPromise","then","dWrkltPrcssr","outputs","prmtrs","_ref2","Float32Array","isActive","disconnectOutputsGraph","outputChannelSplitterNodeOutput","outputChannelMergerNode","activeInputIndexes","onaudioprocess","_ref3","inputBuffer","outputBuffer","activeInputs","k","forEach","_ref4","byteLength","potentiallyEmptyInputs","input","activeInput","size","count","every","channelData","sample","activeSourceFlag","process","error","ErrorEvent","colno","filename","lineno","message","stop","isConnected","disconnectFakeGraph","nativeGainNode","connectFakeGraph","destination","whenConnected","whenDisconnected"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/native-audio-worklet-node-faker-factory.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { IAudioWorkletProcessor } from '../interfaces';\nimport { ReadOnlyMap } from '../read-only-map';\nimport {\n    TNativeAudioNode,\n    TNativeAudioParam,\n    TNativeAudioWorkletNode,\n    TNativeAudioWorkletNodeFakerFactoryFactory,\n    TNativeChannelMergerNode,\n    TNativeChannelSplitterNode,\n    TNativeConstantSourceNode,\n    TNativeGainNode\n} from '../types';\n\nexport const createNativeAudioWorkletNodeFakerFactory: TNativeAudioWorkletNodeFakerFactoryFactory = (\n    connectMultipleOutputs,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getActiveAudioWorkletNodeInputs,\n    monitorConnections\n) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n\n        const outputChannelCount = Array.isArray(options.outputChannelCount)\n            ? options.outputChannelCount\n            : Array.from(options.outputChannelCount);\n\n        // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n        if (outputChannelCount.some((channelCount) => channelCount < 1)) {\n            throw createNotSupportedError();\n        }\n\n        if (outputChannelCount.length !== options.numberOfOutputs) {\n            throw createIndexSizeError();\n        }\n\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters =\n            processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n\n        const messageChannel = new MessageChannel();\n        const gainNodes: TNativeGainNode[] = [];\n        const inputChannelSplitterNodes: TNativeChannelSplitterNode[] = [];\n\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(\n                createNativeGainNode(nativeContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                })\n            );\n            inputChannelSplitterNodes.push(\n                createNativeChannelSplitterNode(nativeContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: options.channelCount\n                })\n            );\n        }\n\n        const constantSourceNodes: TNativeConstantSourceNode[] = [];\n\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset:\n                        options.parameterData[name] !== undefined\n                            ? options.parameterData[name]\n                            : defaultValue === undefined\n                            ? 0\n                            : defaultValue\n                });\n\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined ? 0 : defaultValue)\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue)\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue)\n                    }\n                });\n\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(\n            nativeContext,\n            bufferSize,\n            numberOfInputChannels + numberOfParameters,\n            // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n            Math.max(1, numberOfOutputChannels)\n        );\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes: TNativeChannelMergerNode[] = [];\n\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(\n                createNativeChannelMergerNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'speakers',\n                    numberOfInputs: outputChannelCount[i]\n                })\n            );\n        }\n\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n            }\n        }\n\n        const parameterMap = new ReadOnlyMap(\n            processorConstructor.parameterDescriptors === undefined\n                ? []\n                : processorConstructor.parameterDescriptors.map(({ name }, index) => {\n                      const constantSourceNode = constantSourceNodes[index];\n\n                      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                      constantSourceNode.start(0);\n\n                      return <[string, TNativeAudioParam]>[name, constantSourceNode.offset];\n                  })\n        );\n\n        inputChannelMergerNode.connect(scriptProcessorNode);\n\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror: TNativeAudioWorkletNode['onprocessorerror'] = null;\n\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize(): number {\n                return bufferSize;\n            },\n            get channelCount(): number {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode(): TNativeAudioWorkletNode['channelCountMode'] {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation(): TNativeAudioWorkletNode['channelInterpretation'] {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n\n                channelInterpretation = value;\n            },\n            get context(): TNativeAudioWorkletNode['context'] {\n                return scriptProcessorNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return gainNodes;\n            },\n            get numberOfInputs(): number {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror(): TNativeAudioWorkletNode['onprocessorerror'] {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n\n                onprocessorerror = typeof value === 'function' ? value : null;\n\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters(): TNativeAudioWorkletNode['parameters'] {\n                return parameterMap;\n            },\n            get port(): TNativeAudioWorkletNode['port'] {\n                return messageChannel.port2;\n            },\n            addEventListener(...args: any[]): void {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: <TNativeAudioNode['connect']>connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: <TNativeAudioNode['disconnect']>disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args: any[]): boolean {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        const patchedEventListeners: Map<EventListenerOrEventListenerObject, NonNullable<MessagePort['onmessage']>> = new Map();\n\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args: [string, EventListenerOrEventListenerObject, (boolean | AddEventListenerOptions)?]): void => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener =\n                        typeof args[1] === 'function'\n                            ? args[1]\n                            : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'\n                            ? args[1].handleEvent\n                            : null;\n\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                        if (patchedEventListener !== undefined) {\n                            args[1] = <EventListenerOrEventListenerObject>patchedEventListener;\n                        } else {\n                            args[1] = (event: Event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () =>\n                                    unpatchedEventListener(event)\n                                );\n                            };\n\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args: any[]): void => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n\n                        args[1] = patchedEventListener;\n                    }\n                }\n\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n\n        let onmessage: MessagePort['onmessage'] = null;\n\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n\n                onmessage = typeof value === 'function' ? value : null;\n\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n\n        processorConstructor.prototype.port = messageChannel.port1;\n\n        let audioWorkletProcessor: null | IAudioWorkletProcessor = null;\n\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(\n            nativeContext,\n            nativeAudioWorkletNodeFaker,\n            processorConstructor,\n            options\n        );\n\n        audioWorkletProcessorPromise.then((dWrkltPrcssr) => (audioWorkletProcessor = dWrkltPrcssr));\n\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n        const parameters: { [name: string]: Float32Array } =\n            processorConstructor.parameterDescriptors === undefined\n                ? []\n                : processorConstructor.parameterDescriptors.reduce(\n                      (prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }),\n                      {}\n                  );\n\n        let isActive = true;\n\n        const disconnectOutputsGraph = () => {\n            if (options.numberOfOutputs > 0) {\n                scriptProcessorNode.disconnect(outputChannelSplitterNode);\n            }\n\n            for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n                for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                    outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                }\n\n                outputChannelSplitterNodeOutput += outputChannelCount[i];\n            }\n        };\n\n        const activeInputIndexes = new Map<number, number>();\n\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }: AudioProcessingEvent) => {\n            if (audioWorkletProcessor !== null) {\n                const activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n\n                    try {\n                        const potentiallyEmptyInputs = inputs.map((input, index) => {\n                            const activeInput = activeInputs[index];\n\n                            if (activeInput.size > 0) {\n                                activeInputIndexes.set(index, bufferSize / 128);\n\n                                return input;\n                            }\n\n                            const count = activeInputIndexes.get(index);\n\n                            if (count === undefined) {\n                                return [];\n                            }\n\n                            if (input.every((channelData) => channelData.every((sample) => sample === 0))) {\n                                if (count === 1) {\n                                    activeInputIndexes.delete(index);\n                                } else {\n                                    activeInputIndexes.set(index, count - 1);\n                                }\n                            }\n\n                            return input;\n                        });\n\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(\n                            nativeContext.currentTime + i / nativeContext.sampleRate,\n                            nativeContext.sampleRate,\n                            () => (<IAudioWorkletProcessor>audioWorkletProcessor).process(potentiallyEmptyInputs, outputs, parameters)\n                        );\n\n                        isActive = activeSourceFlag;\n\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n\n                            outputChannelSplitterNodeOutput += outputChannelCount[j];\n                        }\n                    } catch (error) {\n                        isActive = false;\n\n                        nativeAudioWorkletNodeFaker.dispatchEvent(\n                            new ErrorEvent('processorerror', {\n                                colno: error.colno,\n                                filename: error.filename,\n                                lineno: error.lineno,\n                                message: error.message\n                            })\n                        );\n                    }\n\n                    if (!isActive) {\n                        for (let j = 0; j < options.numberOfInputs; j += 1) {\n                            gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n\n                            for (let k = 0; k < options.channelCount; k += 1) {\n                                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);\n                            }\n                        }\n\n                        if (processorConstructor.parameterDescriptors !== undefined) {\n                            const length = processorConstructor.parameterDescriptors.length;\n\n                            for (let j = 0; j < length; j += 1) {\n                                const constantSourceNode = constantSourceNodes[j];\n\n                                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                                constantSourceNode.stop();\n                            }\n                        }\n\n                        inputChannelMergerNode.disconnect(scriptProcessorNode);\n\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n                        if (isConnected) {\n                            disconnectOutputsGraph();\n                        } else {\n                            disconnectFakeGraph();\n                        }\n\n                        break;\n                    }\n                }\n            }\n        };\n\n        let isConnected = false;\n\n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n\n        const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n        const disconnectFakeGraph = () => {\n            scriptProcessorNode.disconnect(nativeGainNode);\n            nativeGainNode.disconnect();\n        };\n        const whenConnected = () => {\n            if (isActive) {\n                disconnectFakeGraph();\n\n                if (options.numberOfOutputs > 0) {\n                    scriptProcessorNode.connect(outputChannelSplitterNode);\n                }\n\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n                    for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[i];\n                }\n            }\n\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            if (isActive) {\n                connectFakeGraph();\n                disconnectOutputsGraph();\n            }\n\n            isConnected = false;\n        };\n\n        connectFakeGraph();\n\n        return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}