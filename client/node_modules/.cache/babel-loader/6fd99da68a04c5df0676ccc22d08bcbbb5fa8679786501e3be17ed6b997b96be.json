{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\nexport class EQ3 extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n    this.name = \"EQ3\";\n    /**\n     * the output\n     */\n    this.output = new Gain({\n      context: this.context\n    });\n    this._internalChannels = [];\n    const options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    this.input = this._multibandSplit = new MultibandSplit({\n      context: this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    this._lowGain = new Gain({\n      context: this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    this._midGain = new Gain({\n      context: this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    this._highGain = new Gain({\n      context: this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    this.low = this._lowGain.gain;\n    this.mid = this._midGain.gain;\n    this.high = this._highGain.gain;\n    this.Q = this._multibandSplit.Q;\n    this.lowFrequency = this._multibandSplit.lowFrequency;\n    this.highFrequency = this._multibandSplit.highFrequency;\n    // the frequency bands\n    this._multibandSplit.low.chain(this._lowGain, this.output);\n    this._multibandSplit.mid.chain(this._midGain, this.output);\n    this._multibandSplit.high.chain(this._highGain, this.output);\n    readOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    this._internalChannels = [this._multibandSplit];\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      high: 0,\n      highFrequency: 2500,\n      low: 0,\n      lowFrequency: 400,\n      mid: 0\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    this._multibandSplit.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this._lowGain.dispose();\n    this._midGain.dispose();\n    this._highGain.dispose();\n    this.low.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.Q.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","MultibandSplit","EQ3","constructor","getDefaults","arguments","name","output","context","_internalChannels","options","input","_multibandSplit","highFrequency","lowFrequency","_lowGain","gain","low","units","_midGain","mid","_highGain","high","Q","chain","Object","assign","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/component/filter/EQ3.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High. \n * @category Component\n */\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\n\treadonly name: string = \"EQ3\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t * the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * Splits the input into three outputs\n\t */\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t * The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the high signals\n\t */\n\tprivate _highGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<\"decibels\">;\n\n\t/**\n\t * The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh: 0,\n\t\t\thighFrequency: 2500,\n\t\t\tlow: 0,\n\t\t\tlowFrequency: 400,\n\t\t\tmid: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}