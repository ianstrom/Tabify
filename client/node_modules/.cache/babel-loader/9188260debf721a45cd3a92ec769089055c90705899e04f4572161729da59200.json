{"ast":null,"code":"import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext = dummyContext;\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext() {\n  if (globalContext === dummyContext && hasAudioContext) {\n    setContext(new Context());\n  }\n  return globalContext;\n}\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context) {\n  if (isAudioContext(context)) {\n    globalContext = new Context(context);\n  } else if (isOfflineAudioContext(context)) {\n    globalContext = new OfflineContext(context);\n  } else {\n    globalContext = context;\n  }\n}\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start() {\n  return globalContext.resume();\n}\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n  let prefix = \"v\";\n  if (version === \"dev\") {\n    prefix = \"\";\n  }\n  const printString = ` * Tone.js ${prefix}${version} * `;\n  // eslint-disable-next-line no-console\n  console.log(`%c${printString}`, \"background: #000; color: #fff\");\n}","map":{"version":3,"names":["version","hasAudioContext","theWindow","Context","DummyContext","OfflineContext","isAudioContext","isOfflineAudioContext","dummyContext","globalContext","getContext","setContext","context","start","resume","TONE_SILENCE_LOGGING","prefix","printString","console","log"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/core/Global.ts"],"sourcesContent":["import { version } from \"../version\";\nimport { AnyAudioContext, hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { BaseContext } from \"./context/BaseContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseContext = dummyContext;\n\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext(): BaseContext {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context: BaseContext | AnyAudioContext): void {\n\tif (isAudioContext(context)) {\n\t\tglobalContext = new Context(context);\n\t} else if (isOfflineAudioContext(context)) {\n\t\tglobalContext = new OfflineContext(context);\n\t} else {\n\t\tglobalContext = context;\n\t}\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start(): Promise<void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// eslint-disable-next-line no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAA0BC,eAAe,EAAEC,SAAS,QAAQ,wBAAwB;AACpF,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,YAAY,QAAQ,wBAAwB;AAErD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,cAAc,EAAEC,qBAAqB,QAAQ,0BAA0B;AAEhF;;;AAGA,MAAMC,YAAY,GAAG,IAAIJ,YAAY,EAAE;AAEvC;;;;AAIA,IAAIK,aAAa,GAAgBD,YAAY;AAE7C;;;;AAIA,OAAM,SAAUE,UAAUA,CAAA;EACzB,IAAID,aAAa,KAAKD,YAAY,IAAIP,eAAe,EAAE;IACtDU,UAAU,CAAC,IAAIR,OAAO,EAAE,CAAC;;EAE1B,OAAOM,aAAa;AACrB;AAEA;;;;AAIA,OAAM,SAAUE,UAAUA,CAACC,OAAsC;EAChE,IAAIN,cAAc,CAACM,OAAO,CAAC,EAAE;IAC5BH,aAAa,GAAG,IAAIN,OAAO,CAACS,OAAO,CAAC;GACpC,MAAM,IAAIL,qBAAqB,CAACK,OAAO,CAAC,EAAE;IAC1CH,aAAa,GAAG,IAAIJ,cAAc,CAACO,OAAO,CAAC;GAC3C,MAAM;IACNH,aAAa,GAAGG,OAAO;;AAEzB;AAEA;;;;;;;;;;;;;AAaA,OAAM,SAAUC,KAAKA,CAAA;EACpB,OAAOJ,aAAa,CAACK,MAAM,EAAE;AAC9B;AAEA;;;AAGA,IAAIZ,SAAS,IAAI,CAACA,SAAS,CAACa,oBAAoB,EAAE;EACjD,IAAIC,MAAM,GAAG,GAAG;EAChB,IAAIhB,OAAO,KAAK,KAAK,EAAE;IACtBgB,MAAM,GAAG,EAAE;;EAEZ,MAAMC,WAAW,GAAG,cAAcD,MAAM,GAAGhB,OAAO,KAAK;EACvD;EACAkB,OAAO,CAACC,GAAG,CAAC,KAAKF,WAAW,EAAE,EAAE,+BAA+B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}