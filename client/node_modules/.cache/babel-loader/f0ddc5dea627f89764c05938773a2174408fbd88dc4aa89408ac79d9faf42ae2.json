{"ast":null,"code":"export const createConnectedNativeAudioBufferSourceNodeFactory = createNativeAudioBufferSourceNode => {\n  return (nativeContext, nativeAudioNode) => {\n    const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n      buffer: null,\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      playbackRate: 1\n    });\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    nativeAudioBufferSourceNode.loop = true;\n    nativeAudioBufferSourceNode.connect(nativeAudioNode);\n    nativeAudioBufferSourceNode.start();\n    return () => {\n      nativeAudioBufferSourceNode.stop();\n      nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n    };\n  };\n};","map":{"version":3,"names":["createConnectedNativeAudioBufferSourceNodeFactory","createNativeAudioBufferSourceNode","nativeContext","nativeAudioNode","nativeAudioBufferSourceNode","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","nativeAudioBuffer","createBuffer","connect","start","stop","disconnect"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/connected-native-audio-buffer-source-node-factory.ts"],"sourcesContent":["import { TConnectedNativeAudioBufferSourceNodeFactoryFactory } from '../types';\n\nexport const createConnectedNativeAudioBufferSourceNodeFactory: TConnectedNativeAudioBufferSourceNodeFactoryFactory = (\n    createNativeAudioBufferSourceNode\n) => {\n    return (nativeContext, nativeAudioNode) => {\n        const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n            buffer: null,\n            channelCount: 2,\n            channelCountMode: 'max',\n            channelInterpretation: 'speakers',\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            playbackRate: 1\n        });\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);\n\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.loop = true;\n\n        nativeAudioBufferSourceNode.connect(nativeAudioNode);\n        nativeAudioBufferSourceNode.start();\n\n        return () => {\n            nativeAudioBufferSourceNode.stop();\n            nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n        };\n    };\n};\n"],"mappings":"AAEA,OAAO,MAAMA,iDAAiD,GAC1DC,iCAAiC,IACjC;EACA,OAAO,CAACC,aAAa,EAAEC,eAAe,KAAI;IACtC,MAAMC,2BAA2B,GAAGH,iCAAiC,CAACC,aAAa,EAAE;MACjFG,MAAM,EAAE,IAAI;MACZC,YAAY,EAAE,CAAC;MACfC,gBAAgB,EAAE,KAAK;MACvBC,qBAAqB,EAAE,UAAU;MACjCC,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE,CAAC;MACVC,SAAS,EAAE,CAAC;MACZC,YAAY,EAAE;KACjB,CAAC;IACF,MAAMC,iBAAiB,GAAGX,aAAa,CAACY,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;IAEjEV,2BAA2B,CAACC,MAAM,GAAGQ,iBAAiB;IACtDT,2BAA2B,CAACK,IAAI,GAAG,IAAI;IAEvCL,2BAA2B,CAACW,OAAO,CAACZ,eAAe,CAAC;IACpDC,2BAA2B,CAACY,KAAK,EAAE;IAEnC,OAAO,MAAK;MACRZ,2BAA2B,CAACa,IAAI,EAAE;MAClCb,2BAA2B,CAACc,UAAU,CAACf,eAAe,CAAC;IAC3D,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}