{"ast":null,"code":"import { deletePassiveInputConnectionToAudioNode } from '../helpers/delete-passive-input-connection-to-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nexport const createAddConnectionToAudioNode = (addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode) => {\n  const tailTimeTimeoutIds = new WeakMap();\n  return (source, destination, output, input, isOffline) => {\n    const {\n      activeInputs,\n      passiveInputs\n    } = getAudioNodeConnections(destination);\n    const {\n      outputs\n    } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = isActive => {\n      const nativeDestinationAudioNode = getNativeAudioNode(destination);\n      const nativeSourceAudioNode = getNativeAudioNode(source);\n      if (isActive) {\n        const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n        if (!isOffline && !isPartOfACycle(source)) {\n          connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n        }\n        if (isPassiveAudioNode(destination)) {\n          setInternalStateToActive(destination);\n        }\n      } else {\n        const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n        addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n        if (!isOffline && !isPartOfACycle(source)) {\n          disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n        }\n        const tailTime = getAudioNodeTailTime(destination);\n        if (tailTime === 0) {\n          if (isActiveAudioNode(destination)) {\n            setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n          }\n        } else {\n          const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);\n          if (tailTimeTimeoutId !== undefined) {\n            clearTimeout(tailTimeTimeoutId);\n          }\n          tailTimeTimeoutIds.set(destination, setTimeout(() => {\n            if (isActiveAudioNode(destination)) {\n              setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n          }, tailTime * 1000));\n        }\n      }\n    };\n    if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n      eventListeners.add(eventListener);\n      if (isActiveAudioNode(source)) {\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n      } else {\n        addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n      }\n      return true;\n    }\n    return false;\n  };\n};","map":{"version":3,"names":["deletePassiveInputConnectionToAudioNode","setInternalStateToActive","setInternalStateToPassiveWhenNecessary","createAddConnectionToAudioNode","addActiveInputConnectionToAudioNode","addPassiveInputConnectionToAudioNode","connectNativeAudioNodeToNativeAudioNode","deleteActiveInputConnectionToAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getAudioNodeTailTime","getEventListenersOfAudioNode","getNativeAudioNode","insertElementInSet","isActiveAudioNode","isPartOfACycle","isPassiveAudioNode","tailTimeTimeoutIds","WeakMap","source","destination","output","input","isOffline","activeInputs","passiveInputs","outputs","eventListeners","eventListener","isActive","nativeDestinationAudioNode","nativeSourceAudioNode","partialConnection","tailTime","tailTimeTimeoutId","get","undefined","clearTimeout","set","setTimeout","outputConnection","add"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/add-connection-to-audio-node.ts"],"sourcesContent":["import { deletePassiveInputConnectionToAudioNode } from '../helpers/delete-passive-input-connection-to-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { IAudioNode } from '../interfaces';\nimport { TAddConnectionToAudioNodeFactory, TContext, TInternalStateEventListener } from '../types';\n\nexport const createAddConnectionToAudioNode: TAddConnectionToAudioNodeFactory = (\n    addActiveInputConnectionToAudioNode,\n    addPassiveInputConnectionToAudioNode,\n    connectNativeAudioNodeToNativeAudioNode,\n    deleteActiveInputConnectionToAudioNode,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getAudioNodeConnections,\n    getAudioNodeTailTime,\n    getEventListenersOfAudioNode,\n    getNativeAudioNode,\n    insertElementInSet,\n    isActiveAudioNode,\n    isPartOfACycle,\n    isPassiveAudioNode\n) => {\n    const tailTimeTimeoutIds = new WeakMap<IAudioNode<TContext>, number>();\n\n    return (source, destination, output, input, isOffline) => {\n        const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n        const { outputs } = getAudioNodeConnections(source);\n        const eventListeners = getEventListenersOfAudioNode(source);\n\n        const eventListener: TInternalStateEventListener = (isActive) => {\n            const nativeDestinationAudioNode = getNativeAudioNode(destination);\n            const nativeSourceAudioNode = getNativeAudioNode(source);\n\n            if (isActive) {\n                const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n\n                addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n\n                if (!isOffline && !isPartOfACycle(source)) {\n                    connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n                }\n\n                if (isPassiveAudioNode(destination)) {\n                    setInternalStateToActive(destination);\n                }\n            } else {\n                const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n\n                addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n\n                if (!isOffline && !isPartOfACycle(source)) {\n                    disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n                }\n\n                const tailTime = getAudioNodeTailTime(destination);\n\n                if (tailTime === 0) {\n                    if (isActiveAudioNode(destination)) {\n                        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n                    }\n                } else {\n                    const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);\n\n                    if (tailTimeTimeoutId !== undefined) {\n                        clearTimeout(tailTimeTimeoutId);\n                    }\n\n                    tailTimeTimeoutIds.set(\n                        destination,\n                        setTimeout(() => {\n                            if (isActiveAudioNode(destination)) {\n                                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n                            }\n                        }, tailTime * 1000)\n                    );\n                }\n            }\n        };\n\n        if (\n            insertElementInSet(\n                outputs,\n                [destination, output, input],\n                (outputConnection) =>\n                    outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input,\n                true\n            )\n        ) {\n            eventListeners.add(eventListener);\n\n            if (isActiveAudioNode(source)) {\n                addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n            } else {\n                addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n            }\n\n            return true;\n        }\n\n        return false;\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}