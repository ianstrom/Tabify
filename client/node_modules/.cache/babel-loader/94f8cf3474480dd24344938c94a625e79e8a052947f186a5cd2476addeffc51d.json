{"ast":null,"code":"import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\nexport class ModulationSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n    this.name = \"ModulationSynth\";\n    const options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n    this._carrier = new Synth({\n      context: this.context,\n      oscillator: options.oscillator,\n      envelope: options.envelope,\n      onsilence: () => this.onsilence(this),\n      volume: -10\n    });\n    this._modulator = new Synth({\n      context: this.context,\n      oscillator: options.modulation,\n      envelope: options.modulationEnvelope,\n      volume: -10\n    });\n    this.oscillator = this._carrier.oscillator;\n    this.envelope = this._carrier.envelope;\n    this.modulation = this._modulator.oscillator;\n    this.modulationEnvelope = this._modulator.envelope;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\"\n    });\n    this.detune = new Signal({\n      context: this.context,\n      value: options.detune,\n      units: \"cents\"\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      value: options.harmonicity,\n      minValue: 0\n    });\n    this._modulationNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    readOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      harmonicity: 3,\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"sine\"\n      }),\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.01,\n        decay: 0.01,\n        sustain: 1,\n        release: 0.5\n      }),\n      modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"square\"\n      }),\n      modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.5,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.5\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeAttack(time, velocity);\n    // @ts-ignore\n    this._modulator._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeRelease(time);\n    // @ts-ignore\n    this._modulator._triggerEnvelopeRelease(time);\n    return this;\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  dispose() {\n    super.dispose();\n    this._carrier.dispose();\n    this._modulator.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n    this._modulationNode.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Signal","Multiply","Gain","Envelope","ToneAudioNode","Monophonic","OmniOscillator","Source","Synth","readOnly","omitFromObject","optionsFromArguments","ModulationSynth","constructor","getDefaults","arguments","name","options","_carrier","context","oscillator","envelope","onsilence","volume","_modulator","modulation","modulationEnvelope","frequency","units","detune","value","harmonicity","minValue","_modulationNode","gain","Object","assign","keys","type","attack","decay","sustain","release","_triggerEnvelopeAttack","time","velocity","_triggerEnvelopeRelease","getLevelAtTime","toSeconds","getValueAtTime","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/instrument/ModulationSynth.ts"],"sourcesContent":["import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface ModulationSynthOptions extends SynthOptions {\n\tharmonicity: Positive;\n\tmodulationEnvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tmodulation: OmniOscillatorSynthOptions;\n}\n/**\n * Base class for both AM and FM synths\n */\nexport abstract class ModulationSynth<Options extends ModulationSynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"ModulationSynth\";\n\n\t/**\n\t * The carrier voice.\n\t */\n\tprotected _carrier: Synth;\n\n\t/**\n\t * The modulator voice.\n\t */\n\n\tprotected _modulator: Synth;\n\n\t/**\n\t * The carrier's oscillator\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The carrier's envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * The modulator's oscillator which is applied to the amplitude of the oscillator\n\t */\n\treadonly modulation: OmniOscillator<any>;\n\n\t/**\n\t * The modulator's envelope\n\t */\n\treadonly modulationEnvelope: AmplitudeEnvelope;\n\n\t/**\n\t * The frequency control\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const amSynth = new Tone.AMSynth().toDestination();\n\t * // pitch the modulator an octave below oscillator\n\t * amSynth.harmonicity.value = 0.5;\n\t * amSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t */\n\treadonly harmonicity: Multiply;\n\n\t/**\n\t * The node where the modulation happens\n\t */\n\tprotected _modulationNode: Gain;\n\n\tconstructor(options?: RecursivePartial<ModulationSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n\n\t\tthis._carrier = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.oscillator,\n\t\t\tenvelope: options.envelope,\n\t\t\tonsilence: () => this.onsilence(this),\n\t\t\tvolume: -10,\n\t\t});\n\t\tthis._modulator = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.modulation,\n\t\t\tenvelope: options.modulationEnvelope,\n\t\t\tvolume: -10,\n\t\t});\n\n\t\tthis.oscillator = this._carrier.oscillator;\n\t\tthis.envelope = this._carrier.envelope;\n\t\tthis.modulation = this._modulator.oscillator;\n\t\tthis.modulationEnvelope = this._modulator.envelope;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.detune,\n\t\t\tunits: \"cents\"\n\t\t});\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.harmonicity,\n\t\t\tminValue: 0,\n\t\t});\n\t\tthis._modulationNode = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ModulationSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tharmonicity: 3,\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sine\"\n\t\t\t\t}\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.01,\n\t\t\t\t\tdecay: 0.01,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulation: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"square\"\n\t\t\t\t}\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t\tmodulationEnvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.5,\n\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeAttack(time, velocity);\n\t}\n\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._modulationNode.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}