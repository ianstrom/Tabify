{"ast":null,"code":"import { Monophonic } from \"./Monophonic\";\nimport { MonoSynth } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n    this.name = \"DuoSynth\";\n    const options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n    this.voice0 = new MonoSynth(Object.assign(options.voice0, {\n      context: this.context,\n      onsilence: () => this.onsilence(this)\n    }));\n    this.voice1 = new MonoSynth(Object.assign(options.voice1, {\n      context: this.context\n    }));\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    this._vibrato = new LFO({\n      frequency: options.vibratoRate,\n      context: this.context,\n      min: -50,\n      max: 50\n    });\n    // start the vibrato immediately\n    this._vibrato.start();\n    this.vibratoRate = this._vibrato.frequency;\n    this._vibratoGain = new Gain({\n      context: this.context,\n      units: \"normalRange\",\n      gain: options.vibratoAmount\n    });\n    this.vibratoAmount = this._vibratoGain.gain;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: 440\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    // control the two voices frequency\n    this.frequency.connect(this.voice0.frequency);\n    this.frequency.chain(this.harmonicity, this.voice1.frequency);\n    this._vibrato.connect(this._vibratoGain);\n    this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n    this.detune.fan(this.voice0.detune, this.voice1.detune);\n    this.voice0.connect(this.output);\n    this.voice1.connect(this.output);\n    readOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n  }\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), {\n      vibratoAmount: 0.5,\n      vibratoRate: 5,\n      harmonicity: 1.5,\n      voice0: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      }),\n      voice1: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeAttack(time, velocity);\n    // @ts-ignore\n    this.voice1._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeRelease(time);\n    // @ts-ignore\n    this.voice1._triggerEnvelopeRelease(time);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this.voice0.dispose();\n    this.voice1.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this._vibrato.dispose();\n    this.vibratoRate.dispose();\n    this._vibratoGain.dispose();\n    this.harmonicity.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Monophonic","MonoSynth","Signal","readOnly","LFO","Gain","Multiply","deepMerge","omitFromObject","optionsFromArguments","DuoSynth","constructor","getDefaults","arguments","name","options","voice0","Object","assign","context","onsilence","voice1","harmonicity","units","value","_vibrato","frequency","vibratoRate","min","max","start","_vibratoGain","gain","vibratoAmount","detune","connect","chain","fan","output","getLevelAtTime","time","toSeconds","envelope","getValueAtTime","keys","filterEnvelope","attack","decay","sustain","release","_triggerEnvelopeAttack","velocity","_triggerEnvelopeRelease","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/instrument/DuoSynth.ts"],"sourcesContent":["import { Monophonic, MonophonicOptions } from \"./Monophonic\";\nimport { MonoSynth, MonoSynthOptions } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain, } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface DuoSynthOptions extends MonophonicOptions {\n\tvoice0: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tvoice1: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tharmonicity: Positive;\n\tvibratoRate: Frequency;\n\tvibratoAmount: Positive;\n}\n\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic<DuoSynthOptions> {\n\n\treadonly name: string = \"DuoSynth\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * the first voice\n\t */\n\treadonly voice0: MonoSynth;\n\n\t/**\n\t * the second voice\n\t */\n\treadonly voice1: MonoSynth;\n\n\t/**\n\t * The amount of vibrato\n\t */\n\tpublic vibratoAmount: Param<\"normalRange\">;\n\n\t/**\n\t * the vibrato frequency\n\t */\n\tpublic vibratoRate: Signal<\"frequency\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const duoSynth = new Tone.DuoSynth().toDestination();\n\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t * // pitch voice1 an octave below voice0\n\t * duoSynth.harmonicity.value = 0.5;\n\t */\n\tpublic harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The vibrato LFO.\n\t */\n\tprivate _vibrato: LFO;\n\n\t/**\n\t * the vibrato gain\n\t */\n\tprivate _vibratoGain: Gain<\"normalRange\">;\n\n\tconstructor(options?: RecursivePartial<DuoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n\n\t\tthis.voice0 = new MonoSynth(Object.assign(options.voice0, {\n\t\t\tcontext: this.context,\n\t\t\tonsilence: () => this.onsilence(this)\n\t\t}));\n\t\tthis.voice1 = new MonoSynth(Object.assign(options.voice1, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis._vibrato = new LFO({\n\t\t\tfrequency: options.vibratoRate,\n\t\t\tcontext: this.context,\n\t\t\tmin: -50,\n\t\t\tmax: 50\n\t\t});\n\t\t// start the vibrato immediately\n\t\tthis._vibrato.start();\n\t\tthis.vibratoRate = this._vibrato.frequency;\n\t\tthis._vibratoGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tgain: options.vibratoAmount\n\t\t});\n\t\tthis.vibratoAmount = this._vibratoGain.gain;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: 440\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this.voice0.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n\t\tthis._vibrato.connect(this._vibratoGain);\n\t\tthis._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.detune.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.voice0.connect(this.output);\n\t\tthis.voice1.connect(this.output);\n\n\t\treadOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n\t}\n\n\tstatic getDefaults(): DuoSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tvibratoAmount: 0.5,\n\t\t\tvibratoRate: 5,\n\t\t\tharmonicity: 1.5,\n\t\t\tvoice0: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tvoice1: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())),\n\t\t\t\t{\n\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t}) as DuoSynthOptions;\n\t}\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeAttack(time, velocity);\n\t}\n\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.voice0.dispose();\n\t\tthis.voice1.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._vibrato.dispose();\n\t\tthis.vibratoRate.dispose();\n\t\tthis._vibratoGain.dispose();\n\t\tthis.harmonicity.dispose();\n\t\treturn this;\n\t}\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}