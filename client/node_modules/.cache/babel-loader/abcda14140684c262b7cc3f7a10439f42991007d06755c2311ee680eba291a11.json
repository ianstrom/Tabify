{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n    this.name = \"Merge\";\n    const options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n    this._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._merger.disconnect();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","optionsFromArguments","Merge","constructor","getDefaults","arguments","name","options","_merger","output","input","context","createChannelMerger","channels","Object","assign","dispose","disconnect"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/component/channel/Merge.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name: string = \"Merge\";\n\n\t/**\n\t * The merger node for the channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a single (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: Positive);\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAA8B,kCAAkC;AAEtF,SAASC,oBAAoB,QAAQ,0BAA0B;AAM/D;;;;;;;;;;;AAWA,OAAM,MAAOC,KAAM,SAAQF,aAA2B;EAwBrDG,YAAA;IACC,KAAK,CAACF,oBAAoB,CAACC,KAAK,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAvBjE,KAAAC,IAAI,GAAW,OAAO;IAwB9B,MAAMC,OAAO,GAAGN,oBAAoB,CAACC,KAAK,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC;IAElF,IAAI,CAACG,OAAO,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,OAAO,CAACC,mBAAmB,CAACL,OAAO,CAACM,QAAQ,CAAC;EAC7F;EAEA,OAAOT,WAAWA,CAAA;IACjB,OAAOU,MAAM,CAACC,MAAM,CAACf,aAAa,CAACI,WAAW,EAAE,EAAE;MACjDS,QAAQ,EAAE;KACV,CAAC;EACH;EAEAG,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACR,OAAO,CAACS,UAAU,EAAE;IACzB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}