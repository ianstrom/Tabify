{"ast":null,"code":"import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n  const outputAudioNode = outputAudioNodes[output];\n  if (outputAudioNode === undefined) {\n    throw createIndexSizeError();\n  }\n  return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = createIndexSizeError => {\n  return function (outputAudioNodes) {\n    let destinationOrOutput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    let output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    let input = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    if (destinationOrOutput === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect());\n    }\n    if (typeof destinationOrOutput === 'number') {\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n    }\n    if (isNativeAudioNode(destinationOrOutput)) {\n      if (output === undefined) {\n        return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n      }\n      if (input === undefined) {\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n      }\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n    }\n    if (output === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n    }\n    return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n  };\n};","map":{"version":3,"names":["isNativeAudioNode","getOutputAudioNodeAtIndex","createIndexSizeError","outputAudioNodes","output","outputAudioNode","undefined","createDisconnectMultipleOutputs","destinationOrOutput","arguments","length","input","forEach","disconnect"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/disconnect-multiple-outputs.ts"],"sourcesContent":["import { isNativeAudioNode } from '../guards/native-audio-node';\nimport { TDisconnectMultipleOutputsFactory, TIndexSizeErrorFactory, TNativeAudioNode } from '../types';\n\nconst getOutputAudioNodeAtIndex = (\n    createIndexSizeError: TIndexSizeErrorFactory,\n    outputAudioNodes: TNativeAudioNode[],\n    output: number\n): TNativeAudioNode => {\n    const outputAudioNode = outputAudioNodes[output];\n\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n\n    return outputAudioNode;\n};\n\nexport const createDisconnectMultipleOutputs: TDisconnectMultipleOutputsFactory = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n        }\n\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n            }\n\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n        }\n\n        if (output === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n    };\n};\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,6BAA6B;AAG/D,MAAMC,yBAAyB,GAAGA,CAC9BC,oBAA4C,EAC5CC,gBAAoC,EACpCC,MAAc,KACI;EAClB,MAAMC,eAAe,GAAGF,gBAAgB,CAACC,MAAM,CAAC;EAEhD,IAAIC,eAAe,KAAKC,SAAS,EAAE;IAC/B,MAAMJ,oBAAoB,EAAE;;EAGhC,OAAOG,eAAe;AAC1B,CAAC;AAED,OAAO,MAAME,+BAA+B,GAAuCL,oBAAoB,IAAI;EACvG,OAAO,UAACC,gBAAgB,EAAoE;IAAA,IAAlEK,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAGH,SAAS;IAAA,IAAEF,MAAM,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAGH,SAAS;IAAA,IAAEK,KAAK,GAAAF,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,CAAC;IACpF,IAAID,mBAAmB,KAAKF,SAAS,EAAE;MACnC,OAAOH,gBAAgB,CAACS,OAAO,CAAEP,eAAe,IAAKA,eAAe,CAACQ,UAAU,EAAE,CAAC;;IAGtF,IAAI,OAAOL,mBAAmB,KAAK,QAAQ,EAAE;MACzC,OAAOP,yBAAyB,CAACC,oBAAoB,EAAEC,gBAAgB,EAAEK,mBAAmB,CAAC,CAACK,UAAU,EAAE;;IAG9G,IAAIb,iBAAiB,CAACQ,mBAAmB,CAAC,EAAE;MACxC,IAAIJ,MAAM,KAAKE,SAAS,EAAE;QACtB,OAAOH,gBAAgB,CAACS,OAAO,CAAEP,eAAe,IAAKA,eAAe,CAACQ,UAAU,CAACL,mBAAmB,CAAC,CAAC;;MAGzG,IAAIG,KAAK,KAAKL,SAAS,EAAE;QACrB,OAAOL,yBAAyB,CAACC,oBAAoB,EAAEC,gBAAgB,EAAEC,MAAM,CAAC,CAACS,UAAU,CAACL,mBAAmB,EAAE,CAAC,CAAC;;MAGvH,OAAOP,yBAAyB,CAACC,oBAAoB,EAAEC,gBAAgB,EAAEC,MAAM,CAAC,CAACS,UAAU,CAACL,mBAAmB,EAAE,CAAC,EAAEG,KAAK,CAAC;;IAG9H,IAAIP,MAAM,KAAKE,SAAS,EAAE;MACtB,OAAOH,gBAAgB,CAACS,OAAO,CAAEP,eAAe,IAAKA,eAAe,CAACQ,UAAU,CAACL,mBAAmB,CAAC,CAAC;;IAGzG,OAAOP,yBAAyB,CAACC,oBAAoB,EAAEC,gBAAgB,EAAEC,MAAM,CAAC,CAACS,UAAU,CAACL,mBAAmB,EAAE,CAAC,CAAC;EACvH,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}