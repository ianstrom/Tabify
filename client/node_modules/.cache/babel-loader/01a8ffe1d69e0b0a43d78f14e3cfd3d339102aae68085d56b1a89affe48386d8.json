{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAnalyserNodes = new WeakMap();\n    const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAnalyserNode = getNativeAudioNode(proxy);\n      // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n      if (!nativeAnalyserNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAnalyserNode.channelCount,\n          channelCountMode: nativeAnalyserNode.channelCountMode,\n          channelInterpretation: nativeAnalyserNode.channelInterpretation,\n          fftSize: nativeAnalyserNode.fftSize,\n          maxDecibels: nativeAnalyserNode.maxDecibels,\n          minDecibels: nativeAnalyserNode.minDecibels,\n          smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n        };\n        nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n      return nativeAnalyserNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n        return createAnalyserNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createAnalyserNodeRendererFactory","createNativeAnalyserNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAnalyserNodes","WeakMap","createAnalyserNode","proxy","nativeOfflineAudioContext","nativeAnalyserNode","nativeAnalyserNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","set","render","renderedNativeAnalyserNode","get","undefined","Promise","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/analyser-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAnalyserNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAnalyserNodeRendererFactoryFactory, TNativeAnalyserNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createAnalyserNodeRendererFactory: TAnalyserNodeRendererFactoryFactory = (\n    createNativeAnalyserNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAnalyserNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAnalyserNode>();\n\n        const createAnalyserNode = async (proxy: IAnalyserNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAnalyserNode = getNativeAudioNode<T, TNativeAnalyserNode>(proxy);\n\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n\n            return nativeAnalyserNode;\n        };\n\n        return {\n            render(proxy: IAnalyserNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeAnalyserNode> {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n\n                return createAnalyserNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,MAAMC,iCAAiC,GAAwCA,CAClFC,wBAAwB,EACxBC,kBAAkB,EAClBC,uBAAuB,KACvB;EACA,OAAO,MAAmE;IACtE,MAAMC,2BAA2B,GAAG,IAAIC,OAAO,EAAmD;IAElG,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,KAAuB,EAAEC,yBAAqD,KAAI;MAChH,IAAIC,kBAAkB,GAAGP,kBAAkB,CAAyBK,KAAK,CAAC;MAE1E;MACA,MAAMG,kCAAkC,GAAGX,gBAAgB,CAACU,kBAAkB,EAAED,yBAAyB,CAAC;MAE1G,IAAI,CAACE,kCAAkC,EAAE;QACrC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,kBAAkB,CAACG,YAAY;UAC7CC,gBAAgB,EAAEJ,kBAAkB,CAACI,gBAAgB;UACrDC,qBAAqB,EAAEL,kBAAkB,CAACK,qBAAqB;UAC/DC,OAAO,EAAEN,kBAAkB,CAACM,OAAO;UACnCC,WAAW,EAAEP,kBAAkB,CAACO,WAAW;UAC3CC,WAAW,EAAER,kBAAkB,CAACQ,WAAW;UAC3CC,qBAAqB,EAAET,kBAAkB,CAACS;SAC7C;QAEDT,kBAAkB,GAAGR,wBAAwB,CAACO,yBAAyB,EAAEG,OAAO,CAAC;;MAGrFP,2BAA2B,CAACe,GAAG,CAACX,yBAAyB,EAAEC,kBAAkB,CAAC;MAE9E,MAAMN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,kBAAkB,CAAC;MAEnF,OAAOA,kBAAkB;IAC7B,CAAC;IAED,OAAO;MACHW,MAAMA,CAACb,KAAuB,EAAEC,yBAAqD;QACjF,MAAMa,0BAA0B,GAAGjB,2BAA2B,CAACkB,GAAG,CAACd,yBAAyB,CAAC;QAE7F,IAAIa,0BAA0B,KAAKE,SAAS,EAAE;UAC1C,OAAOC,OAAO,CAACC,OAAO,CAACJ,0BAA0B,CAAC;;QAGtD,OAAOf,kBAAkB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAC/D;KACH;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}