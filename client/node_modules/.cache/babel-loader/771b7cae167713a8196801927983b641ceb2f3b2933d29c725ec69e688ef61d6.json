{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PWMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n    this.name = \"PWMOscillator\";\n    this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n    this._scale = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    const options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    this._pulse = new PulseOscillator({\n      context: this.context,\n      frequency: options.modulationFrequency\n    });\n    // change the pulse oscillator type\n    this._pulse.carrierType = \"sine\";\n    this.modulationFrequency = this._pulse.frequency;\n    this._modulator = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase\n    });\n    this.frequency = this._modulator.frequency;\n    this.detune = this._modulator.detune;\n    // connections\n    this._modulator.chain(this._scale, this._pulse.width);\n    this._pulse.connect(this.output);\n    readOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      modulationFrequency: 0.4,\n      phase: 0,\n      type: \"pwm\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    time = this.toSeconds(time);\n    this._modulator.start(time);\n    this._pulse.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    time = this.toSeconds(time);\n    this._modulator.stop(time);\n    this._pulse.stop(time);\n  }\n  /**\n   * restart the oscillator\n   */\n  _restart(time) {\n    this._modulator.restart(time);\n    this._pulse.restart(time);\n  }\n  /**\n   * The type of the oscillator. Always returns \"pwm\".\n   */\n  get type() {\n    return \"pwm\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pwm\".\n   */\n  get baseType() {\n    return \"pwm\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n  get phase() {\n    return this._modulator.phase;\n  }\n  set phase(phase) {\n    this._modulator.phase = phase;\n  }\n  asArray() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._pulse.dispose();\n    this._scale.dispose();\n    this._modulator.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["optionsFromArguments","readOnly","Multiply","Source","Oscillator","generateWaveform","PulseOscillator","PWMOscillator","constructor","getDefaults","arguments","name","sourceType","_scale","context","value","options","_pulse","frequency","modulationFrequency","carrierType","_modulator","detune","onstop","phase","chain","width","connect","output","Object","assign","type","_start","time","toSeconds","start","_stop","stop","_restart","restart","baseType","partials","partialCount","asArray","length","undefined","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/source/oscillator/PWMOscillator.ts"],"sourcesContent":["import { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport { PWMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t * the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t * the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Scale the oscillator so it doesn't go silent\n\t * at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The width modulation rate of the oscillator.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst osc = new Tone.PWMOscillator(20, 2).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\treadonly modulationFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param {Frequency} frequency The starting frequency of the oscillator.\n\t * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t */\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\tthis._pulse.carrierType = \"sine\";\n\n\t\tthis.modulationFrequency = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}