{"ast":null,"code":"export const pickElementFromSet = (set, predicate) => {\n  const matchingElements = Array.from(set).filter(predicate);\n  if (matchingElements.length > 1) {\n    throw Error('More than one element was found.');\n  }\n  if (matchingElements.length === 0) {\n    throw Error('No element was found.');\n  }\n  const [matchingElement] = matchingElements;\n  set.delete(matchingElement);\n  return matchingElement;\n};","map":{"version":3,"names":["pickElementFromSet","set","predicate","matchingElements","Array","from","filter","length","Error","matchingElement","delete"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/helpers/pick-element-from-set.ts"],"sourcesContent":["import { TPickElementFromSetFunction } from '../types';\n\nexport const pickElementFromSet: TPickElementFromSetFunction = (set, predicate) => {\n    const matchingElements = Array.from(set).filter(predicate);\n\n    if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n    }\n\n    if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n    }\n\n    const [matchingElement] = matchingElements;\n\n    set.delete(matchingElement);\n\n    return matchingElement;\n};\n"],"mappings":"AAEA,OAAO,MAAMA,kBAAkB,GAAgCA,CAACC,GAAG,EAAEC,SAAS,KAAI;EAC9E,MAAMC,gBAAgB,GAAGC,KAAK,CAACC,IAAI,CAACJ,GAAG,CAAC,CAACK,MAAM,CAACJ,SAAS,CAAC;EAE1D,IAAIC,gBAAgB,CAACI,MAAM,GAAG,CAAC,EAAE;IAC7B,MAAMC,KAAK,CAAC,kCAAkC,CAAC;;EAGnD,IAAIL,gBAAgB,CAACI,MAAM,KAAK,CAAC,EAAE;IAC/B,MAAMC,KAAK,CAAC,uBAAuB,CAAC;;EAGxC,MAAM,CAACC,eAAe,CAAC,GAAGN,gBAAgB;EAE1CF,GAAG,CAACS,MAAM,CAACD,eAAe,CAAC;EAE3B,OAAOA,eAAe;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}