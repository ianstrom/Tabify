{"ast":null,"code":"import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext)\n  /*\n   * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n   * destination.\n   */.then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(audioWorkletNode => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext)))).then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then(audioBuffer => {\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n    if (typeof audioBuffer.copyFromChannel !== 'function') {\n      wrapAudioBufferCopyChannelMethods(audioBuffer);\n      wrapAudioBufferGetChannelDataMethod(audioBuffer);\n      // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n    } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n      wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n    }\n    audioBufferStore.add(audioBuffer);\n    return audioBuffer;\n  });\n};","map":{"version":3,"names":["wrapAudioBufferGetChannelDataMethod","createStartRendering","audioBufferStore","cacheTestResult","getAudioNodeRenderer","getUnrenderedAudioWorkletNodes","renderNativeOfflineAudioContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","destination","nativeOfflineAudioContext","render","then","Promise","all","Array","from","map","audioWorkletNode","audioBuffer","copyFromChannel","add"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/start-rendering.ts"],"sourcesContent":["import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nimport { TStartRenderingFactory } from '../types';\n\nexport const createStartRendering: TStartRenderingFactory = (\n    audioBufferStore,\n    cacheTestResult,\n    getAudioNodeRenderer,\n    getUnrenderedAudioWorkletNodes,\n    renderNativeOfflineAudioContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n) => {\n    return (destination, nativeOfflineAudioContext) =>\n        getAudioNodeRenderer(destination)\n            .render(destination, nativeOfflineAudioContext)\n            /*\n             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n             * destination.\n             */\n            .then(() =>\n                Promise.all(\n                    Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map((audioWorkletNode) =>\n                        getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext)\n                    )\n                )\n            )\n            .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n            .then((audioBuffer) => {\n                // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                if (typeof audioBuffer.copyFromChannel !== 'function') {\n                    wrapAudioBufferCopyChannelMethods(audioBuffer);\n                    wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n                } else if (\n                    !cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () =>\n                        testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)\n                    )\n                ) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n\n                audioBufferStore.add(audioBuffer);\n\n                return audioBuffer;\n            });\n};\n"],"mappings":"AAAA,SAASA,mCAAmC,QAAQ,sDAAsD;AAG1G,OAAO,MAAMC,oBAAoB,GAA2BA,CACxDC,gBAAgB,EAChBC,eAAe,EACfC,oBAAoB,EACpBC,8BAA8B,EAC9BC,+BAA+B,EAC/BC,mDAAmD,EACnDC,iCAAiC,EACjCC,4CAA4C,KAC5C;EACA,OAAO,CAACC,WAAW,EAAEC,yBAAyB,KAC1CP,oBAAoB,CAACM,WAAW,CAAC,CAC5BE,MAAM,CAACF,WAAW,EAAEC,yBAAyB;EAC9C;;;KAAA,CAICE,IAAI,CAAC,MACFC,OAAO,CAACC,GAAG,CACPC,KAAK,CAACC,IAAI,CAACZ,8BAA8B,CAACM,yBAAyB,CAAC,CAAC,CAACO,GAAG,CAAEC,gBAAgB,IACvFf,oBAAoB,CAACe,gBAAgB,CAAC,CAACP,MAAM,CAACO,gBAAgB,EAAER,yBAAyB,CAAC,CAC7F,CACJ,CACJ,CACAE,IAAI,CAAC,MAAMP,+BAA+B,CAACK,yBAAyB,CAAC,CAAC,CACtEE,IAAI,CAAEO,WAAW,IAAI;IAClB;IACA;IACA,IAAI,OAAOA,WAAW,CAACC,eAAe,KAAK,UAAU,EAAE;MACnDb,iCAAiC,CAACY,WAAW,CAAC;MAC9CpB,mCAAmC,CAACoB,WAAW,CAAC;MAChD;KACH,MAAM,IACH,CAACjB,eAAe,CAACI,mDAAmD,EAAE,MAClEA,mDAAmD,CAACa,WAAW,CAAC,CACnE,EACH;MACEX,4CAA4C,CAACW,WAAW,CAAC;;IAG7DlB,gBAAgB,CAACoB,GAAG,CAACF,WAAW,CAAC;IAEjC,OAAOA,WAAW;EACtB,CAAC,CAAC;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}