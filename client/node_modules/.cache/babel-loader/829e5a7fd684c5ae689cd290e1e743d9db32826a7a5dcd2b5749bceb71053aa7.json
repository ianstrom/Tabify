{"ast":null,"code":"export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n  return async (audioParam, nativeOfflineAudioContext, nativeAudioParam) => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n    await Promise.all(Array.from(audioParamConnections.activeInputs).map(async _ref => {\n      let [source, output] = _ref;\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n      if (!isPartOfACycle(source)) {\n        renderedNativeAudioNode.connect(nativeAudioParam, output);\n      }\n    }));\n  };\n};","map":{"version":3,"names":["createRenderInputsOfAudioParam","getAudioNodeRenderer","getAudioParamConnections","isPartOfACycle","audioParam","nativeOfflineAudioContext","nativeAudioParam","audioParamConnections","Promise","all","Array","from","activeInputs","map","_ref","source","output","audioNodeRenderer","renderedNativeAudioNode","render","connect"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/render-inputs-of-audio-param.ts"],"sourcesContent":["import { IAudioParam, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TNativeAudioParam, TNativeOfflineAudioContext, TRenderInputsOfAudioParamFactory } from '../types';\n\nexport const createRenderInputsOfAudioParam: TRenderInputsOfAudioParamFactory = (\n    getAudioNodeRenderer,\n    getAudioParamConnections,\n    isPartOfACycle\n) => {\n    return async <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n        audioParam: IAudioParam,\n        nativeOfflineAudioContext: TNativeOfflineAudioContext,\n        nativeAudioParam: TNativeAudioParam\n    ): Promise<void> => {\n        const audioParamConnections = getAudioParamConnections<T>(audioParam);\n\n        await Promise.all(\n            Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n                const audioNodeRenderer = getAudioNodeRenderer(source);\n                const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n\n                if (!isPartOfACycle(source)) {\n                    renderedNativeAudioNode.connect(nativeAudioParam, output);\n                }\n            })\n        );\n    };\n};\n"],"mappings":"AAGA,OAAO,MAAMA,8BAA8B,GAAqCA,CAC5EC,oBAAoB,EACpBC,wBAAwB,EACxBC,cAAc,KACd;EACA,OAAO,OACHC,UAAuB,EACvBC,yBAAqD,EACrDC,gBAAmC,KACpB;IACf,MAAMC,qBAAqB,GAAGL,wBAAwB,CAAIE,UAAU,CAAC;IAErE,MAAMI,OAAO,CAACC,GAAG,CACbC,KAAK,CAACC,IAAI,CAACJ,qBAAqB,CAACK,YAAY,CAAC,CAACC,GAAG,CAAC,MAAAC,IAAA,IAA2B;MAAA,IAApB,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAAF,IAAA;MACtE,MAAMG,iBAAiB,GAAGhB,oBAAoB,CAACc,MAAM,CAAC;MACtD,MAAMG,uBAAuB,GAAG,MAAMD,iBAAiB,CAACE,MAAM,CAACJ,MAAM,EAAEV,yBAAyB,CAAC;MAEjG,IAAI,CAACF,cAAc,CAACY,MAAM,CAAC,EAAE;QACzBG,uBAAuB,CAACE,OAAO,CAACd,gBAAgB,EAAEU,MAAM,CAAC;;IAEjE,CAAC,CAAC,CACL;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}