{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\nimport { BiquadFilter } from \"./BiquadFilter\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n    this.name = \"Filter\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this._filters = [];\n    const options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n    this._filters = [];\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this.gain = new Signal({\n      context: this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain\n    });\n    this._type = options.type;\n    this.rolloff = options.rolloff;\n    readOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      detune: 0,\n      frequency: 350,\n      gain: 0,\n      rolloff: -12,\n      type: \"lowpass\"\n    });\n  }\n  /**\n   * The type of the filter. Types: \"lowpass\", \"highpass\",\n   * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n   */\n  get type() {\n    return this._type;\n  }\n  set type(type) {\n    const types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n    assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n    this._type = type;\n    this._filters.forEach(filter => filter.type = type);\n  }\n  /**\n   * The rolloff of the filter which is the drop in db\n   * per octave. Implemented internally by cascading filters.\n   * Only accepts the values -12, -24, -48 and -96.\n   */\n  get rolloff() {\n    return this._rolloff;\n  }\n  set rolloff(rolloff) {\n    const rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n    const possibilities = [-12, -24, -48, -96];\n    let cascadingCount = possibilities.indexOf(rolloffNum);\n    // check the rolloff is valid\n    assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n    cascadingCount += 1;\n    this._rolloff = rolloffNum;\n    this.input.disconnect();\n    this._filters.forEach(filter => filter.disconnect());\n    this._filters = new Array(cascadingCount);\n    for (let count = 0; count < cascadingCount; count++) {\n      const filter = new BiquadFilter({\n        context: this.context\n      });\n      filter.type = this._type;\n      this.frequency.connect(filter.frequency);\n      this.detune.connect(filter.detune);\n      this.Q.connect(filter.Q);\n      this.gain.connect(filter.gain);\n      this._filters[count] = filter;\n    }\n    this._internalChannels = this._filters;\n    connectSeries(this.input, ...this._internalChannels, this.output);\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n  getFrequencyResponse() {\n    let len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n    const filterClone = new BiquadFilter({\n      frequency: this.frequency.value,\n      gain: this.gain.value,\n      Q: this.Q.value,\n      type: this._type,\n      detune: this.detune.value\n    });\n    // start with all 1s\n    const totalResponse = new Float32Array(len).map(() => 1);\n    this._filters.forEach(() => {\n      const response = filterClone.getFrequencyResponse(len);\n      response.forEach((val, i) => totalResponse[i] *= val);\n    });\n    filterClone.dispose();\n    return totalResponse;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._filters.forEach(filter => {\n      filter.dispose();\n    });\n    writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    this.frequency.dispose();\n    this.Q.dispose();\n    this.detune.dispose();\n    this.gain.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","connectSeries","ToneAudioNode","optionsFromArguments","readOnly","writable","isNumber","Signal","assert","BiquadFilter","Filter","constructor","getDefaults","arguments","name","input","context","output","_filters","options","Q","units","value","frequency","detune","gain","convert","_type","type","rolloff","Object","assign","types","indexOf","forEach","filter","_rolloff","rolloffNum","parseInt","possibilities","cascadingCount","join","disconnect","Array","count","connect","_internalChannels","getFrequencyResponse","len","length","undefined","filterClone","totalResponse","Float32Array","map","response","val","i","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/component/filter/Filter.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\nimport { BiquadFilter, BiquadFilterOptions } from \"./BiquadFilter\";\n\nexport type FilterRollOff = -12 | -24 | -48 | -96;\n\nexport type FilterOptions = BiquadFilterOptions & {\n\trolloff: FilterRollOff;\n}\n\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name: string = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilter[] = [];\n\n\t/**\n\t * the rolloff value of the filter\n\t */\n\tprivate _rolloff!: FilterRollOff;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune parameter\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t * @param rolloff The drop in decibels per octave after the cutoff frequency\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: FilterRollOff);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tconvert: false,\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12 as FilterRollOff,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tassert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): FilterRollOff {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10) as FilterRollOff;\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tassert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = new BiquadFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t});\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\tconst filterClone = new BiquadFilter({\n\t\t\tfrequency: this.frequency.value,\n\t\t\tgain: this.gain.value,\n\t\t\tQ: this.Q.value,\n\t\t\ttype: this._type,\n\t\t\tdetune: this.detune.value,\n\t\t});\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst response = filterClone.getFrequencyResponse(len);\n\t\t\tresponse.forEach((val, i) => totalResponse[i] *= val);\n\t\t});\n\t\tfilterClone.dispose();\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.dispose();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}