{"ast":null,"code":"import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  let nativeOfflineAudioContext = null;\n  return class AudioBuffer {\n    constructor(options) {\n      if (nativeOfflineAudioContextConstructor === null) {\n        throw new Error('Missing the native OfflineAudioContext constructor.');\n      }\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      if (nativeOfflineAudioContext === null) {\n        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n      }\n      /*\n       * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n       * factory function. But since Firefox also supports the constructor everything should be fine.\n       */\n      const audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n      // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n      if (audioBuffer.numberOfChannels === 0) {\n        throw createNotSupportedError();\n      }\n      // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n        // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n      audioBufferStore.add(audioBuffer);\n      /*\n       * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n       * (Offline)AudioContexts.\n       */\n      return audioBuffer;\n    }\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);\n    }\n  };\n};","map":{"version":3,"names":["testAudioBufferCopyChannelMethodsOutOfBoundsSupport","wrapAudioBufferGetChannelDataMethod","DEFAULT_OPTIONS","numberOfChannels","createAudioBufferConstructor","audioBufferStore","cacheTestResult","createNotSupportedError","nativeAudioBufferConstructor","nativeOfflineAudioContextConstructor","testNativeAudioBufferConstructorSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","nativeOfflineAudioContext","AudioBuffer","constructor","options","Error","length","sampleRate","audioBuffer","createBuffer","copyFromChannel","add","Symbol","hasInstance","instance","Object","getPrototypeOf","prototype","has"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/audio-buffer-constructor.ts"],"sourcesContent":["import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nimport { IAudioBuffer, IAudioBufferOptions } from '../interfaces';\nimport { TAudioBufferConstructorFactory, TNativeOfflineAudioContext } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n} as const;\n\nexport const createAudioBufferConstructor: TAudioBufferConstructorFactory = (\n    audioBufferStore,\n    cacheTestResult,\n    createNotSupportedError,\n    nativeAudioBufferConstructor,\n    nativeOfflineAudioContextConstructor,\n    testNativeAudioBufferConstructorSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n) => {\n    let nativeOfflineAudioContext: null | TNativeOfflineAudioContext = null;\n\n    return class AudioBuffer implements IAudioBuffer {\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public copyFromChannel!: (destination: Float32Array, channelNumber: number, bufferOffset?: number) => void;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public copyToChannel!: (source: Float32Array, channelNumber: number, bufferOffset?: number) => void;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public duration!: number;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public getChannelData!: (channel: number) => Float32Array;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public length!: number;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public numberOfChannels!: number;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public sampleRate!: number;\n\n        constructor(options: IAudioBufferOptions) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer =\n                nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)\n                    ? new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate })\n                    : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n            } else if (\n                !cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () =>\n                    testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)\n                )\n            ) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n\n            audioBufferStore.add(audioBuffer);\n\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n\n        public static [Symbol.hasInstance](instance: unknown): boolean {\n            return (\n                (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype) ||\n                audioBufferStore.has(<any>instance)\n            );\n        }\n    };\n};\n"],"mappings":"AAAA,SAASA,mDAAmD,QAAQ,yEAAyE;AAC7I,SAASC,mCAAmC,QAAQ,sDAAsD;AAI1G,MAAMC,eAAe,GAAG;EACpBC,gBAAgB,EAAE;CACZ;AAEV,OAAO,MAAMC,4BAA4B,GAAmCA,CACxEC,gBAAgB,EAChBC,eAAe,EACfC,uBAAuB,EACvBC,4BAA4B,EAC5BC,oCAAoC,EACpCC,uCAAuC,EACvCC,iCAAiC,EACjCC,4CAA4C,KAC5C;EACA,IAAIC,yBAAyB,GAAsC,IAAI;EAEvE,OAAO,MAAMC,WAAW;IAsBpBC,YAAYC,OAA4B;MACpC,IAAIP,oCAAoC,KAAK,IAAI,EAAE;QAC/C,MAAM,IAAIQ,KAAK,CAAC,qDAAqD,CAAC;;MAG1E,MAAM;QAAEC,MAAM;QAAEf,gBAAgB;QAAEgB;MAAU,CAAE,GAAG;QAAE,GAAGjB,eAAe;QAAE,GAAGc;MAAO,CAAE;MAEnF,IAAIH,yBAAyB,KAAK,IAAI,EAAE;QACpCA,yBAAyB,GAAG,IAAIJ,oCAAoC,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;;MAGrF;;;;MAIA,MAAMW,WAAW,GACbZ,4BAA4B,KAAK,IAAI,IACrCF,eAAe,CAACI,uCAAuC,EAAEA,uCAAuC,CAAC,GAC3F,IAAIF,4BAA4B,CAAC;QAAEU,MAAM;QAAEf,gBAAgB;QAAEgB;MAAU,CAAE,CAAC,GAC1EN,yBAAyB,CAACQ,YAAY,CAAClB,gBAAgB,EAAEe,MAAM,EAAEC,UAAU,CAAC;MAEtF;MACA,IAAIC,WAAW,CAACjB,gBAAgB,KAAK,CAAC,EAAE;QACpC,MAAMI,uBAAuB,EAAE;;MAGnC;MACA;MACA,IAAI,OAAOa,WAAW,CAACE,eAAe,KAAK,UAAU,EAAE;QACnDX,iCAAiC,CAACS,WAAW,CAAC;QAC9CnB,mCAAmC,CAACmB,WAAW,CAAC;QAChD;OACH,MAAM,IACH,CAACd,eAAe,CAACN,mDAAmD,EAAE,MAClEA,mDAAmD,CAACoB,WAAW,CAAC,CACnE,EACH;QACER,4CAA4C,CAACQ,WAAW,CAAC;;MAG7Df,gBAAgB,CAACkB,GAAG,CAACH,WAAW,CAAC;MAEjC;;;;MAIA,OAAOA,WAAW;IACtB;IAEO,QAAQI,MAAM,CAACC,WAAW,EAAEC,QAAiB;MAChD,OACKA,QAAQ,KAAK,IAAI,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIC,MAAM,CAACC,cAAc,CAACF,QAAQ,CAAC,KAAKZ,WAAW,CAACe,SAAS,IAC/GxB,gBAAgB,CAACyB,GAAG,CAAMJ,QAAQ,CAAC;IAE3C;GACH;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}