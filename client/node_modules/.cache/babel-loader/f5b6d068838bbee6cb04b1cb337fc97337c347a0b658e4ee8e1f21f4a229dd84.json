{"ast":null,"code":"import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n  return class OfflineAudioContext extends baseAudioContextConstructor {\n    constructor(a, b, c) {\n      let options;\n      if (typeof a === 'number' && b !== undefined && c !== undefined) {\n        options = {\n          length: b,\n          numberOfChannels: a,\n          sampleRate: c\n        };\n      } else if (typeof a === 'object') {\n        options = a;\n      } else {\n        throw new Error('The given parameters are not valid.');\n      }\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n      // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n      if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n        nativeOfflineAudioContext.addEventListener('statechange', (() => {\n          let i = 0;\n          const delayStateChangeEvent = event => {\n            if (this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n                this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n          return delayStateChangeEvent;\n        })());\n      }\n      super(nativeOfflineAudioContext, numberOfChannels);\n      this._length = length;\n      this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      this._state = null;\n    }\n    get length() {\n      // Bug #17: Safari does not yet expose the length.\n      if (this._nativeOfflineAudioContext.length === undefined) {\n        return this._length;\n      }\n      return this._nativeOfflineAudioContext.length;\n    }\n    get state() {\n      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n    }\n    startRendering() {\n      /*\n       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n       * the state of the nativeOfflineAudioContext might no transition to running immediately.\n       */\n      if (this._state === 'running') {\n        return Promise.reject(createInvalidStateError());\n      }\n      this._state = 'running';\n      return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n        this._state = null;\n        deactivateAudioGraph(this);\n      });\n    }\n    _waitForThePromiseToSettle(event) {\n      if (this._state === null) {\n        this._nativeOfflineAudioContext.dispatchEvent(event);\n      } else {\n        setTimeout(() => this._waitForThePromiseToSettle(event));\n      }\n    }\n  };\n};","map":{"version":3,"names":["deactivateAudioGraph","testPromiseSupport","DEFAULT_OPTIONS","numberOfChannels","createOfflineAudioContextConstructor","baseAudioContextConstructor","cacheTestResult","createInvalidStateError","createNativeOfflineAudioContext","startRendering","OfflineAudioContext","constructor","a","b","c","options","undefined","length","sampleRate","Error","nativeOfflineAudioContext","addEventListener","i","delayStateChangeEvent","event","_state","removeEventListener","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","state","Promise","reject","destination","finally","dispatchEvent","setTimeout"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/offline-audio-context-constructor.ts"],"sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nimport { IAudioBuffer, IOfflineAudioContext, IOfflineAudioContextOptions } from '../interfaces';\nimport { TAudioContextState, TNativeOfflineAudioContext, TOfflineAudioContextConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n} as const;\n\nexport const createOfflineAudioContextConstructor: TOfflineAudioContextConstructorFactory = (\n    baseAudioContextConstructor,\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    startRendering\n) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor<IOfflineAudioContext> implements IOfflineAudioContext {\n        private _length: number;\n\n        private _nativeOfflineAudioContext: TNativeOfflineAudioContext;\n\n        private _state: null | TAudioContextState;\n\n        constructor(options: IOfflineAudioContextOptions);\n        constructor(numberOfChannels: number, length: number, sampleRate: number);\n        constructor(a: number | IOfflineAudioContextOptions, b?: number, c?: number) {\n            let options: IOfflineAudioContextOptions;\n\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            } else if (typeof a === 'object') {\n                options = a;\n            } else {\n                throw new Error('The given parameters are not valid.');\n            }\n\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener(\n                    'statechange',\n                    (() => {\n                        let i = 0;\n\n                        const delayStateChangeEvent = (event: Event) => {\n                            if (this._state === 'running') {\n                                if (i > 0) {\n                                    nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                    event.stopImmediatePropagation();\n\n                                    this._waitForThePromiseToSettle(event);\n                                } else {\n                                    i += 1;\n                                }\n                            }\n                        };\n\n                        return delayStateChangeEvent;\n                    })()\n                );\n            }\n\n            super(nativeOfflineAudioContext, numberOfChannels);\n\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n\n        get length(): number {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n\n            return this._nativeOfflineAudioContext.length;\n        }\n\n        get state(): TAudioContextState {\n            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n        }\n\n        public startRendering(): Promise<IAudioBuffer> {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n\n            this._state = 'running';\n\n            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n                this._state = null;\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        private _waitForThePromiseToSettle(event: Event): void {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            } else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}