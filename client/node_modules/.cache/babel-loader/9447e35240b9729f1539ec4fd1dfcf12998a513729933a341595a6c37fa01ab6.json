{"ast":null,"code":"export const createTestConstantSourceNodeAccurateSchedulingSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    // Bug #62: Safari does not support ConstantSourceNodes.\n    if (nativeOfflineAudioContext.createConstantSource === undefined) {\n      return true;\n    }\n    const nativeConstantSourceNode = nativeOfflineAudioContext.createConstantSource();\n    /*\n     * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to\n     * the implementation of Firefox right now, but it could probably be done in a better way.\n     */\n    return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;\n  };\n};","map":{"version":3,"names":["createTestConstantSourceNodeAccurateSchedulingSupport","nativeOfflineAudioContextConstructor","nativeOfflineAudioContext","createConstantSource","undefined","nativeConstantSourceNode","offset","maxValue","Number","POSITIVE_INFINITY"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/test-constant-source-node-accurate-scheduling-support.ts"],"sourcesContent":["import { TTestConstantSourceNodeAccurateSchedulingSupportFactory } from '../types';\n\nexport const createTestConstantSourceNodeAccurateSchedulingSupport: TTestConstantSourceNodeAccurateSchedulingSupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n\n        // Bug #62: Safari does not support ConstantSourceNodes.\n        if (nativeOfflineAudioContext.createConstantSource === undefined) {\n            return true;\n        }\n\n        const nativeConstantSourceNode = nativeOfflineAudioContext.createConstantSource();\n\n        /*\n         * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to\n         * the implementation of Firefox right now, but it could probably be done in a better way.\n         */\n        return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;\n    };\n};\n"],"mappings":"AAEA,OAAO,MAAMA,qDAAqD,GAC9DC,oCAAoC,IACpC;EACA,OAAO,MAAK;IACR,IAAIA,oCAAoC,KAAK,IAAI,EAAE;MAC/C,OAAO,KAAK;;IAGhB,MAAMC,yBAAyB,GAAG,IAAID,oCAAoC,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;IAEvF;IACA,IAAIC,yBAAyB,CAACC,oBAAoB,KAAKC,SAAS,EAAE;MAC9D,OAAO,IAAI;;IAGf,MAAMC,wBAAwB,GAAGH,yBAAyB,CAACC,oBAAoB,EAAE;IAEjF;;;;IAIA,OAAOE,wBAAwB,CAACC,MAAM,CAACC,QAAQ,KAAKC,MAAM,CAACC,iBAAiB;EAChF,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}