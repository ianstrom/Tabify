{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioBufferSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n    const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n      const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeAudioBufferSourceNode.buffer,\n          channelCount: nativeAudioBufferSourceNode.channelCount,\n          channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n          channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          loop: nativeAudioBufferSourceNode.loop,\n          loopEnd: nativeAudioBufferSourceNode.loopEnd,\n          loopStart: nativeAudioBufferSourceNode.loopStart,\n          playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n        };\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n        if (start !== null) {\n          nativeAudioBufferSourceNode.start(...start);\n        }\n        if (stop !== null) {\n          nativeAudioBufferSourceNode.stop(stop);\n        }\n      }\n      renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n      } else {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n      return nativeAudioBufferSourceNode;\n    };\n    return {\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createAudioBufferSourceNodeRendererFactory","connectAudioParam","createNativeAudioBufferSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeAudioBufferSourceNodes","WeakMap","start","stop","createAudioBufferSourceNode","proxy","nativeOfflineAudioContext","nativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","value","set","render","renderedNativeAudioBufferSourceNode","get","undefined","Promise","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/audio-buffer-source-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAudioBufferSourceNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAudioBufferSourceNodeRendererFactoryFactory, TNativeAudioBufferSourceNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createAudioBufferSourceNodeRendererFactory: TAudioBufferSourceNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioBufferSourceNode>();\n\n        let start: null | [number, number] | [number, number, number] = null;\n        let stop: null | number = null;\n\n        const createAudioBufferSourceNode = async (\n            proxy: IAudioBufferSourceNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode<T, TNativeAudioBufferSourceNode>(proxy);\n\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            } else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n            return nativeAudioBufferSourceNode;\n        };\n\n        return {\n            set start(value: [number, number] | [number, number, number]) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(\n                proxy: IAudioBufferSourceNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioBufferSourceNode> {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,MAAMC,0CAA0C,GAAiDA,CACpGC,iBAAiB,EACjBC,iCAAiC,EACjCC,kBAAkB,EAClBC,gBAAgB,EAChBC,uBAAuB,KACvB;EACA,OAAO,MAAmE;IACtE,MAAMC,oCAAoC,GAAG,IAAIC,OAAO,EAA4D;IAEpH,IAAIC,KAAK,GAAuD,IAAI;IACpE,IAAIC,IAAI,GAAkB,IAAI;IAE9B,MAAMC,2BAA2B,GAAG,MAAAA,CAChCC,KAAgC,EAChCC,yBAAqD,KACrD;MACA,IAAIC,2BAA2B,GAAGV,kBAAkB,CAAkCQ,KAAK,CAAC;MAE5F;;;;MAIA,MAAMG,2CAA2C,GAAGf,gBAAgB,CAACc,2BAA2B,EAAED,yBAAyB,CAAC;MAE5H,IAAI,CAACE,2CAA2C,EAAE;QAC9C,MAAMC,OAAO,GAAG;UACZC,MAAM,EAAEH,2BAA2B,CAACG,MAAM;UAC1CC,YAAY,EAAEJ,2BAA2B,CAACI,YAAY;UACtDC,gBAAgB,EAAEL,2BAA2B,CAACK,gBAAgB;UAC9DC,qBAAqB,EAAEN,2BAA2B,CAACM,qBAAqB;UACxE;UACAC,IAAI,EAAEP,2BAA2B,CAACO,IAAI;UACtCC,OAAO,EAAER,2BAA2B,CAACQ,OAAO;UAC5CC,SAAS,EAAET,2BAA2B,CAACS,SAAS;UAChDC,YAAY,EAAEV,2BAA2B,CAACU,YAAY,CAACC;SAC1D;QAEDX,2BAA2B,GAAGX,iCAAiC,CAACU,yBAAyB,EAAEG,OAAO,CAAC;QAEnG,IAAIP,KAAK,KAAK,IAAI,EAAE;UAChBK,2BAA2B,CAACL,KAAK,CAAC,GAAGA,KAAK,CAAC;;QAG/C,IAAIC,IAAI,KAAK,IAAI,EAAE;UACfI,2BAA2B,CAACJ,IAAI,CAACA,IAAI,CAAC;;;MAI9CH,oCAAoC,CAACmB,GAAG,CAACb,yBAAyB,EAAEC,2BAA2B,CAAC;MAEhG,IAAI,CAACC,2CAA2C,EAAE;QAC9C;QACA,MAAMV,gBAAgB,CAACQ,yBAAyB,EAAED,KAAK,CAACY,YAAY,EAAEV,2BAA2B,CAACU,YAAY,CAAC;OAClH,MAAM;QACH;QACA,MAAMtB,iBAAiB,CAACW,yBAAyB,EAAED,KAAK,CAACY,YAAY,EAAEV,2BAA2B,CAACU,YAAY,CAAC;;MAGpH,MAAMlB,uBAAuB,CAACM,KAAK,EAAEC,yBAAyB,EAAEC,2BAA2B,CAAC;MAE5F,OAAOA,2BAA2B;IACtC,CAAC;IAED,OAAO;MACH,IAAIL,KAAKA,CAACgB,KAAkD;QACxDhB,KAAK,GAAGgB,KAAK;MACjB,CAAC;MACD,IAAIf,IAAIA,CAACe,KAAa;QAClBf,IAAI,GAAGe,KAAK;MAChB,CAAC;MACDE,MAAMA,CACFf,KAAgC,EAChCC,yBAAqD;QAErD,MAAMe,mCAAmC,GAAGrB,oCAAoC,CAACsB,GAAG,CAAChB,yBAAyB,CAAC;QAE/G,IAAIe,mCAAmC,KAAKE,SAAS,EAAE;UACnD,OAAOC,OAAO,CAACC,OAAO,CAACJ,mCAAmC,CAAC;;QAG/D,OAAOjB,2BAA2B,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACxE;KACH;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}