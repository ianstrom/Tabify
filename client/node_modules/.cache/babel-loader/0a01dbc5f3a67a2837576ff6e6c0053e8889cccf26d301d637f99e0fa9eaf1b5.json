{"ast":null,"code":"import { Volume } from \"../../component/channel/Volume\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class Destination extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Destination.getDefaults(), arguments));\n    this.name = \"Destination\";\n    this.input = new Volume({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination();\n     * osc.start();\n     * // ramp the volume down to silent over 10 seconds\n     * Tone.getDestination().volume.rampTo(-Infinity, 10);\n     */\n    this.volume = this.input.volume;\n    const options = optionsFromArguments(Destination.getDefaults(), arguments);\n    connectSeries(this.input, this.output, this.context.rawContext.destination);\n    this.mute = options.mute;\n    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const oscillator = new Tone.Oscillator().start().toDestination();\n   * setTimeout(() => {\n   * \t// mute the output\n   * \tTone.Destination.mute = true;\n   * }, 1000);\n   */\n  get mute() {\n    return this.input.mute;\n  }\n  set mute(mute) {\n    this.input.mute = mute;\n  }\n  /**\n   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n   * chained in the master effects chain.\n   * @param args All arguments will be connected in a row and the Master will be routed through it.\n   * @example\n   * // route all audio through a filter and compressor\n   * const lowpass = new Tone.Filter(800, \"lowpass\");\n   * const compressor = new Tone.Compressor(-18);\n   * Tone.Destination.chain(lowpass, compressor);\n   */\n  chain() {\n    this.input.disconnect();\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    args.unshift(this.input);\n    args.push(this.output);\n    connectSeries(...args);\n    return this;\n  }\n  /**\n   * The maximum number of channels the system can output\n   * @example\n   * console.log(Tone.Destination.maxChannelCount);\n   */\n  get maxChannelCount() {\n    return this.context.rawContext.destination.maxChannelCount;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this.volume.dispose();\n    return this;\n  }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(context => {\n  context.destination = new Destination({\n    context\n  });\n});\nonContextClose(context => {\n  context.destination.dispose();\n});","map":{"version":3,"names":["Volume","optionsFromArguments","onContextClose","onContextInit","Gain","connectSeries","ToneAudioNode","Destination","constructor","getDefaults","arguments","name","input","context","output","volume","options","rawContext","destination","mute","_internalChannels","Object","assign","chain","disconnect","_len","length","args","Array","_key","unshift","push","maxChannelCount","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/core/context/Destination.ts"],"sourcesContent":["import { Volume } from \"../../component/channel/Volume\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name: string = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The volume of the master output in decibels. -Infinity is silent, and 0 is no change. \n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination();\n\t * osc.start();\n\t * // ramp the volume down to silent over 10 seconds\n\t * Tone.getDestination().volume.rampTo(-Infinity, 10);\n\t */\n\tvolume: Param<\"decibels\"> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t\tthis._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const oscillator = new Tone.Oscillator().start().toDestination();\n\t * setTimeout(() => {\n\t * \t// mute the output\n\t * \tTone.Destination.mute = true;\n\t * }, 1000);\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t * chained in the master effects chain.\n\t * @param args All arguments will be connected in a row and the Master will be routed through it.\n\t * @example\n\t * // route all audio through a filter and compressor\n\t * const lowpass = new Tone.Filter(800, \"lowpass\");\n\t * const compressor = new Tone.Compressor(-18);\n\t * Tone.Destination.chain(lowpass, compressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The maximum number of channels the system can output\n\t * @example\n\t * console.log(Tone.Destination.maxChannelCount);\n\t */\n\tget maxChannelCount(): number {\n\t\treturn this.context.rawContext.destination.maxChannelCount;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gCAAgC;AAEvD,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,cAAc,EAAEC,aAAa,QAAQ,yBAAyB;AACvE,SAASC,IAAI,QAAQ,QAAQ;AAE7B,SAASC,aAAa,EAAEC,aAAa,QAA8B,iBAAiB;AAOpF;;;;;;;;;;;;;;;AAeA,OAAM,MAAOC,WAAY,SAAQD,aAAiC;EAkBjEE,YAAA;IAEC,KAAK,CAACP,oBAAoB,CAACM,WAAW,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC;IAlBzD,KAAAC,IAAI,GAAW,aAAa;IAErC,KAAAC,KAAK,GAAW,IAAIZ,MAAM,CAAC;MAAEa,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IACrD,KAAAC,MAAM,GAAS,IAAIV,IAAI,CAAC;MAAES,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAElD;;;;;;;;IAQA,KAAAE,MAAM,GAAsB,IAAI,CAACH,KAAK,CAACG,MAAM;IAM5C,MAAMC,OAAO,GAAGf,oBAAoB,CAACM,WAAW,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC;IAE1EL,aAAa,CAAC,IAAI,CAACO,KAAK,EAAE,IAAI,CAACE,MAAM,EAAE,IAAI,CAACD,OAAO,CAACI,UAAU,CAACC,WAAW,CAAC;IAE3E,IAAI,CAACC,IAAI,GAAGH,OAAO,CAACG,IAAI;IACxB,IAAI,CAACC,iBAAiB,GAAG,CAAC,IAAI,CAACR,KAAK,EAAE,IAAI,CAACC,OAAO,CAACI,UAAU,CAACC,WAAW,EAAE,IAAI,CAACJ,MAAM,CAAC;EACxF;EAEA,OAAOL,WAAWA,CAAA;IACjB,OAAOY,MAAM,CAACC,MAAM,CAAChB,aAAa,CAACG,WAAW,EAAE,EAAE;MACjDU,IAAI,EAAE,KAAK;MACXJ,MAAM,EAAE;KACR,CAAC;EACH;EAEA;;;;;;;;;EASA,IAAII,IAAIA,CAAA;IACP,OAAO,IAAI,CAACP,KAAK,CAACO,IAAI;EACvB;EACA,IAAIA,IAAIA,CAACA,IAAa;IACrB,IAAI,CAACP,KAAK,CAACO,IAAI,GAAGA,IAAI;EACvB;EAEA;;;;;;;;;;EAUAI,KAAKA,CAAA,EAA0C;IAC9C,IAAI,CAACX,KAAK,CAACY,UAAU,EAAE;IAAC,SAAAC,IAAA,GAAAf,SAAA,CAAAgB,MAAA,EADhBC,IAAsC,OAAAC,KAAA,CAAAH,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;MAAtCF,IAAsC,CAAAE,IAAA,IAAAnB,SAAA,CAAAmB,IAAA;IAAA;IAE9CF,IAAI,CAACG,OAAO,CAAC,IAAI,CAAClB,KAAK,CAAC;IACxBe,IAAI,CAACI,IAAI,CAAC,IAAI,CAACjB,MAAM,CAAC;IACtBT,aAAa,CAAC,GAAGsB,IAAI,CAAC;IACtB,OAAO,IAAI;EACZ;EAEA;;;;;EAKA,IAAIK,eAAeA,CAAA;IAClB,OAAO,IAAI,CAACnB,OAAO,CAACI,UAAU,CAACC,WAAW,CAACc,eAAe;EAC3D;EAEA;;;EAGAC,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAAClB,MAAM,CAACkB,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ;;AAGD;AACA;AACA;AAEA9B,aAAa,CAACU,OAAO,IAAG;EACvBA,OAAO,CAACK,WAAW,GAAG,IAAIX,WAAW,CAAC;IAAEM;EAAO,CAAE,CAAC;AACnD,CAAC,CAAC;AAEFX,cAAc,CAACW,OAAO,IAAG;EACxBA,OAAO,CAACK,WAAW,CAACe,OAAO,EAAE;AAC9B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}