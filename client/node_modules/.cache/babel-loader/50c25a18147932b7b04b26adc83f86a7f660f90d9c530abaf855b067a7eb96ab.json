{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nexport class Phaser extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n    this.name = \"Phaser\";\n    const options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n    this._lfoL = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._octaves = options.octaves;\n    this.Q = new Signal({\n      context: this.context,\n      value: options.Q,\n      units: \"positive\"\n    });\n    this._filtersL = this._makeFilters(options.stages, this._lfoL);\n    this._filtersR = this._makeFilters(options.stages, this._lfoR);\n    this.frequency = this._lfoL.frequency;\n    this.frequency.value = options.frequency;\n    // connect them up\n    this.connectEffectLeft(...this._filtersL);\n    this.connectEffectRight(...this._filtersR);\n    // control the frequency with one LFO\n    this._lfoL.frequency.connect(this._lfoR.frequency);\n    // set the options\n    this.baseFrequency = options.baseFrequency;\n    this.octaves = options.octaves;\n    // start the lfo\n    this._lfoL.start();\n    this._lfoR.start();\n    readOnly(this, [\"frequency\", \"Q\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 0.5,\n      octaves: 3,\n      stages: 10,\n      Q: 10,\n      baseFrequency: 350\n    });\n  }\n  _makeFilters(stages, connectToFreq) {\n    const filters = [];\n    // make all the filters\n    for (let i = 0; i < stages; i++) {\n      const filter = this.context.createBiquadFilter();\n      filter.type = \"allpass\";\n      this.Q.connect(filter.Q);\n      connectToFreq.connect(filter.frequency);\n      filters.push(filter);\n    }\n    return filters;\n  }\n  /**\n   * The number of octaves the phase goes above the baseFrequency\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(octaves) {\n    this._octaves = octaves;\n    const max = this._baseFrequency * Math.pow(2, octaves);\n    this._lfoL.max = max;\n    this._lfoR.max = max;\n  }\n  /**\n   * The the base frequency of the filters.\n   */\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n  set baseFrequency(freq) {\n    this._baseFrequency = this.toFrequency(freq);\n    this._lfoL.min = this._baseFrequency;\n    this._lfoR.min = this._baseFrequency;\n    this.octaves = this._octaves;\n  }\n  dispose() {\n    super.dispose();\n    this.Q.dispose();\n    this._lfoL.dispose();\n    this._lfoR.dispose();\n    this._filtersL.forEach(f => f.disconnect());\n    this._filtersR.forEach(f => f.disconnect());\n    this.frequency.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["StereoEffect","optionsFromArguments","LFO","Signal","readOnly","Phaser","constructor","getDefaults","arguments","name","options","_lfoL","context","frequency","min","max","_lfoR","phase","_baseFrequency","toFrequency","baseFrequency","_octaves","octaves","Q","value","units","_filtersL","_makeFilters","stages","_filtersR","connectEffectLeft","connectEffectRight","connect","start","Object","assign","connectToFreq","filters","i","filter","createBiquadFilter","type","push","Math","pow","freq","dispose","forEach","f","disconnect"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/effect/Phaser.ts"],"sourcesContent":["import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, Hertz, Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PhaserOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\toctaves: Positive;\n\tstages: Positive;\n\tQ: Positive;\n\tbaseFrequency: Frequency;\n}\n\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nexport class Phaser extends StereoEffect<PhaserOptions> {\n\n\treadonly name: string = \"Phaser\";\n\n\t/**\n\t * the lfo which controls the frequency on the left side\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * the lfo which controls the frequency on the right side\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * the base modulation frequency\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * the octaves of the phasing\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * The quality factor of the filters\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersL: BiquadFilterNode[];\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersR: BiquadFilterNode[];\n\n\t/**\n\t * the frequency of the effect\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The speed of the phasing.\n\t * @param octaves The octaves of the effect.\n\t * @param baseFrequency The base frequency of the filters.\n\t */\n\tconstructor(frequency?: Frequency, octaves?: Positive, baseFrequency?: Frequency);\n\tconstructor(options?: Partial<PhaserOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n\t\tconst options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.Q,\n\t\t\tunits: \"positive\",\n\t\t});\n\t\tthis._filtersL = this._makeFilters(options.stages, this._lfoL);\n\t\tthis._filtersR = this._makeFilters(options.stages, this._lfoR);\n\n\t\tthis.frequency = this._lfoL.frequency;\n\t\tthis.frequency.value = options.frequency;\n\n\t\t// connect them up\n\t\tthis.connectEffectLeft(...this._filtersL);\n\t\tthis.connectEffectRight(...this._filtersR);\n\t\t// control the frequency with one LFO\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t// set the options\n\t\tthis.baseFrequency = options.baseFrequency;\n\t\tthis.octaves = options.octaves;\n\t\t// start the lfo\n\t\tthis._lfoL.start();\n\t\tthis._lfoR.start();\n\t\treadOnly(this, [\"frequency\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): PhaserOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 0.5,\n\t\t\toctaves: 3,\n\t\t\tstages: 10,\n\t\t\tQ: 10,\n\t\t\tbaseFrequency: 350,\n\t\t});\n\t}\n\n\tprivate _makeFilters(stages: number, connectToFreq: LFO): BiquadFilterNode[] {\n\t\tconst filters: BiquadFilterNode[] = [];\n\t\t// make all the filters\n\t\tfor (let i = 0; i < stages; i++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = \"allpass\";\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tconnectToFreq.connect(filter.frequency);\n\t\t\tfilters.push(filter);\n\t\t}\n\t\treturn filters;\n\t}\n\n\t/**\n\t * The number of octaves the phase goes above the baseFrequency\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tconst max = this._baseFrequency * Math.pow(2, octaves);\n\t\tthis._lfoL.max = max;\n\t\tthis._lfoR.max = max;\n\t}\n\n\t/**\n\t * The the base frequency of the filters.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._baseFrequency = this.toFrequency(freq);\n\t\tthis._lfoL.min = this._baseFrequency;\n\t\tthis._lfoR.min = this._baseFrequency;\n\t\tthis.octaves = this._octaves;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.Q.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._filtersL.forEach(f => f.disconnect());\n\t\tthis._filtersR.forEach(f => f.disconnect());\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}