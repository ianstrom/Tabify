{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\nimport { assert } from \"../../core/util/Debug\";\nimport { range, timeRange } from \"../../core/util/Decorator\";\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst env = new Tone.Envelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 0.5,\n * \t\trelease: 0.8,\n * \t}).toDestination();\n * \tenv.triggerAttackRelease(0.5);\n * }, 1.5, 1);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"Envelope\";\n    /**\n     * the signal which is output.\n     */\n    this._sig = new Signal({\n      context: this.context,\n      value: 0\n    });\n    /**\n     * The output signal of the envelope\n     */\n    this.output = this._sig;\n    /**\n     * Envelope has no input\n     */\n    this.input = undefined;\n    const options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    this.attack = options.attack;\n    this.decay = options.decay;\n    this.sustain = options.sustain;\n    this.release = options.release;\n    this.attackCurve = options.attackCurve;\n    this.releaseCurve = options.releaseCurve;\n    this.decayCurve = options.decayCurve;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      attack: 0.01,\n      attackCurve: \"linear\",\n      decay: 0.1,\n      decayCurve: \"exponential\",\n      release: 1,\n      releaseCurve: \"exponential\",\n      sustain: 0.5\n    });\n  }\n  /**\n   * Read the current value of the envelope. Useful for\n   * synchronizing visual output to the envelope.\n   */\n  get value() {\n    return this.getValueAtTime(this.now());\n  }\n  /**\n   * Get the curve\n   * @param  curve\n   * @param  direction  In/Out\n   * @return The curve name\n   */\n  _getCurve(curve, direction) {\n    if (isString(curve)) {\n      return curve;\n    } else {\n      // look up the name in the curves array\n      let curveName;\n      for (curveName in EnvelopeCurves) {\n        if (EnvelopeCurves[curveName][direction] === curve) {\n          return curveName;\n        }\n      }\n      // return the custom curve\n      return curve;\n    }\n  }\n  /**\n   * Assign a the curve to the given name using the direction\n   * @param  name\n   * @param  direction In/Out\n   * @param  curve\n   */\n  _setCurve(name, direction, curve) {\n    // check if it's a valid type\n    if (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n      const curveDef = EnvelopeCurves[curve];\n      if (isObject(curveDef)) {\n        if (name !== \"_decayCurve\") {\n          this[name] = curveDef[direction];\n        }\n      } else {\n        this[name] = curveDef;\n      }\n    } else if (isArray(curve) && name !== \"_decayCurve\") {\n      this[name] = curve;\n    } else {\n      throw new Error(\"Envelope: invalid curve: \" + curve);\n    }\n  }\n  /**\n   * The shape of the attack.\n   * Can be any of these strings:\n   * * \"linear\"\n   * * \"exponential\"\n   * * \"sine\"\n   * * \"cosine\"\n   * * \"bounce\"\n   * * \"ripple\"\n   * * \"step\"\n   *\n   * Can also be an array which describes the curve. Values\n   * in the array are evenly subdivided and linearly\n   * interpolated over the duration of the attack.\n   * @example\n   * return Tone.Offline(() => {\n   * \tconst env = new Tone.Envelope(0.4).toDestination();\n   * \tenv.attackCurve = \"linear\";\n   * \tenv.triggerAttack();\n   * }, 1, 1);\n   */\n  get attackCurve() {\n    return this._getCurve(this._attackCurve, \"In\");\n  }\n  set attackCurve(curve) {\n    this._setCurve(\"_attackCurve\", \"In\", curve);\n  }\n  /**\n   * The shape of the release. See the attack curve types.\n   * @example\n   * return Tone.Offline(() => {\n   * \tconst env = new Tone.Envelope({\n   * \t\trelease: 0.8\n   * \t}).toDestination();\n   * \tenv.triggerAttack();\n   * \t// release curve could also be defined by an array\n   * \tenv.releaseCurve = [1, 0.3, 0.4, 0.2, 0.7, 0];\n   * \tenv.triggerRelease(0.2);\n   * }, 1, 1);\n   */\n  get releaseCurve() {\n    return this._getCurve(this._releaseCurve, \"Out\");\n  }\n  set releaseCurve(curve) {\n    this._setCurve(\"_releaseCurve\", \"Out\", curve);\n  }\n  /**\n   * The shape of the decay either \"linear\" or \"exponential\"\n   * @example\n   * return Tone.Offline(() => {\n   * \tconst env = new Tone.Envelope({\n   * \t\tsustain: 0.1,\n   * \t\tdecay: 0.5\n   * \t}).toDestination();\n   * \tenv.decayCurve = \"linear\";\n   * \tenv.triggerAttack();\n   * }, 1, 1);\n   */\n  get decayCurve() {\n    return this._decayCurve;\n  }\n  set decayCurve(curve) {\n    assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n    this._decayCurve = curve;\n  }\n  /**\n   * Trigger the attack/decay portion of the ADSR envelope.\n   * @param  time When the attack should start.\n   * @param velocity The velocity of the envelope scales the vales.\n   *                             number between 0-1\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator().connect(env).start();\n   * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n   * env.triggerAttack(\"+0.5\", 0.2);\n   */\n  triggerAttack(time) {\n    let velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.log(\"triggerAttack\", time, velocity);\n    time = this.toSeconds(time);\n    const originalAttack = this.toSeconds(this.attack);\n    let attack = originalAttack;\n    const decay = this.toSeconds(this.decay);\n    // check if it's not a complete attack\n    const currentValue = this.getValueAtTime(time);\n    if (currentValue > 0) {\n      // subtract the current value from the attack time\n      const attackRate = 1 / attack;\n      const remainingDistance = 1 - currentValue;\n      // the attack is now the remaining time\n      attack = remainingDistance / attackRate;\n    }\n    // attack\n    if (attack < this.sampleTime) {\n      this._sig.cancelScheduledValues(time);\n      // case where the attack time is 0 should set instantly\n      this._sig.setValueAtTime(velocity, time);\n    } else if (this._attackCurve === \"linear\") {\n      this._sig.linearRampTo(velocity, attack, time);\n    } else if (this._attackCurve === \"exponential\") {\n      this._sig.targetRampTo(velocity, attack, time);\n    } else {\n      this._sig.cancelAndHoldAtTime(time);\n      let curve = this._attackCurve;\n      // find the starting position in the curve\n      for (let i = 1; i < curve.length; i++) {\n        // the starting index is between the two values\n        if (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n          curve = this._attackCurve.slice(i);\n          // the first index is the current value\n          curve[0] = currentValue;\n          break;\n        }\n      }\n      this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n    }\n    // decay\n    if (decay && this.sustain < 1) {\n      const decayValue = velocity * this.sustain;\n      const decayStart = time + attack;\n      this.log(\"decay\", decayStart);\n      if (this._decayCurve === \"linear\") {\n        this._sig.linearRampToValueAtTime(decayValue, decay + decayStart);\n      } else {\n        this._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n      }\n    }\n    return this;\n  }\n  /**\n   * Triggers the release of the envelope.\n   * @param  time When the release portion of the envelope should start.\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator({\n   * \ttype: \"sawtooth\"\n   * }).connect(env).start();\n   * env.triggerAttack();\n   * // trigger the release half a second after the attack\n   * env.triggerRelease(\"+0.5\");\n   */\n  triggerRelease(time) {\n    this.log(\"triggerRelease\", time);\n    time = this.toSeconds(time);\n    const currentValue = this.getValueAtTime(time);\n    if (currentValue > 0) {\n      const release = this.toSeconds(this.release);\n      if (release < this.sampleTime) {\n        this._sig.setValueAtTime(0, time);\n      } else if (this._releaseCurve === \"linear\") {\n        this._sig.linearRampTo(0, release, time);\n      } else if (this._releaseCurve === \"exponential\") {\n        this._sig.targetRampTo(0, release, time);\n      } else {\n        assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n        this._sig.cancelAndHoldAtTime(time);\n        this._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n      }\n    }\n    return this;\n  }\n  /**\n   * Get the scheduled value at the given time. This will\n   * return the unconverted (raw) value.\n   * @example\n   * const env = new Tone.Envelope(0.5, 1, 0.4, 2);\n   * env.triggerAttackRelease(2);\n   * setInterval(() => console.log(env.getValueAtTime(Tone.now())), 100);\n   */\n  getValueAtTime(time) {\n    return this._sig.getValueAtTime(time);\n  }\n  /**\n   * triggerAttackRelease is shorthand for triggerAttack, then waiting\n   * some duration, then triggerRelease.\n   * @param duration The duration of the sustain.\n   * @param time When the attack should be triggered.\n   * @param velocity The velocity of the envelope.\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator().connect(env).start();\n   * // trigger the release 0.5 seconds after the attack\n   * env.triggerAttackRelease(0.5);\n   */\n  triggerAttackRelease(duration, time) {\n    let velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    time = this.toSeconds(time);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + this.toSeconds(duration));\n    return this;\n  }\n  /**\n   * Cancels all scheduled envelope changes after the given time.\n   */\n  cancel(after) {\n    this._sig.cancelScheduledValues(this.toSeconds(after));\n    return this;\n  }\n  /**\n   * Connect the envelope to a destination node.\n   */\n  connect(destination) {\n    let outputNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let inputNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    connectSignal(this, destination, outputNumber, inputNumber);\n    return this;\n  }\n  /**\n   * Render the envelope curve to an array of the given length.\n   * Good for visualizing the envelope curve. Rescales the duration of the\n   * envelope to fit the length.\n   */\n  asArray() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n    return __awaiter(this, void 0, void 0, function* () {\n      const duration = length / this.context.sampleRate;\n      const context = new OfflineContext(1, duration, this.context.sampleRate);\n      // normalize the ADSR for the given duration with 20% sustain time\n      const attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n      const envelopeDuration = attackPortion + this.toSeconds(this.release);\n      const sustainTime = envelopeDuration * 0.1;\n      const totalDuration = envelopeDuration + sustainTime;\n      // @ts-ignore\n      const clone = new this.constructor(Object.assign(this.get(), {\n        attack: duration * this.toSeconds(this.attack) / totalDuration,\n        decay: duration * this.toSeconds(this.decay) / totalDuration,\n        release: duration * this.toSeconds(this.release) / totalDuration,\n        context\n      }));\n      clone._sig.toDestination();\n      clone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n      const buffer = yield context.render();\n      return buffer.getChannelData(0);\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._sig.dispose();\n    return this;\n  }\n}\n__decorate([timeRange(0)], Envelope.prototype, \"attack\", void 0);\n__decorate([timeRange(0)], Envelope.prototype, \"decay\", void 0);\n__decorate([range(0, 1)], Envelope.prototype, \"sustain\", void 0);\n__decorate([timeRange(0)], Envelope.prototype, \"release\", void 0);\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves = (() => {\n  const curveLen = 128;\n  let i;\n  let k;\n  // cosine curve\n  const cosineCurve = [];\n  for (i = 0; i < curveLen; i++) {\n    cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n  }\n  // ripple curve\n  const rippleCurve = [];\n  const rippleCurveFreq = 6.4;\n  for (i = 0; i < curveLen - 1; i++) {\n    k = i / (curveLen - 1);\n    const sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n    rippleCurve[i] = sineWave / 10 + k * 0.83;\n  }\n  rippleCurve[curveLen - 1] = 1;\n  // stairs curve\n  const stairsCurve = [];\n  const steps = 5;\n  for (i = 0; i < curveLen; i++) {\n    stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n  }\n  // in-out easing curve\n  const sineCurve = [];\n  for (i = 0; i < curveLen; i++) {\n    k = i / (curveLen - 1);\n    sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n  }\n  // a bounce curve\n  const bounceCurve = [];\n  for (i = 0; i < curveLen; i++) {\n    k = i / (curveLen - 1);\n    const freq = Math.pow(k, 3) * 4 + 0.2;\n    const val = Math.cos(freq * Math.PI * 2 * k);\n    bounceCurve[i] = Math.abs(val * (1 - k));\n  }\n  /**\n   * Invert a value curve to make it work for the release\n   */\n  function invertCurve(curve) {\n    const out = new Array(curve.length);\n    for (let j = 0; j < curve.length; j++) {\n      out[j] = 1 - curve[j];\n    }\n    return out;\n  }\n  /**\n   * reverse the curve\n   */\n  function reverseCurve(curve) {\n    return curve.slice(0).reverse();\n  }\n  /**\n   * attack and release curve arrays\n   */\n  return {\n    bounce: {\n      In: invertCurve(bounceCurve),\n      Out: bounceCurve\n    },\n    cosine: {\n      In: cosineCurve,\n      Out: reverseCurve(cosineCurve)\n    },\n    exponential: \"exponential\",\n    linear: \"linear\",\n    ripple: {\n      In: rippleCurve,\n      Out: invertCurve(rippleCurve)\n    },\n    sine: {\n      In: sineCurve,\n      Out: invertCurve(sineCurve)\n    },\n    step: {\n      In: stairsCurve,\n      Out: invertCurve(stairsCurve)\n    }\n  };\n})();","map":{"version":3,"names":["ToneAudioNode","optionsFromArguments","isArray","isObject","isString","connectSignal","Signal","OfflineContext","assert","range","timeRange","Envelope","constructor","getDefaults","arguments","name","_sig","context","value","output","input","undefined","options","attack","decay","sustain","release","attackCurve","releaseCurve","decayCurve","Object","assign","getValueAtTime","now","_getCurve","curve","direction","curveName","EnvelopeCurves","_setCurve","Reflect","has","curveDef","Error","_attackCurve","_releaseCurve","_decayCurve","some","c","triggerAttack","time","velocity","length","log","toSeconds","originalAttack","currentValue","attackRate","remainingDistance","sampleTime","cancelScheduledValues","setValueAtTime","linearRampTo","targetRampTo","cancelAndHoldAtTime","i","slice","setValueCurveAtTime","decayValue","decayStart","linearRampToValueAtTime","exponentialApproachValueAtTime","triggerRelease","triggerAttackRelease","duration","cancel","after","connect","destination","outputNumber","inputNumber","asArray","sampleRate","attackPortion","envelopeDuration","sustainTime","totalDuration","clone","get","toDestination","buffer","render","getChannelData","dispose","__decorate","curveLen","k","cosineCurve","Math","sin","PI","rippleCurve","rippleCurveFreq","sineWave","stairsCurve","steps","ceil","sineCurve","cos","bounceCurve","freq","pow","val","abs","invertCurve","out","Array","j","reverseCurve","reverse","bounce","In","Out","cosine","exponential","linear","ripple","sine","step"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/component/envelope/Envelope.ts"],"sourcesContent":["import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\nimport { assert } from \"../../core/util/Debug\";\nimport { range, timeRange } from \"../../core/util/Decorator\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst env = new Tone.Envelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 0.5,\n * \t\trelease: 0.8,\n * \t}).toDestination();\n * \tenv.triggerAttackRelease(0.5);\n * }, 1.5, 1);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\t@timeRange(0)\n\tattack: Time;\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\t@timeRange(0)\n\tdecay: Time;\n\n\t/**\n\t * The sustain value is the value\n\t * which the envelope rests at after triggerAttack is\n\t * called, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\t@range(0, 1)\n\tsustain: NormalRange;\n\n\t/**\n\t * After triggerRelease is called, the envelope's\n\t * value will fall to it's miminum value over the\n\t * duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t * @min 0\n\t * @max 5\n\t */\n\t@timeRange(0)\n\trelease: Time;\n\n\t/**\n\t * The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * the signal which is output.\n\t */\n\tprotected _sig: Signal<\"normalRange\"> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from\n\t *                        0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.01,\n\t\t\tattackCurve: \"linear\" as EnvelopeCurveName,\n\t\t\tdecay: 0.1,\n\t\t\tdecayCurve: \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease: 1,\n\t\t\treleaseCurve: \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * synchronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Get the curve\n\t * @param  curve\n\t * @param  direction  In/Out\n\t * @return The curve name\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t * Assign a the curve to the given name using the direction\n\t * @param  name\n\t * @param  direction In/Out\n\t * @param  curve\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst env = new Tone.Envelope(0.4).toDestination();\n\t * \tenv.attackCurve = \"linear\";\n\t * \tenv.triggerAttack();\n\t * }, 1, 1);\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst env = new Tone.Envelope({\n\t * \t\trelease: 0.8\n\t * \t}).toDestination();\n\t * \tenv.triggerAttack();\n\t * \t// release curve could also be defined by an array\n\t * \tenv.releaseCurve = [1, 0.3, 0.4, 0.2, 0.7, 0];\n\t * \tenv.triggerRelease(0.2);\n\t * }, 1, 1);\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst env = new Tone.Envelope({\n\t * \t\tsustain: 0.1,\n\t * \t\tdecay: 0.5\n\t * \t}).toDestination();\n\t * \tenv.decayCurve = \"linear\";\n\t * \tenv.triggerAttack();\n\t * }, 1, 1);\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tassert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                             number between 0-1\n\t * @example\n\t * const env = new Tone.AmplitudeEnvelope().toDestination();\n\t * const osc = new Tone.Oscillator().connect(env).start();\n\t * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack < this.sampleTime) {\n\t\t\tthis._sig.cancelScheduledValues(time);\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay && this.sustain < 1) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampToValueAtTime(decayValue, decay + decayStart);\n\t\t\t} else {\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Triggers the release of the envelope.\n\t * @param  time When the release portion of the envelope should start.\n\t * @example\n\t * const env = new Tone.AmplitudeEnvelope().toDestination();\n\t * const osc = new Tone.Oscillator({\n\t * \ttype: \"sawtooth\"\n\t * }).connect(env).start();\n\t * env.triggerAttack();\n\t * // trigger the release half a second after the attack\n\t * env.triggerRelease(\"+0.5\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (release < this.sampleTime) {\n\t\t\t\tthis._sig.setValueAtTime(0, time);\n\t\t\t} else if (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tassert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the scheduled value at the given time. This will\n\t * return the unconverted (raw) value.\n\t * @example\n\t * const env = new Tone.Envelope(0.5, 1, 0.4, 2);\n\t * env.triggerAttackRelease(2);\n\t * setInterval(() => console.log(env.getValueAtTime(Tone.now())), 100);\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t * triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t * some duration, then triggerRelease.\n\t * @param duration The duration of the sustain.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity of the envelope.\n\t * @example\n\t * const env = new Tone.AmplitudeEnvelope().toDestination();\n\t * const osc = new Tone.Oscillator().connect(env).start();\n\t * // trigger the release 0.5 seconds after the attack\n\t * env.triggerAttackRelease(0.5);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Render the envelope curve to an array of the given length. \n\t * Good for visualizing the envelope curve. Rescales the duration of the\n\t * envelope to fit the length.\n\t */\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\tconst duration = length / this.context.sampleRate;\n\t\tconst context = new OfflineContext(1, duration, this.context.sampleRate);\n\t\t// normalize the ADSR for the given duration with 20% sustain time\n\t\tconst attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n\t\tconst envelopeDuration = attackPortion + this.toSeconds(this.release);\n\t\tconst sustainTime = envelopeDuration * 0.1;\n\t\tconst totalDuration = envelopeDuration + sustainTime;\n\t\t// @ts-ignore\n\t\tconst clone = new this.constructor(Object.assign(this.get(), {\n\t\t\tattack: duration * this.toSeconds(this.attack) / totalDuration,\n\t\t\tdecay: duration * this.toSeconds(this.decay) / totalDuration,\n\t\t\trelease: duration * this.toSeconds(this.release) / totalDuration,\n\t\t\tcontext\n\t\t})) as Envelope;\n\t\tclone._sig.toDestination();\n\t\tclone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n\t\tconst buffer = await context.render();\n\t\treturn buffer.getChannelData(0);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName = keyof EnvelopeCurveMap;\n\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t * Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t * attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce: {\n\t\t\tIn: invertCurve(bounceCurve),\n\t\t\tOut: bounceCurve,\n\t\t},\n\t\tcosine: {\n\t\t\tIn: cosineCurve,\n\t\t\tOut: reverseCurve(cosineCurve),\n\t\t},\n\t\texponential: \"exponential\" as \"exponential\",\n\t\tlinear: \"linear\" as \"linear\",\n\t\tripple: {\n\t\t\tIn: rippleCurve,\n\t\t\tOut: invertCurve(rippleCurve),\n\t\t},\n\t\tsine: {\n\t\t\tIn: sineCurve,\n\t\t\tOut: invertCurve(sineCurve),\n\t\t},\n\t\tstep: {\n\t\t\tIn: stairsCurve,\n\t\t\tOut: invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}