{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class PannerNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      super(context, false, nativePannerNode, pannerNodeRenderer);\n      this._nativePannerNode = nativePannerNode;\n      // Bug #74: Safari does not export the correct values for maxValue and minValue.\n      this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(this, 1);\n    }\n    get coneInnerAngle() {\n      return this._nativePannerNode.coneInnerAngle;\n    }\n    set coneInnerAngle(value) {\n      this._nativePannerNode.coneInnerAngle = value;\n    }\n    get coneOuterAngle() {\n      return this._nativePannerNode.coneOuterAngle;\n    }\n    set coneOuterAngle(value) {\n      this._nativePannerNode.coneOuterAngle = value;\n    }\n    get coneOuterGain() {\n      return this._nativePannerNode.coneOuterGain;\n    }\n    set coneOuterGain(value) {\n      this._nativePannerNode.coneOuterGain = value;\n    }\n    get distanceModel() {\n      return this._nativePannerNode.distanceModel;\n    }\n    set distanceModel(value) {\n      this._nativePannerNode.distanceModel = value;\n    }\n    get maxDistance() {\n      return this._nativePannerNode.maxDistance;\n    }\n    set maxDistance(value) {\n      this._nativePannerNode.maxDistance = value;\n    }\n    get orientationX() {\n      return this._orientationX;\n    }\n    get orientationY() {\n      return this._orientationY;\n    }\n    get orientationZ() {\n      return this._orientationZ;\n    }\n    get panningModel() {\n      return this._nativePannerNode.panningModel;\n    }\n    set panningModel(value) {\n      this._nativePannerNode.panningModel = value;\n    }\n    get positionX() {\n      return this._positionX;\n    }\n    get positionY() {\n      return this._positionY;\n    }\n    get positionZ() {\n      return this._positionZ;\n    }\n    get refDistance() {\n      return this._nativePannerNode.refDistance;\n    }\n    set refDistance(value) {\n      this._nativePannerNode.refDistance = value;\n    }\n    get rolloffFactor() {\n      return this._nativePannerNode.rolloffFactor;\n    }\n    set rolloffFactor(value) {\n      this._nativePannerNode.rolloffFactor = value;\n    }\n  };\n};","map":{"version":3,"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","createPannerNodeConstructor","audioNodeConstructor","createAudioParam","createNativePannerNode","createPannerNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","PannerNode","constructor","context","options","nativeContext","mergedOptions","nativePannerNode","isOffline","pannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","value"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/panner-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IPannerNode, IPannerOptions } from '../interfaces';\nimport {\n    TAudioNodeRenderer,\n    TContext,\n    TDistanceModelType,\n    TNativePannerNode,\n    TPannerNodeConstructorFactory,\n    TPanningModelType\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n} as const;\n\nexport const createPannerNodeConstructor: TPannerNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativePannerNode,\n    createPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class PannerNode<T extends TContext> extends audioNodeConstructor<T> implements IPannerNode<T> {\n        private _nativePannerNode: TNativePannerNode;\n\n        private _orientationX: IAudioParam;\n\n        private _orientationY: IAudioParam;\n\n        private _orientationZ: IAudioParam;\n\n        private _positionX: IAudioParam;\n\n        private _positionY: IAudioParam;\n\n        private _positionZ: IAudioParam;\n\n        constructor(context: T, options?: Partial<IPannerOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createPannerNodeRenderer() : null);\n\n            super(context, false, nativePannerNode, pannerNodeRenderer);\n\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._orientationX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get coneInnerAngle(): number {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n\n        get coneOuterAngle(): number {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n\n        get coneOuterGain(): number {\n            return this._nativePannerNode.coneOuterGain;\n        }\n\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n\n        get distanceModel(): TDistanceModelType {\n            return this._nativePannerNode.distanceModel;\n        }\n\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n\n        get maxDistance(): number {\n            return this._nativePannerNode.maxDistance;\n        }\n\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n\n        get orientationX(): IAudioParam {\n            return this._orientationX;\n        }\n\n        get orientationY(): IAudioParam {\n            return this._orientationY;\n        }\n\n        get orientationZ(): IAudioParam {\n            return this._orientationZ;\n        }\n\n        get panningModel(): TPanningModelType {\n            return this._nativePannerNode.panningModel;\n        }\n\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n\n        get positionX(): IAudioParam {\n            return this._positionX;\n        }\n\n        get positionY(): IAudioParam {\n            return this._positionY;\n        }\n\n        get positionZ(): IAudioParam {\n            return this._positionZ;\n        }\n\n        get refDistance(): number {\n            return this._nativePannerNode.refDistance;\n        }\n\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n\n        get rolloffFactor(): number {\n            return this._nativePannerNode.rolloffFactor;\n        }\n\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}