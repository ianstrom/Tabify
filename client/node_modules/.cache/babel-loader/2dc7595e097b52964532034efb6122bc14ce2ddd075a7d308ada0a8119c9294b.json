{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport class DummyContext extends BaseContext {\n  constructor() {\n    super(...arguments);\n    this.lookAhead = 0;\n    this.latencyHint = 0;\n    this.isOffline = false;\n  }\n  //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n  createAnalyser() {\n    return {};\n  }\n  createOscillator() {\n    return {};\n  }\n  createBufferSource() {\n    return {};\n  }\n  createBiquadFilter() {\n    return {};\n  }\n  createBuffer(_numberOfChannels, _length, _sampleRate) {\n    return {};\n  }\n  createChannelMerger(_numberOfInputs) {\n    return {};\n  }\n  createChannelSplitter(_numberOfOutputs) {\n    return {};\n  }\n  createConstantSource() {\n    return {};\n  }\n  createConvolver() {\n    return {};\n  }\n  createDelay(_maxDelayTime) {\n    return {};\n  }\n  createDynamicsCompressor() {\n    return {};\n  }\n  createGain() {\n    return {};\n  }\n  createIIRFilter(_feedForward, _feedback) {\n    return {};\n  }\n  createPanner() {\n    return {};\n  }\n  createPeriodicWave(_real, _imag, _constraints) {\n    return {};\n  }\n  createStereoPanner() {\n    return {};\n  }\n  createWaveShaper() {\n    return {};\n  }\n  createMediaStreamSource(_stream) {\n    return {};\n  }\n  createMediaElementSource(_element) {\n    return {};\n  }\n  createMediaStreamDestination() {\n    return {};\n  }\n  decodeAudioData(_audioData) {\n    return Promise.resolve({});\n  }\n  //---------------------------\n  // TONE AUDIO CONTEXT METHODS\n  //---------------------------\n  createAudioWorkletNode(_name, _options) {\n    return {};\n  }\n  get rawContext() {\n    return {};\n  }\n  addAudioWorkletModule(_url, _name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.resolve();\n    });\n  }\n  resume() {\n    return Promise.resolve();\n  }\n  setTimeout(_fn, _timeout) {\n    return 0;\n  }\n  clearTimeout(_id) {\n    return this;\n  }\n  setInterval(_fn, _interval) {\n    return 0;\n  }\n  clearInterval(_id) {\n    return this;\n  }\n  getConstant(_val) {\n    return {};\n  }\n  get currentTime() {\n    return 0;\n  }\n  get state() {\n    return {};\n  }\n  get sampleRate() {\n    return 0;\n  }\n  get listener() {\n    return {};\n  }\n  get transport() {\n    return {};\n  }\n  get draw() {\n    return {};\n  }\n  set draw(_d) {}\n  get destination() {\n    return {};\n  }\n  set destination(_d) {}\n  now() {\n    return 0;\n  }\n  immediate() {\n    return 0;\n  }\n}","map":{"version":3,"names":["BaseContext","DummyContext","constructor","lookAhead","latencyHint","isOffline","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createBuffer","_numberOfChannels","_length","_sampleRate","createChannelMerger","_numberOfInputs","createChannelSplitter","_numberOfOutputs","createConstantSource","createConvolver","createDelay","_maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","_feedForward","_feedback","createPanner","createPeriodicWave","_real","_imag","_constraints","createStereoPanner","createWaveShaper","createMediaStreamSource","_stream","createMediaElementSource","_element","createMediaStreamDestination","decodeAudioData","_audioData","Promise","resolve","createAudioWorkletNode","_name","_options","rawContext","addAudioWorkletModule","_url","resume","setTimeout","_fn","_timeout","clearTimeout","_id","setInterval","_interval","clearInterval","getConstant","_val","currentTime","state","sampleRate","listener","transport","draw","_d","destination","now","immediate"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/core/context/DummyContext.ts"],"sourcesContent":["import { BaseContext } from \"./BaseContext\";\nimport { Seconds } from \"../type/Units\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\n\nexport class DummyContext extends BaseContext {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn {} as AnalyserNode;\n\t}\n\n\tcreateOscillator(): OscillatorNode {\n\t\treturn {} as OscillatorNode;\n\t}\n\n\tcreateBufferSource() {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn {} as BiquadFilterNode;\n\t}\n\n\tcreateBuffer(\n\t\t_numberOfChannels: number,\n\t\t_length: number,\n\t\t_sampleRate: number\n\t): AudioBuffer {\n\t\treturn {} as AudioBuffer;\n\t}\n\n\tcreateChannelMerger(\n\t\t_numberOfInputs?: number | undefined\n\t): ChannelMergerNode {\n\t\treturn {} as ChannelMergerNode;\n\t}\n\n\tcreateChannelSplitter(\n\t\t_numberOfOutputs?: number | undefined\n\t): ChannelSplitterNode {\n\t\treturn {} as ChannelSplitterNode;\n\t}\n\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn {} as ConstantSourceNode;\n\t}\n\n\tcreateConvolver(): ConvolverNode {\n\t\treturn {} as ConvolverNode;\n\t}\n\n\tcreateDelay(_maxDelayTime?: number | undefined): DelayNode {\n\t\treturn {} as DelayNode;\n\t}\n\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn {} as DynamicsCompressorNode;\n\t}\n\n\tcreateGain(): GainNode {\n\t\treturn {} as GainNode;\n\t}\n\n\tcreateIIRFilter(\n\t\t_feedForward: number[] | Float32Array,\n\t\t_feedback: number[] | Float32Array\n\t): IIRFilterNode {\n\t\treturn {} as IIRFilterNode;\n\t}\n\n\tcreatePanner(): PannerNode {\n\t\treturn {} as PannerNode;\n\t}\n\n\tcreatePeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave {\n\t\treturn {} as PeriodicWave;\n\t}\n\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn {} as StereoPannerNode;\n\t}\n\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn {} as WaveShaperNode;\n\t}\n\n\tcreateMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode {\n\t\treturn {} as MediaStreamAudioSourceNode;\n\t}\n\n\tcreateMediaElementSource(\n\t\t_element: HTMLMediaElement\n\t): MediaElementAudioSourceNode {\n\t\treturn {} as MediaElementAudioSourceNode;\n\t}\n\n\tcreateMediaStreamDestination(): MediaStreamAudioDestinationNode {\n\t\treturn {} as MediaStreamAudioDestinationNode;\n\t}\n\n\tdecodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn Promise.resolve({} as AudioBuffer);\n\t}\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAudioWorkletNode(\n\t\t_name: string,\n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn {} as AudioWorkletNode;\n\t}\n\n\tget rawContext(): AnyAudioContext {\n\t\treturn {} as AnyAudioContext;\n\t}\n\n\tasync addAudioWorkletModule(_url: string, _name: string): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tlookAhead = 0;\n\n\tlatencyHint = 0;\n\n\tresume(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tsetTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearTimeout(_id: number): this {\n\t\treturn this;\n\t}\n\n\tsetInterval(_fn: (...args: any[]) => void, _interval: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearInterval(_id: number): this {\n\t\treturn this;\n\t}\n\n\tgetConstant(_val: number): AudioBufferSourceNode {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tget currentTime(): Seconds {\n\t\treturn 0;\n\t}\n\n\tget state(): AudioContextState {\n\t\treturn {} as AudioContextState;\n\t}\n\n\tget sampleRate(): number {\n\t\treturn 0;\n\t}\n\n\tget listener(): Listener {\n\t\treturn {} as Listener;\n\t}\n\n\tget transport(): Transport {\n\t\treturn {} as Transport;\n\t}\n\n\tget draw(): Draw {\n\t\treturn {} as Draw;\n\t}\n\tset draw(_d) {}\n\n\tget destination(): Destination {\n\t\treturn {} as Destination;\n\t}\n\tset destination(_d: Destination) {}\n\n\tnow() {\n\t\treturn 0;\n\t}\n\n\timmediate() {\n\t\treturn 0;\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}