{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n    const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeConvolverNode = getNativeAudioNode(proxy);\n      // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n      if (!nativeConvolverNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeConvolverNode.buffer,\n          channelCount: nativeConvolverNode.channelCount,\n          channelCountMode: nativeConvolverNode.channelCountMode,\n          channelInterpretation: nativeConvolverNode.channelInterpretation,\n          disableNormalization: !nativeConvolverNode.normalize\n        };\n        nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n      if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n      }\n      return nativeConvolverNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n        return createConvolverNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isNativeAudioNodeFaker","isOwnedByContext","createConvolverNodeRendererFactory","createNativeConvolverNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeConvolverNodes","WeakMap","createConvolverNode","proxy","nativeOfflineAudioContext","nativeConvolverNode","nativeConvolverNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","normalize","set","inputs","render","renderedNativeConvolverNode","get","undefined","Promise","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/convolver-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConvolverNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConvolverNodeRendererFactoryFactory, TNativeConvolverNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConvolverNodeRendererFactory: TConvolverNodeRendererFactoryFactory = (\n    createNativeConvolverNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConvolverNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConvolverNode>();\n\n        const createConvolverNode = async (proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode<T, TNativeConvolverNode>(proxy);\n\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            }\n\n            return nativeConvolverNode;\n        };\n\n        return {\n            render(proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeConvolverNode> {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,mCAAmC;AAC1E,SAASC,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,MAAMC,kCAAkC,GAAyCA,CACpFC,yBAAyB,EACzBC,kBAAkB,EAClBC,uBAAuB,KACvB;EACA,OAAO,MAAmE;IACtE,MAAMC,4BAA4B,GAAG,IAAIC,OAAO,EAAoD;IAEpG,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,KAAwB,EAAEC,yBAAqD,KAAI;MAClH,IAAIC,mBAAmB,GAAGP,kBAAkB,CAA0BK,KAAK,CAAC;MAE5E;MACA,MAAMG,mCAAmC,GAAGX,gBAAgB,CAACU,mBAAmB,EAAED,yBAAyB,CAAC;MAE5G,IAAI,CAACE,mCAAmC,EAAE;QACtC,MAAMC,OAAO,GAAG;UACZC,MAAM,EAAEH,mBAAmB,CAACG,MAAM;UAClCC,YAAY,EAAEJ,mBAAmB,CAACI,YAAY;UAC9CC,gBAAgB,EAAEL,mBAAmB,CAACK,gBAAgB;UACtDC,qBAAqB,EAAEN,mBAAmB,CAACM,qBAAqB;UAChEC,oBAAoB,EAAE,CAACP,mBAAmB,CAACQ;SAC9C;QAEDR,mBAAmB,GAAGR,yBAAyB,CAACO,yBAAyB,EAAEG,OAAO,CAAC;;MAGvFP,4BAA4B,CAACc,GAAG,CAACV,yBAAyB,EAAEC,mBAAmB,CAAC;MAEhF,IAAIX,sBAAsB,CAACW,mBAAmB,CAAC,EAAE;QAC7C,MAAMN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,mBAAmB,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;OACjG,MAAM;QACH,MAAMhB,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,mBAAmB,CAAC;;MAGxF,OAAOA,mBAAmB;IAC9B,CAAC;IAED,OAAO;MACHW,MAAMA,CAACb,KAAwB,EAAEC,yBAAqD;QAClF,MAAMa,2BAA2B,GAAGjB,4BAA4B,CAACkB,GAAG,CAACd,yBAAyB,CAAC;QAE/F,IAAIa,2BAA2B,KAAKE,SAAS,EAAE;UAC3C,OAAOC,OAAO,CAACC,OAAO,CAACJ,2BAA2B,CAAC;;QAGvD,OAAOf,mBAAmB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAChE;KACH;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}