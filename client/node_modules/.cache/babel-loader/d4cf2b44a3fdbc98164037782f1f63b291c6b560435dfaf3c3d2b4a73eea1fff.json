{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConstantSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeConstantSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n      const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeConstantSourceNode.channelCount,\n          channelCountMode: nativeConstantSourceNode.channelCountMode,\n          channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n          offset: nativeConstantSourceNode.offset.value\n        };\n        nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n        if (start !== null) {\n          nativeConstantSourceNode.start(start);\n        }\n        if (stop !== null) {\n          nativeConstantSourceNode.stop(stop);\n        }\n      }\n      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n      return nativeConstantSourceNode;\n    };\n    return {\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createConstantSourceNodeRendererFactory","connectAudioParam","createNativeConstantSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeConstantSourceNodes","WeakMap","start","stop","createConstantSourceNode","proxy","nativeOfflineAudioContext","nativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","offset","value","set","render","renderedNativeConstantSourceNode","get","undefined","Promise","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/constant-source-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConstantSourceNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConstantSourceNodeRendererFactoryFactory, TNativeConstantSourceNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConstantSourceNodeRendererFactory: TConstantSourceNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeConstantSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConstantSourceNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConstantSourceNode>();\n\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createConstantSourceNode = async (proxy: IConstantSourceNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode<T, TNativeConstantSourceNode>(proxy);\n\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            return nativeConstantSourceNode;\n        };\n\n        return {\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(\n                proxy: IConstantSourceNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeConstantSourceNode> {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,MAAMC,uCAAuC,GAA8CA,CAC9FC,iBAAiB,EACjBC,8BAA8B,EAC9BC,kBAAkB,EAClBC,gBAAgB,EAChBC,uBAAuB,KACvB;EACA,OAAO,MAAmE;IACtE,MAAMC,iCAAiC,GAAG,IAAIC,OAAO,EAAyD;IAE9G,IAAIC,KAAK,GAAkB,IAAI;IAC/B,IAAIC,IAAI,GAAkB,IAAI;IAE9B,MAAMC,wBAAwB,GAAG,MAAAA,CAAOC,KAA6B,EAAEC,yBAAqD,KAAI;MAC5H,IAAIC,wBAAwB,GAAGV,kBAAkB,CAA+BQ,KAAK,CAAC;MAEtF;;;;MAIA,MAAMG,wCAAwC,GAAGf,gBAAgB,CAACc,wBAAwB,EAAED,yBAAyB,CAAC;MAEtH,IAAI,CAACE,wCAAwC,EAAE;QAC3C,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,wBAAwB,CAACG,YAAY;UACnDC,gBAAgB,EAAEJ,wBAAwB,CAACI,gBAAgB;UAC3DC,qBAAqB,EAAEL,wBAAwB,CAACK,qBAAqB;UACrEC,MAAM,EAAEN,wBAAwB,CAACM,MAAM,CAACC;SAC3C;QAEDP,wBAAwB,GAAGX,8BAA8B,CAACU,yBAAyB,EAAEG,OAAO,CAAC;QAE7F,IAAIP,KAAK,KAAK,IAAI,EAAE;UAChBK,wBAAwB,CAACL,KAAK,CAACA,KAAK,CAAC;;QAGzC,IAAIC,IAAI,KAAK,IAAI,EAAE;UACfI,wBAAwB,CAACJ,IAAI,CAACA,IAAI,CAAC;;;MAI3CH,iCAAiC,CAACe,GAAG,CAACT,yBAAyB,EAAEC,wBAAwB,CAAC;MAE1F,IAAI,CAACC,wCAAwC,EAAE;QAC3C,MAAMV,gBAAgB,CAACQ,yBAAyB,EAAED,KAAK,CAACQ,MAAM,EAAEN,wBAAwB,CAACM,MAAM,CAAC;OACnG,MAAM;QACH,MAAMlB,iBAAiB,CAACW,yBAAyB,EAAED,KAAK,CAACQ,MAAM,EAAEN,wBAAwB,CAACM,MAAM,CAAC;;MAGrG,MAAMd,uBAAuB,CAACM,KAAK,EAAEC,yBAAyB,EAAEC,wBAAwB,CAAC;MAEzF,OAAOA,wBAAwB;IACnC,CAAC;IAED,OAAO;MACH,IAAIL,KAAKA,CAACY,KAAa;QACnBZ,KAAK,GAAGY,KAAK;MACjB,CAAC;MACD,IAAIX,IAAIA,CAACW,KAAa;QAClBX,IAAI,GAAGW,KAAK;MAChB,CAAC;MACDE,MAAMA,CACFX,KAA6B,EAC7BC,yBAAqD;QAErD,MAAMW,gCAAgC,GAAGjB,iCAAiC,CAACkB,GAAG,CAACZ,yBAAyB,CAAC;QAEzG,IAAIW,gCAAgC,KAAKE,SAAS,EAAE;UAChD,OAAOC,OAAO,CAACC,OAAO,CAACJ,gCAAgC,CAAC;;QAG5D,OAAOb,wBAAwB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACrE;KACH;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}