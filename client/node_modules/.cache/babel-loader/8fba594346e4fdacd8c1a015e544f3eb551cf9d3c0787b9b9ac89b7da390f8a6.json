{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth {\n  constructor() {\n    super(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n    this.name = \"MembraneSynth\";\n    /**\n     * Portamento is ignored in this synth. use pitch decay instead.\n     */\n    this.portamento = 0;\n    const options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n    this.pitchDecay = options.pitchDecay;\n    this.octaves = options.octaves;\n    readOnly(this, [\"oscillator\", \"envelope\"]);\n  }\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n      envelope: {\n        attack: 0.001,\n        attackCurve: \"exponential\",\n        decay: 0.4,\n        release: 1.4,\n        sustain: 0.01\n      },\n      octaves: 10,\n      oscillator: {\n        type: \"sine\"\n      },\n      pitchDecay: 0.05\n    });\n  }\n  setNote(note, time) {\n    const seconds = this.toSeconds(time);\n    const hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n    const maxNote = hertz * this.octaves;\n    this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n    this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    return this;\n  }\n}\n__decorate([range(0)], MembraneSynth.prototype, \"octaves\", void 0);\n__decorate([timeRange(0)], MembraneSynth.prototype, \"pitchDecay\", void 0);","map":{"version":3,"names":["FrequencyClass","deepMerge","optionsFromArguments","readOnly","Monophonic","Synth","range","timeRange","MembraneSynth","constructor","getDefaults","arguments","name","portamento","options","pitchDecay","octaves","envelope","attack","attackCurve","decay","release","sustain","oscillator","type","setNote","note","time","seconds","toSeconds","hertz","toFrequency","maxNote","frequency","setValueAtTime","exponentialRampToValueAtTime","dispose","__decorate"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/instrument/MembraneSynth.ts"],"sourcesContent":["import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name: string = \"MembraneSynth\";\n\n\t/**\n\t * The number of octaves the pitch envelope ramps.\n\t * @min 0.5\n\t * @max 8\n\t */\n\t@range(0)\n\toctaves: Positive;\n\n\t/**\n\t * The amount of time the frequency envelope takes.\n\t * @min 0\n\t * @max 0.5\n\t */\n\t@timeRange(0)\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\t/**\n\t * @param options the options available for the synth see defaults\n\t */\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.001,\n\t\t\t\tattackCurve: \"exponential\",\n\t\t\t\tdecay: 0.4,\n\t\t\t\trelease: 1.4,\n\t\t\t\tsustain: 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,wBAAwB;AAEvD,SAASC,SAAS,EAAEC,oBAAoB,QAAQ,uBAAuB;AACvE,SAASC,QAAQ,QAA0B,wBAAwB;AACnE,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,KAAK,QAAsB,SAAS;AAC7C,SAASC,KAAK,EAAEC,SAAS,QAAQ,wBAAwB;AAOzD;;;;;;;;;;;;;AAaA,OAAM,MAAOC,aAAc,SAAQH,KAA2B;EA6B7DI,YAAA;IAEC,KAAK,CAACP,oBAAoB,CAACM,aAAa,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC;IA7B3D,KAAAC,IAAI,GAAW,eAAe;IAkBvC;;;IAGS,KAAAC,UAAU,GAAG,CAAC;IAStB,MAAMC,OAAO,GAAGZ,oBAAoB,CAACM,aAAa,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC;IAE5E,IAAI,CAACI,UAAU,GAAGD,OAAO,CAACC,UAAU;IACpC,IAAI,CAACC,OAAO,GAAGF,OAAO,CAACE,OAAO;IAC9Bb,QAAQ,CAAC,IAAI,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;EAC3C;EAEA,OAAOO,WAAWA,CAAA;IACjB,OAAOT,SAAS,CAACG,UAAU,CAACM,WAAW,EAAE,EAAEL,KAAK,CAACK,WAAW,EAAE,EAAE;MAC/DO,QAAQ,EAAE;QACTC,MAAM,EAAE,KAAK;QACbC,WAAW,EAAE,aAAa;QAC1BC,KAAK,EAAE,GAAG;QACVC,OAAO,EAAE,GAAG;QACZC,OAAO,EAAE;OACT;MACDN,OAAO,EAAE,EAAE;MACXO,UAAU,EAAE;QACXC,IAAI,EAAE;OACN;MACDT,UAAU,EAAE;KACZ,CAAC;EACH;EAEAU,OAAOA,CAACC,IAAgC,EAAEC,IAAW;IACpD,MAAMC,OAAO,GAAG,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC;IACpC,MAAMG,KAAK,GAAG,IAAI,CAACC,WAAW,CAACL,IAAI,YAAY1B,cAAc,GAAG0B,IAAI,CAACK,WAAW,EAAE,GAAGL,IAAI,CAAC;IAC1F,MAAMM,OAAO,GAAGF,KAAK,GAAG,IAAI,CAACd,OAAO;IACpC,IAAI,CAACO,UAAU,CAACU,SAAS,CAACC,cAAc,CAACF,OAAO,EAAEJ,OAAO,CAAC;IAC1D,IAAI,CAACL,UAAU,CAACU,SAAS,CAACE,4BAA4B,CAACL,KAAK,EAAEF,OAAO,GAAG,IAAI,CAACC,SAAS,CAAC,IAAI,CAACd,UAAU,CAAC,CAAC;IACxG,OAAO,IAAI;EACZ;EAEAqB,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,OAAO,IAAI;EACZ;;AA1DAC,UAAA,EADC/B,KAAK,CAAC,CAAC,CAAC,C,6CACS;AAQlB+B,UAAA,EADC9B,SAAS,CAAC,CAAC,CAAC,C,gDACI"},"metadata":{},"sourceType":"module","externalDependencies":[]}