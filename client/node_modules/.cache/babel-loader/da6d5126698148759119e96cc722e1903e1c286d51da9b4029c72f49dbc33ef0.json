{"ast":null,"code":"import { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect } from \"./Effect\";\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport class FeedbackEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"FeedbackEffect\";\n    this._feedbackGain = new Gain({\n      context: this.context,\n      gain: options.feedback,\n      units: \"normalRange\"\n    });\n    this.feedback = this._feedbackGain.gain;\n    readOnly(this, \"feedback\");\n    // the feedback loop\n    this.effectReturn.chain(this._feedbackGain, this.effectSend);\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      feedback: 0.125\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._feedbackGain.dispose();\n    this.feedback.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","readOnly","Effect","FeedbackEffect","constructor","options","name","_feedbackGain","context","gain","feedback","units","effectReturn","chain","effectSend","getDefaults","Object","assign","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/effect/FeedbackEffect.ts"],"sourcesContent":["import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"FeedbackEffect\";\n\n\t/**\n\t * the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<\"normalRange\">;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,sBAAsB;AAG3C,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,MAAM,QAAuB,UAAU;AAgBhD;;;;AAIA,OAAM,MAAgBC,cAAsD,SAAQD,MAAe;EAclGE,YAAYC,OAA8B;IAEzC,KAAK,CAACA,OAAO,CAAC;IAdN,KAAAC,IAAI,GAAW,gBAAgB;IAgBvC,IAAI,CAACC,aAAa,GAAG,IAAIP,IAAI,CAAC;MAC7BQ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,IAAI,EAAEJ,OAAO,CAACK,QAAQ;MACtBC,KAAK,EAAE;KACP,CAAC;IAEF,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACH,aAAa,CAACE,IAAI;IACvCR,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC;IAE1B;IACA,IAAI,CAACW,YAAY,CAACC,KAAK,CAAC,IAAI,CAACN,aAAa,EAAE,IAAI,CAACO,UAAU,CAAC;EAC7D;EAEA,OAAOC,WAAWA,CAAA;IACjB,OAAOC,MAAM,CAACC,MAAM,CAACf,MAAM,CAACa,WAAW,EAAE,EAAE;MAC1CL,QAAQ,EAAE;KACV,CAAC;EACH;EAEAQ,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACX,aAAa,CAACW,OAAO,EAAE;IAC5B,IAAI,CAACR,QAAQ,CAACQ,OAAO,EAAE;IACvB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}