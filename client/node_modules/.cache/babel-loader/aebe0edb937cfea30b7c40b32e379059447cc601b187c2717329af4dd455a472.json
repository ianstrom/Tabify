{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeDynamicsCompressorNodes = new WeakMap();\n    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n       * created again.\n       */\n      const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        const options = {\n          attack: nativeDynamicsCompressorNode.attack.value,\n          channelCount: nativeDynamicsCompressorNode.channelCount,\n          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n          knee: nativeDynamicsCompressorNode.knee.value,\n          ratio: nativeDynamicsCompressorNode.ratio.value,\n          release: nativeDynamicsCompressorNode.release.value,\n          threshold: nativeDynamicsCompressorNode.threshold.value\n        };\n        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n      return nativeDynamicsCompressorNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createDynamicsCompressorNodeRendererFactory","connectAudioParam","createNativeDynamicsCompressorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeDynamicsCompressorNodes","WeakMap","createDynamicsCompressorNode","proxy","nativeOfflineAudioContext","nativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","options","attack","value","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","set","render","renderedNativeDynamicsCompressorNode","get","undefined","Promise","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/dynamics-compressor-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IDynamicsCompressorNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TDynamicsCompressorNodeRendererFactoryFactory, TNativeDynamicsCompressorNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createDynamicsCompressorNodeRendererFactory: TDynamicsCompressorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeDynamicsCompressorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeDynamicsCompressorNode>();\n\n        const createDynamicsCompressorNode = async (\n            proxy: IDynamicsCompressorNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode<T, TNativeDynamicsCompressorNode>(proxy);\n\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            return nativeDynamicsCompressorNode;\n        };\n\n        return {\n            render(\n                proxy: IDynamicsCompressorNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeDynamicsCompressorNode> {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}