{"ast":null,"code":"import { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"Negate\";\n    /**\n     * negation is done by multiplying by -1\n     */\n    this._multiply = new Multiply({\n      context: this.context,\n      value: -1\n    });\n    /**\n     * The input and output are equal to the multiply node\n     */\n    this.input = this._multiply;\n    this.output = this._multiply;\n  }\n  /**\n   * clean up\n   * @returns {Negate} this\n   */\n  dispose() {\n    super.dispose();\n    this._multiply.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Multiply","SignalOperator","Negate","constructor","name","_multiply","context","value","input","output","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/signal/Negate.ts"],"sourcesContent":["import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Negate\";\n\n\t/**\n\t * negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t * clean up\n\t * @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,cAAc,QAAQ,kBAAkB;AAEjD;;;;;;;;;AASA,OAAM,MAAOC,MAAO,SAAQD,cAAoC;EAAhEE,YAAA;;IAEU,KAAAC,IAAI,GAAW,QAAQ;IAEhC;;;IAGQ,KAAAC,SAAS,GAAa,IAAIL,QAAQ,CAAC;MAC1CM,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,KAAK,EAAE,CAAC;KACR,CAAC;IAEF;;;IAGA,KAAAC,KAAK,GAAG,IAAI,CAACH,SAAS;IACtB,KAAAI,MAAM,GAAG,IAAI,CAACJ,SAAS;EAWxB;EATC;;;;EAIAK,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACL,SAAS,CAACK,OAAO,EAAE;IACxB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}