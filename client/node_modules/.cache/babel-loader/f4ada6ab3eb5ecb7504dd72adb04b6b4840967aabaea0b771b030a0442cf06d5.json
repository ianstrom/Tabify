{"ast":null,"code":"import { Signal } from \"../../signal/Signal\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal extends Signal {\n  constructor() {\n    super(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n    this.name = \"TickSignal\";\n    const options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n    this.input = this._param = new TickParam({\n      context: this.context,\n      convert: options.convert,\n      multiplier: options.multiplier,\n      param: this._constantSource.offset,\n      units: options.units,\n      value: options.value\n    });\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  }\n  ticksToTime(ticks, when) {\n    return this._param.ticksToTime(ticks, when);\n  }\n  timeToTicks(duration, when) {\n    return this._param.timeToTicks(duration, when);\n  }\n  getTimeOfTick(tick) {\n    return this._param.getTimeOfTick(tick);\n  }\n  getDurationOfTicks(ticks, time) {\n    return this._param.getDurationOfTicks(ticks, time);\n  }\n  getTicksAtTime(time) {\n    return this._param.getTicksAtTime(time);\n  }\n  /**\n   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n   */\n  get multiplier() {\n    return this._param.multiplier;\n  }\n  set multiplier(m) {\n    this._param.multiplier = m;\n  }\n  dispose() {\n    super.dispose();\n    this._param.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Signal","optionsFromArguments","TickParam","TickSignal","constructor","getDefaults","arguments","name","options","input","_param","context","convert","multiplier","param","_constantSource","offset","units","value","Object","assign","ticksToTime","ticks","when","timeToTicks","duration","getTimeOfTick","tick","getDurationOfTicks","time","getTicksAtTime","m","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/core/clock/TickSignal.ts"],"sourcesContent":["import { Signal, SignalOptions } from \"../../signal/Signal\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n\ninterface TickSignalOptions<TypeName extends UnitName> extends SignalOptions<TypeName> {\n\tvalue: UnitMap[TypeName];\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal<TypeName extends \"hertz\" | \"bpm\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"TickSignal\";\n\n\t/**\n\t * The param which controls the output signal value\n\t */\n\tprotected _param: TickParam<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: UnitMap[TypeName]);\n\tconstructor(options: Partial<TickSignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.input = this._param = new TickParam({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tmultiplier: options.multiplier,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): TickSignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this._param.ticksToTime(ticks, when);\n\t}\n\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\treturn this._param.timeToTicks(duration, when);\n\t}\n\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\treturn this._param.getTimeOfTick(tick);\n\t}\n\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\treturn this._param.getDurationOfTicks(ticks, time);\n\t}\n\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._param.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._param.multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\tthis._param.multiplier = m;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAuB,qBAAqB;AAG3D,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,SAAS,QAAQ,aAAa;AAOvC;;;;;;;;;AASA,OAAM,MAAOC,UAA6C,SAAQH,MAAgB;EAejFI,YAAA;IAEC,KAAK,CAACH,oBAAoB,CAACE,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAfnE,KAAAC,IAAI,GAAW,YAAY;IAgBnC,MAAMC,OAAO,GAAGP,oBAAoB,CAACE,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IAEpF,IAAI,CAACG,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIR,SAAS,CAAC;MACxCS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,OAAO,EAAEJ,OAAO,CAACI,OAAO;MACxBC,UAAU,EAAEL,OAAO,CAACK,UAAU;MAC9BC,KAAK,EAAE,IAAI,CAACC,eAAe,CAACC,MAAM;MAClCC,KAAK,EAAET,OAAO,CAACS,KAAK;MACpBC,KAAK,EAAEV,OAAO,CAACU;KACf,CAAC;EACH;EAEA,OAAOb,WAAWA,CAAA;IACjB,OAAOc,MAAM,CAACC,MAAM,CAACpB,MAAM,CAACK,WAAW,EAAE,EAAE;MAC1CQ,UAAU,EAAE,CAAC;MACbI,KAAK,EAAE,OAAO;MACdC,KAAK,EAAE;KACP,CAAC;EACH;EAEAG,WAAWA,CAACC,KAAY,EAAEC,IAAU;IACnC,OAAO,IAAI,CAACb,MAAM,CAACW,WAAW,CAACC,KAAK,EAAEC,IAAI,CAAC;EAC5C;EAEAC,WAAWA,CAACC,QAAc,EAAEF,IAAU;IACrC,OAAO,IAAI,CAACb,MAAM,CAACc,WAAW,CAACC,QAAQ,EAAEF,IAAI,CAAC;EAC/C;EAEAG,aAAaA,CAACC,IAAW;IACxB,OAAO,IAAI,CAACjB,MAAM,CAACgB,aAAa,CAACC,IAAI,CAAC;EACvC;EAEAC,kBAAkBA,CAACN,KAAY,EAAEO,IAAU;IAC1C,OAAO,IAAI,CAACnB,MAAM,CAACkB,kBAAkB,CAACN,KAAK,EAAEO,IAAI,CAAC;EACnD;EAEAC,cAAcA,CAACD,IAAU;IACxB,OAAO,IAAI,CAACnB,MAAM,CAACoB,cAAc,CAACD,IAAI,CAAC;EACxC;EAEA;;;EAGA,IAAIhB,UAAUA,CAAA;IACb,OAAO,IAAI,CAACH,MAAM,CAACG,UAAU;EAC9B;EACA,IAAIA,UAAUA,CAACkB,CAAS;IACvB,IAAI,CAACrB,MAAM,CAACG,UAAU,GAAGkB,CAAC;EAC3B;EAEAC,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACtB,MAAM,CAACsB,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}