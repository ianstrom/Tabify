{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioNode = getNativeAudioNode(proxy);\n      // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfOutputs: nativeAudioNode.numberOfOutputs\n        };\n        nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n      return nativeAudioNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createChannelSplitterNodeRendererFactory","createNativeChannelSplitterNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAudioNodes","WeakMap","createAudioNode","proxy","nativeOfflineAudioContext","nativeAudioNode","nativeAudioNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","numberOfOutputs","set","render","renderedNativeAudioNode","get","undefined","Promise","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/channel-splitter-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAudioNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TChannelSplitterNodeRendererFactoryFactory, TNativeAudioNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createChannelSplitterNodeRendererFactory: TChannelSplitterNodeRendererFactoryFactory = (\n    createNativeChannelSplitterNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioNode>();\n\n        const createAudioNode = async (proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode<T, TNativeAudioNode>(proxy);\n\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n\n            return nativeAudioNode;\n        };\n\n        return {\n            render(proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeAudioNode> {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,MAAMC,wCAAwC,GAA+CA,CAChGC,+BAA+B,EAC/BC,kBAAkB,EAClBC,uBAAuB,KACvB;EACA,OAAO,MAAmE;IACtE,MAAMC,wBAAwB,GAAG,IAAIC,OAAO,EAAgD;IAE5F,MAAMC,eAAe,GAAG,MAAAA,CAAOC,KAAoB,EAAEC,yBAAqD,KAAI;MAC1G,IAAIC,eAAe,GAAGP,kBAAkB,CAAsBK,KAAK,CAAC;MAEpE;MACA,MAAMG,+BAA+B,GAAGX,gBAAgB,CAACU,eAAe,EAAED,yBAAyB,CAAC;MAEpG,IAAI,CAACE,+BAA+B,EAAE;QAClC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,eAAe,CAACG,YAAY;UAC1CC,gBAAgB,EAAEJ,eAAe,CAACI,gBAAgB;UAClDC,qBAAqB,EAAEL,eAAe,CAACK,qBAAqB;UAC5DC,eAAe,EAAEN,eAAe,CAACM;SACpC;QAEDN,eAAe,GAAGR,+BAA+B,CAACO,yBAAyB,EAAEG,OAAO,CAAC;;MAGzFP,wBAAwB,CAACY,GAAG,CAACR,yBAAyB,EAAEC,eAAe,CAAC;MAExE,MAAMN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,eAAe,CAAC;MAEhF,OAAOA,eAAe;IAC1B,CAAC;IAED,OAAO;MACHQ,MAAMA,CAACV,KAAoB,EAAEC,yBAAqD;QAC9E,MAAMU,uBAAuB,GAAGd,wBAAwB,CAACe,GAAG,CAACX,yBAAyB,CAAC;QAEvF,IAAIU,uBAAuB,KAAKE,SAAS,EAAE;UACvC,OAAOC,OAAO,CAACC,OAAO,CAACJ,uBAAuB,CAAC;;QAGnD,OAAOZ,eAAe,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAC5D;KACH;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}