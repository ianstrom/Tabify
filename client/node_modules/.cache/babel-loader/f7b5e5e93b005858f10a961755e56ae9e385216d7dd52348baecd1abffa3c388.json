{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore, sanitizePeriodicWaveOptions) => {\n  return class PeriodicWave {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = sanitizePeriodicWaveOptions({\n        ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n      periodicWaveStore.add(periodicWave);\n      // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n      return periodicWave;\n    }\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype || periodicWaveStore.has(instance);\n    }\n  };\n};","map":{"version":3,"names":["DEFAULT_OPTIONS","disableNormalization","createPeriodicWaveConstructor","createNativePeriodicWave","getNativeContext","periodicWaveStore","sanitizePeriodicWaveOptions","PeriodicWave","constructor","context","options","nativeContext","mergedOptions","periodicWave","add","Symbol","hasInstance","instance","Object","getPrototypeOf","prototype","has"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/periodic-wave-constructor.ts"],"sourcesContent":["import { IPeriodicWave, IPeriodicWaveOptions } from '../interfaces';\nimport { TContext, TPeriodicWaveConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    disableNormalization: false\n} as const;\n\nexport const createPeriodicWaveConstructor: TPeriodicWaveConstructorFactory = (\n    createNativePeriodicWave,\n    getNativeContext,\n    periodicWaveStore,\n    sanitizePeriodicWaveOptions\n) => {\n    return class PeriodicWave<T extends TContext> implements IPeriodicWave {\n        constructor(context: T, options?: Partial<IPeriodicWaveOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizePeriodicWaveOptions({ ...DEFAULT_OPTIONS, ...options });\n            const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n\n            periodicWaveStore.add(periodicWave);\n\n            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n            return periodicWave;\n        }\n\n        public static [Symbol.hasInstance](instance: unknown): boolean {\n            return (\n                (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype) ||\n                periodicWaveStore.has(<any>instance)\n            );\n        }\n    };\n};\n"],"mappings":"AAGA,MAAMA,eAAe,GAAG;EACpBC,oBAAoB,EAAE;CAChB;AAEV,OAAO,MAAMC,6BAA6B,GAAoCA,CAC1EC,wBAAwB,EACxBC,gBAAgB,EAChBC,iBAAiB,EACjBC,2BAA2B,KAC3B;EACA,OAAO,MAAMC,YAAY;IACrBC,YAAYC,OAAU,EAAEC,OAAuC;MAC3D,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAO,CAAC;MAC/C,MAAMG,aAAa,GAAGN,2BAA2B,CAAC;QAAE,GAAGN,eAAe;QAAE,GAAGU;MAAO,CAAE,CAAC;MACrF,MAAMG,YAAY,GAAGV,wBAAwB,CAACQ,aAAa,EAAEC,aAAa,CAAC;MAE3EP,iBAAiB,CAACS,GAAG,CAACD,YAAY,CAAC;MAEnC;MACA,OAAOA,YAAY;IACvB;IAEO,QAAQE,MAAM,CAACC,WAAW,EAAEC,QAAiB;MAChD,OACKA,QAAQ,KAAK,IAAI,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIC,MAAM,CAACC,cAAc,CAACF,QAAQ,CAAC,KAAKV,YAAY,CAACa,SAAS,IAChHf,iBAAiB,CAACgB,GAAG,CAAMJ,QAAQ,CAAC;IAE5C;GACH;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}