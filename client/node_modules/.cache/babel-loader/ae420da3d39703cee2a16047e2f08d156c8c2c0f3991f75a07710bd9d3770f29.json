{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\nexport class StereoFeedbackEffect extends StereoEffect {\n  constructor(options) {\n    super(options);\n    this.feedback = new Signal({\n      context: this.context,\n      value: options.feedback,\n      units: \"normalRange\"\n    });\n    this._feedbackL = new Gain({\n      context: this.context\n    });\n    this._feedbackR = new Gain({\n      context: this.context\n    });\n    this._feedbackSplit = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._feedbackMerge = new Merge({\n      context: this.context,\n      channels: 2\n    });\n    this._merge.connect(this._feedbackSplit);\n    this._feedbackMerge.connect(this._split);\n    // the left output connected to the left input\n    this._feedbackSplit.connect(this._feedbackL, 0, 0);\n    this._feedbackL.connect(this._feedbackMerge, 0, 0);\n    // the right output connected to the right input\n    this._feedbackSplit.connect(this._feedbackR, 1, 0);\n    this._feedbackR.connect(this._feedbackMerge, 0, 1);\n    // the feedback control\n    this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n    readOnly(this, [\"feedback\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      feedback: 0.5\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.feedback.dispose();\n    this._feedbackL.dispose();\n    this._feedbackR.dispose();\n    this._feedbackSplit.dispose();\n    this._feedbackMerge.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["StereoEffect","Signal","Gain","readOnly","Split","Merge","StereoFeedbackEffect","constructor","options","feedback","context","value","units","_feedbackL","_feedbackR","_feedbackSplit","channels","_feedbackMerge","_merge","connect","_split","fan","gain","getDefaults","Object","assign","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/effect/StereoFeedbackEffect.ts"],"sourcesContent":["import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n\nexport interface StereoFeedbackEffectOptions extends StereoEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\nexport class StereoFeedbackEffect<Options extends StereoFeedbackEffectOptions> extends StereoEffect<Options> {\n\t\n\t/**\n\t * The amount of feedback from the output\n\t * back into the input of the effect (routed\n\t * across left and right channels).\n\t */\n\treadonly feedback: Signal<\"normalRange\">;\n\n\t/**\n\t * the left side feedback\n\t */\n\tprotected _feedbackL: Gain;\n\n\t/**\n\t * the right side feedback\n\t */\n\tprotected _feedbackR: Gain;\n\n\t/**\n\t * Split the channels for feedback\n\t */\n\tprotected _feedbackSplit: Split;\n\n\t/**\n\t * Merge the channels for feedback\n\t */\n\tprotected _feedbackMerge: Merge;\n\n\tconstructor(options: StereoFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.feedback = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.feedback, \n\t\t\tunits: \"normalRange\"\n\t\t});\n\t\tthis._feedbackL = new Gain({ context: this.context });\n\t\tthis._feedbackR = new Gain({ context: this.context });\n\n\t\tthis._feedbackSplit = new Split({ context: this.context, channels: 2 });\n\t\tthis._feedbackMerge = new Merge({ context: this.context, channels: 2 });\n\n\t\tthis._merge.connect(this._feedbackSplit);\n\t\tthis._feedbackMerge.connect(this._split);\n\t\t\n\t\t// the left output connected to the left input\n\t\tthis._feedbackSplit.connect(this._feedbackL, 0, 0);\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 0);\n\n\t\t// the right output connected to the right input\n\t\tthis._feedbackSplit.connect(this._feedbackR, 1, 0);\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 1);\n\t\t\n\t\t// the feedback control\n\t\tthis.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n\n\tstatic getDefaults(): StereoFeedbackEffectOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfeedback: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.feedback.dispose();\n\t\tthis._feedbackL.dispose();\n\t\tthis._feedbackR.dispose();\n\t\tthis._feedbackSplit.dispose();\n\t\tthis._feedbackMerge.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAA6B,gBAAgB;AAElE,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,KAAK,QAAQ,4BAA4B;AAMlD;;;AAGA,OAAM,MAAOC,oBAAkE,SAAQN,YAAqB;EA6B3GO,YAAYC,OAAoC;IAE/C,KAAK,CAACA,OAAO,CAAC;IAEd,IAAI,CAACC,QAAQ,GAAG,IAAIR,MAAM,CAAC;MAC1BS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,KAAK,EAAEH,OAAO,CAACC,QAAQ;MACvBG,KAAK,EAAE;KACP,CAAC;IACF,IAAI,CAACC,UAAU,GAAG,IAAIX,IAAI,CAAC;MAAEQ,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IACrD,IAAI,CAACI,UAAU,GAAG,IAAIZ,IAAI,CAAC;MAAEQ,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAErD,IAAI,CAACK,cAAc,GAAG,IAAIX,KAAK,CAAC;MAAEM,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEM,QAAQ,EAAE;IAAC,CAAE,CAAC;IACvE,IAAI,CAACC,cAAc,GAAG,IAAIZ,KAAK,CAAC;MAAEK,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEM,QAAQ,EAAE;IAAC,CAAE,CAAC;IAEvE,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,IAAI,CAACJ,cAAc,CAAC;IACxC,IAAI,CAACE,cAAc,CAACE,OAAO,CAAC,IAAI,CAACC,MAAM,CAAC;IAExC;IACA,IAAI,CAACL,cAAc,CAACI,OAAO,CAAC,IAAI,CAACN,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;IAClD,IAAI,CAACA,UAAU,CAACM,OAAO,CAAC,IAAI,CAACF,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC;IAElD;IACA,IAAI,CAACF,cAAc,CAACI,OAAO,CAAC,IAAI,CAACL,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;IAClD,IAAI,CAACA,UAAU,CAACK,OAAO,CAAC,IAAI,CAACF,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC;IAElD;IACA,IAAI,CAACR,QAAQ,CAACY,GAAG,CAAC,IAAI,CAACR,UAAU,CAACS,IAAI,EAAE,IAAI,CAACR,UAAU,CAACQ,IAAI,CAAC;IAC7DnB,QAAQ,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,CAAC;EAC7B;EAEA,OAAOoB,WAAWA,CAAA;IACjB,OAAOC,MAAM,CAACC,MAAM,CAACzB,YAAY,CAACuB,WAAW,EAAE,EAAE;MAChDd,QAAQ,EAAE;KACV,CAAC;EACH;EAEAiB,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACjB,QAAQ,CAACiB,OAAO,EAAE;IACvB,IAAI,CAACb,UAAU,CAACa,OAAO,EAAE;IACzB,IAAI,CAACZ,UAAU,CAACY,OAAO,EAAE;IACzB,IAAI,CAACX,cAAc,CAACW,OAAO,EAAE;IAC7B,IAAI,CAACT,cAAc,CAACS,OAAO,EAAE;IAC7B,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}