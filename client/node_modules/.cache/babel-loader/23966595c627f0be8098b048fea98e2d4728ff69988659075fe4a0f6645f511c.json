{"ast":null,"code":"import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = parameterDescriptors => {\n  if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n    throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n  }\n};\nconst verifyProcessorCtor = processorCtor => {\n  if (!isConstructible(processorCtor)) {\n    throw new TypeError('The given value for processorCtor should be a constructor.');\n  }\n  if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n    throw new TypeError('The given value for processorCtor should have a prototype.');\n  }\n};\nexport const createAddAudioWorkletModule = (cacheTestResult, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, ongoingRequests, resolvedRequests, testAudioWorkletProcessorPostMessageSupport, window) => {\n  let index = 0;\n  return function (context, moduleURL) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      credentials: 'omit'\n    };\n    const resolvedRequestsOfContext = resolvedRequests.get(context);\n    if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n      return Promise.resolve();\n    }\n    const ongoingRequestsOfContext = ongoingRequests.get(context);\n    if (ongoingRequestsOfContext !== undefined) {\n      const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n      if (promiseOfOngoingRequest !== undefined) {\n        return promiseOfOngoingRequest;\n      }\n    }\n    const nativeContext = getNativeContext(context);\n    // Bug #59: Safari does not implement the audioWorklet property.\n    const promise = nativeContext.audioWorklet === undefined ? fetchSource(moduleURL).then(_ref => {\n      let [source, absoluteUrl] = _ref;\n      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n      /*\n       * This is the unminified version of the code used below:\n       *\n       * ```js\n       * ${ importStatements };\n       * ((a, b) => {\n       *     (a[b] = a[b] || [ ]).push(\n       *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n       *             ${ sourceWithoutImportStatements }\n       *         }\n       *     );\n       * })(window, '_AWGS');\n       * ```\n       */\n      // tslint:disable-next-line:max-line-length\n      const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n      // @todo Evaluating the given source code is a possible security problem.\n      return evaluateSource(wrappedSource);\n    }).then(() => {\n      const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n      if (evaluateAudioWorkletGlobalScope === undefined) {\n        // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n        throw new SyntaxError();\n      }\n      exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {}, undefined, (name, processorCtor) => {\n        if (name.trim() === '') {\n          throw createNotSupportedError();\n        }\n        const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n        if (nodeNameToProcessorConstructorMap !== undefined) {\n          if (nodeNameToProcessorConstructorMap.has(name)) {\n            throw createNotSupportedError();\n          }\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          nodeNameToProcessorConstructorMap.set(name, processorCtor);\n        } else {\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n        }\n      }, nativeContext.sampleRate, undefined, undefined));\n    }) : Promise.all([fetchSource(moduleURL), Promise.resolve(cacheTestResult(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport))]).then(_ref2 => {\n      let [[source, absoluteUrl], isSupportingPostMessage] = _ref2;\n      const currentIndex = index + 1;\n      index = currentIndex;\n      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n      /*\n       * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n       *\n       * This is the unminified version of the code used below.\n       *\n       * ```js\n       * class extends AudioWorkletProcessor {\n       *\n       *     __buffers = new WeakSet();\n       *\n       *     constructor () {\n       *         super();\n       *\n       *         this.port.postMessage = ((postMessage) => {\n       *             return (message, transferables) => {\n       *                 const filteredTransferables = (transferables)\n       *                     ? transferables.filter((transferable) => !this.__buffers.has(transferable))\n       *                     : transferables;\n       *\n       *                 return postMessage.call(this.port, message, filteredTransferables);\n       *              };\n       *         })(this.port.postMessage);\n       *     }\n       * }\n       * ```\n       */\n      const patchedAudioWorkletProcessor = isSupportingPostMessage ? 'AudioWorkletProcessor' : 'class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}';\n      /*\n       * Bug #170: Chrome and Edge do call process() with an array with empty channelData for each input if no input is connected.\n       *\n       * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n       *\n       * Bug #190: Safari doesn't throw an error when loading an unparsable module.\n       *\n       * This is the unminified version of the code used below:\n       *\n       * ```js\n       * `${ importStatements };\n       * ((AudioWorkletProcessor, registerProcessor) => {${ sourceWithoutImportStatements }\n       * })(\n       *     ${Â patchedAudioWorkletProcessor },\n       *     (name, processorCtor) => registerProcessor(name, class extends processorCtor {\n       *\n       *         __collectBuffers = (array) => {\n       *             array.forEach((element) => this.__buffers.add(element.buffer));\n       *         };\n       *\n       *         process (inputs, outputs, parameters) {\n       *             inputs.forEach(this.__collectBuffers);\n       *             outputs.forEach(this.__collectBuffers);\n       *             this.__collectBuffers(Object.values(parameters));\n       *\n       *             return super.process(\n       *                 (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n       *                 outputs,\n       *                 parameters\n       *             );\n       *         }\n       *\n       *     })\n       * );\n       *\n       * registerProcessor(`__sac${currentIndex}`, class extends AudioWorkletProcessor{\n       *\n       *     process () {\n       *         return false;\n       *     }\n       *\n       * })`\n       * ```\n       */\n      const memberDefinition = isSupportingPostMessage ? '' : '__c = (a) => a.forEach(e=>this.__b.add(e.buffer));';\n      const bufferRegistration = isSupportingPostMessage ? '' : 'i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));';\n      const wrappedSource = `${importStatements};((AudioWorkletProcessor,registerProcessor)=>{${sourceWithoutImportStatements}\n})(${patchedAudioWorkletProcessor},(n,p)=>registerProcessor(n,class extends p{${memberDefinition}process(i,o,p){${bufferRegistration}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${currentIndex}',class extends AudioWorkletProcessor{process(){return !1}})`;\n      const blob = new Blob([wrappedSource], {\n        type: 'application/javascript; charset=utf-8'\n      });\n      const url = URL.createObjectURL(blob);\n      return nativeContext.audioWorklet.addModule(url, options).then(() => {\n        if (isNativeOfflineAudioContext(nativeContext)) {\n          return nativeContext;\n        }\n        // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n        const backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext(nativeContext);\n        return backupOfflineAudioContext.audioWorklet.addModule(url, options).then(() => backupOfflineAudioContext);\n      }).then(nativeContextOrBackupOfflineAudioContext => {\n        if (nativeAudioWorkletNodeConstructor === null) {\n          throw new SyntaxError();\n        }\n        try {\n          // Bug #190: Safari doesn't throw an error when loading an unparsable module.\n          new nativeAudioWorkletNodeConstructor(nativeContextOrBackupOfflineAudioContext, `__sac${currentIndex}`); // tslint:disable-line:no-unused-expression\n        } catch {\n          throw new SyntaxError();\n        }\n      }).finally(() => URL.revokeObjectURL(url));\n    });\n    if (ongoingRequestsOfContext === undefined) {\n      ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n    } else {\n      ongoingRequestsOfContext.set(moduleURL, promise);\n    }\n    promise.then(() => {\n      const updatedResolvedRequestsOfContext = resolvedRequests.get(context);\n      if (updatedResolvedRequestsOfContext === undefined) {\n        resolvedRequests.set(context, new Set([moduleURL]));\n      } else {\n        updatedResolvedRequestsOfContext.add(moduleURL);\n      }\n    }).finally(() => {\n      const updatedOngoingRequestsOfContext = ongoingRequests.get(context);\n      if (updatedOngoingRequestsOfContext !== undefined) {\n        updatedOngoingRequestsOfContext.delete(moduleURL);\n      }\n    });\n    return promise;\n  };\n};","map":{"version":3,"names":["NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","isConstructible","splitImportStatements","verifyParameterDescriptors","parameterDescriptors","undefined","Array","isArray","TypeError","verifyProcessorCtor","processorCtor","prototype","createAddAudioWorkletModule","cacheTestResult","createNotSupportedError","evaluateSource","exposeCurrentFrameAndCurrentTime","fetchSource","getNativeContext","getOrCreateBackupOfflineAudioContext","isNativeOfflineAudioContext","nativeAudioWorkletNodeConstructor","ongoingRequests","resolvedRequests","testAudioWorkletProcessorPostMessageSupport","window","index","context","moduleURL","options","arguments","length","credentials","resolvedRequestsOfContext","get","has","Promise","resolve","ongoingRequestsOfContext","promiseOfOngoingRequest","nativeContext","promise","audioWorklet","then","_ref","source","absoluteUrl","importStatements","sourceWithoutImportStatements","wrappedSource","evaluateAudioWorkletGlobalScope","_AWGS","pop","SyntaxError","currentTime","sampleRate","AudioWorkletProcessor","name","trim","nodeNameToProcessorConstructorMap","set","Map","all","_ref2","isSupportingPostMessage","currentIndex","patchedAudioWorkletProcessor","memberDefinition","bufferRegistration","blob","Blob","type","url","URL","createObjectURL","addModule","backupOfflineAudioContext","nativeContextOrBackupOfflineAudioContext","finally","revokeObjectURL","updatedResolvedRequestsOfContext","Set","add","updatedOngoingRequestsOfContext","delete"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/add-audio-worklet-module.ts"],"sourcesContent":["import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nimport { IAudioWorkletProcessorConstructor } from '../interfaces';\nimport { TAddAudioWorkletModuleFactory, TEvaluateAudioWorkletGlobalScopeFunction } from '../types';\n\nconst verifyParameterDescriptors = (parameterDescriptors: IAudioWorkletProcessorConstructor['parameterDescriptors']) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\n\nconst verifyProcessorCtor = <T extends IAudioWorkletProcessorConstructor>(processorCtor: T) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n};\n\nexport const createAddAudioWorkletModule: TAddAudioWorkletModuleFactory = (\n    cacheTestResult,\n    createNotSupportedError,\n    evaluateSource,\n    exposeCurrentFrameAndCurrentTime,\n    fetchSource,\n    getNativeContext,\n    getOrCreateBackupOfflineAudioContext,\n    isNativeOfflineAudioContext,\n    nativeAudioWorkletNodeConstructor,\n    ongoingRequests,\n    resolvedRequests,\n    testAudioWorkletProcessorPostMessageSupport,\n    window\n) => {\n    let index = 0;\n\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n\n        const nativeContext = getNativeContext(context);\n\n        // Bug #59: Safari does not implement the audioWorklet property.\n        const promise =\n            nativeContext.audioWorklet === undefined\n                ? fetchSource(moduleURL)\n                      .then(([source, absoluteUrl]) => {\n                          const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n\n                          /*\n                           * This is the unminified version of the code used below:\n                           *\n                           * ```js\n                           * ${ importStatements };\n                           * ((a, b) => {\n                           *     (a[b] = a[b] || [ ]).push(\n                           *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n                           *             ${ sourceWithoutImportStatements }\n                           *         }\n                           *     );\n                           * })(window, '_AWGS');\n                           * ```\n                           */\n                          // tslint:disable-next-line:max-line-length\n                          const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n\n                          // @todo Evaluating the given source code is a possible security problem.\n                          return evaluateSource(wrappedSource);\n                      })\n                      .then(() => {\n                          const evaluateAudioWorkletGlobalScope = (<TEvaluateAudioWorkletGlobalScopeFunction[]>(<any>window)._AWGS).pop();\n\n                          if (evaluateAudioWorkletGlobalScope === undefined) {\n                              // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n                              throw new SyntaxError();\n                          }\n\n                          exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () =>\n                              evaluateAudioWorkletGlobalScope(\n                                  class AudioWorkletProcessor {},\n                                  undefined,\n                                  (name, processorCtor) => {\n                                      if (name.trim() === '') {\n                                          throw createNotSupportedError();\n                                      }\n\n                                      const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n\n                                      if (nodeNameToProcessorConstructorMap !== undefined) {\n                                          if (nodeNameToProcessorConstructorMap.has(name)) {\n                                              throw createNotSupportedError();\n                                          }\n\n                                          verifyProcessorCtor(processorCtor);\n                                          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n\n                                          nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                                      } else {\n                                          verifyProcessorCtor(processorCtor);\n                                          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n\n                                          NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                                      }\n                                  },\n                                  nativeContext.sampleRate,\n                                  undefined,\n                                  undefined\n                              )\n                          );\n                      })\n                : Promise.all([\n                      fetchSource(moduleURL),\n                      Promise.resolve(\n                          cacheTestResult(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport)\n                      )\n                  ]).then(([[source, absoluteUrl], isSupportingPostMessage]) => {\n                      const currentIndex = index + 1;\n\n                      index = currentIndex;\n\n                      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                      /*\n                       * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n                       *\n                       * This is the unminified version of the code used below.\n                       *\n                       * ```js\n                       * class extends AudioWorkletProcessor {\n                       *\n                       *     __buffers = new WeakSet();\n                       *\n                       *     constructor () {\n                       *         super();\n                       *\n                       *         this.port.postMessage = ((postMessage) => {\n                       *             return (message, transferables) => {\n                       *                 const filteredTransferables = (transferables)\n                       *                     ? transferables.filter((transferable) => !this.__buffers.has(transferable))\n                       *                     : transferables;\n                       *\n                       *                 return postMessage.call(this.port, message, filteredTransferables);\n                       *              };\n                       *         })(this.port.postMessage);\n                       *     }\n                       * }\n                       * ```\n                       */\n                      const patchedAudioWorkletProcessor = isSupportingPostMessage\n                          ? 'AudioWorkletProcessor'\n                          : 'class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}';\n                      /*\n                       * Bug #170: Chrome and Edge do call process() with an array with empty channelData for each input if no input is connected.\n                       *\n                       * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n                       *\n                       * Bug #190: Safari doesn't throw an error when loading an unparsable module.\n                       *\n                       * This is the unminified version of the code used below:\n                       *\n                       * ```js\n                       * `${ importStatements };\n                       * ((AudioWorkletProcessor, registerProcessor) => {${ sourceWithoutImportStatements }\n                       * })(\n                       *     ${Â patchedAudioWorkletProcessor },\n                       *     (name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                       *\n                       *         __collectBuffers = (array) => {\n                       *             array.forEach((element) => this.__buffers.add(element.buffer));\n                       *         };\n                       *\n                       *         process (inputs, outputs, parameters) {\n                       *             inputs.forEach(this.__collectBuffers);\n                       *             outputs.forEach(this.__collectBuffers);\n                       *             this.__collectBuffers(Object.values(parameters));\n                       *\n                       *             return super.process(\n                       *                 (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n                       *                 outputs,\n                       *                 parameters\n                       *             );\n                       *         }\n                       *\n                       *     })\n                       * );\n                       *\n                       * registerProcessor(`__sac${currentIndex}`, class extends AudioWorkletProcessor{\n                       *\n                       *     process () {\n                       *         return false;\n                       *     }\n                       *\n                       * })`\n                       * ```\n                       */\n                      const memberDefinition = isSupportingPostMessage ? '' : '__c = (a) => a.forEach(e=>this.__b.add(e.buffer));';\n                      const bufferRegistration = isSupportingPostMessage\n                          ? ''\n                          : 'i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));';\n                      const wrappedSource = `${importStatements};((AudioWorkletProcessor,registerProcessor)=>{${sourceWithoutImportStatements}\n})(${patchedAudioWorkletProcessor},(n,p)=>registerProcessor(n,class extends p{${memberDefinition}process(i,o,p){${bufferRegistration}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${currentIndex}',class extends AudioWorkletProcessor{process(){return !1}})`;\n                      const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                      const url = URL.createObjectURL(blob);\n\n                      return nativeContext.audioWorklet\n                          .addModule(url, options)\n                          .then(() => {\n                              if (isNativeOfflineAudioContext(nativeContext)) {\n                                  return nativeContext;\n                              }\n\n                              // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n                              const backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext(nativeContext);\n\n                              return backupOfflineAudioContext.audioWorklet.addModule(url, options).then(() => backupOfflineAudioContext);\n                          })\n                          .then((nativeContextOrBackupOfflineAudioContext) => {\n                              if (nativeAudioWorkletNodeConstructor === null) {\n                                  throw new SyntaxError();\n                              }\n\n                              try {\n                                  // Bug #190: Safari doesn't throw an error when loading an unparsable module.\n                                  new nativeAudioWorkletNodeConstructor(nativeContextOrBackupOfflineAudioContext, `__sac${currentIndex}`); // tslint:disable-line:no-unused-expression\n                              } catch {\n                                  throw new SyntaxError();\n                              }\n                          })\n                          .finally(() => URL.revokeObjectURL(url));\n                  });\n\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        } else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n\n        promise\n            .then(() => {\n                const updatedResolvedRequestsOfContext = resolvedRequests.get(context);\n\n                if (updatedResolvedRequestsOfContext === undefined) {\n                    resolvedRequests.set(context, new Set([moduleURL]));\n                } else {\n                    updatedResolvedRequestsOfContext.add(moduleURL);\n                }\n            })\n            .finally(() => {\n                const updatedOngoingRequestsOfContext = ongoingRequests.get(context);\n\n                if (updatedOngoingRequestsOfContext !== undefined) {\n                    updatedOngoingRequestsOfContext.delete(moduleURL);\n                }\n            });\n\n        return promise;\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}