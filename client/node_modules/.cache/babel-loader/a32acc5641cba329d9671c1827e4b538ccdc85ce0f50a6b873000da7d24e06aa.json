{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class WaveShaperNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null;\n      // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      this._isCurveNullified = false;\n      this._nativeWaveShaperNode = nativeWaveShaperNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(this, 1);\n    }\n    get curve() {\n      if (this._isCurveNullified) {\n        return null;\n      }\n      return this._nativeWaveShaperNode.curve;\n    }\n    set curve(value) {\n      // Bug #103: Safari does not allow to set the curve to null.\n      if (value === null) {\n        this._isCurveNullified = true;\n        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n      } else {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n        if (value.length < 2) {\n          throw createInvalidStateError();\n        }\n        this._isCurveNullified = false;\n        this._nativeWaveShaperNode.curve = value;\n      }\n    }\n    get oversample() {\n      return this._nativeWaveShaperNode.oversample;\n    }\n    set oversample(value) {\n      this._nativeWaveShaperNode.oversample = value;\n    }\n  };\n};","map":{"version":3,"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","curve","oversample","createWaveShaperNodeConstructor","audioNodeConstructor","createInvalidStateError","createNativeWaveShaperNode","createWaveShaperNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","WaveShaperNode","constructor","context","options","nativeContext","mergedOptions","nativeWaveShaperNode","isOffline","waveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","value","Float32Array","length"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/wave-shaper-node-constructor.ts"],"sourcesContent":["import { IWaveShaperNode, IWaveShaperOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TNativeWaveShaperNode, TOverSampleType, TWaveShaperNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n} as const;\n\nexport const createWaveShaperNodeConstructor: TWaveShaperNodeConstructorFactory = (\n    audioNodeConstructor,\n    createInvalidStateError,\n    createNativeWaveShaperNode,\n    createWaveShaperNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class WaveShaperNode<T extends TContext> extends audioNodeConstructor<T> implements IWaveShaperNode<T> {\n        private _isCurveNullified: boolean;\n\n        private _nativeWaveShaperNode: TNativeWaveShaperNode;\n\n        constructor(context: T, options?: Partial<IWaveShaperOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createWaveShaperNodeRenderer() : null);\n\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get curve(): null | Float32Array {\n            if (this._isCurveNullified) {\n                return null;\n            }\n\n            return this._nativeWaveShaperNode.curve;\n        }\n\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            } else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n\n        get oversample(): TOverSampleType {\n            return this._nativeWaveShaperNode.oversample;\n        }\n\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n"],"mappings":"AAGA,MAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE,UAAU;EACjCC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE;CACN;AAEV,OAAO,MAAMC,+BAA+B,GAAsCA,CAC9EC,oBAAoB,EACpBC,uBAAuB,EACvBC,0BAA0B,EAC1BC,4BAA4B,EAC5BC,gBAAgB,EAChBC,2BAA2B,EAC3BC,oBAAoB,KACpB;EACA,OAAO,MAAMC,cAAmC,SAAQP,oBAAuB;IAK3EQ,YAAYC,OAAU,EAAEC,OAAqC;MACzD,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAO,CAAC;MAC/C,MAAMG,aAAa,GAAG;QAAE,GAAGnB,eAAe;QAAE,GAAGiB;MAAO,CAAE;MACxD,MAAMG,oBAAoB,GAAGX,0BAA0B,CAACS,aAAa,EAAEC,aAAa,CAAC;MACrF,MAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAa,CAAC;MAC5D,MAAMI,sBAAsB,GAAiCD,SAAS,GAAGX,4BAA4B,EAAE,GAAG,IAAK;MAE/G;MACA,KAAK,CAACM,OAAO,EAAE,IAAI,EAAEI,oBAAoB,EAAEE,sBAAsB,CAAC;MAElE,IAAI,CAACC,iBAAiB,GAAG,KAAK;MAC9B,IAAI,CAACC,qBAAqB,GAAGJ,oBAAoB;MAEjD;MACAP,oBAAoB,CAAC,IAAI,EAAE,CAAC,CAAC;IACjC;IAEA,IAAIT,KAAKA,CAAA;MACL,IAAI,IAAI,CAACmB,iBAAiB,EAAE;QACxB,OAAO,IAAI;;MAGf,OAAO,IAAI,CAACC,qBAAqB,CAACpB,KAAK;IAC3C;IAEA,IAAIA,KAAKA,CAACqB,KAAK;MACX;MACA,IAAIA,KAAK,KAAK,IAAI,EAAE;QAChB,IAAI,CAACF,iBAAiB,GAAG,IAAI;QAC7B,IAAI,CAACC,qBAAqB,CAACpB,KAAK,GAAG,IAAIsB,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;OAC9D,MAAM;QACH;QACA;QACA,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;UAClB,MAAMnB,uBAAuB,EAAE;;QAGnC,IAAI,CAACe,iBAAiB,GAAG,KAAK;QAC9B,IAAI,CAACC,qBAAqB,CAACpB,KAAK,GAAGqB,KAAK;;IAEhD;IAEA,IAAIpB,UAAUA,CAAA;MACV,OAAO,IAAI,CAACmB,qBAAqB,CAACnB,UAAU;IAChD;IAEA,IAAIA,UAAUA,CAACoB,KAAK;MAChB,IAAI,CAACD,qBAAqB,CAACnB,UAAU,GAAGoB,KAAK;IACjD;GACH;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}