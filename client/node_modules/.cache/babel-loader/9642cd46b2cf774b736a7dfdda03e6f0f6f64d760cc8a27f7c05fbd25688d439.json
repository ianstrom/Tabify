{"ast":null,"code":"import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options) => {\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n    assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n    // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n    }\n    // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n    }\n    // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n    if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n    }\n    // Bug #44: Safari does not throw a RangeError yet.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n    }\n    // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n    }\n    // Bug #44: Only Firefox does not throw a RangeError yet.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n    }\n    // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n    addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n    return nativeAudioBufferSourceNode;\n  };\n};","map":{"version":3,"names":["assignNativeAudioNodeAudioParamValue","assignNativeAudioNodeOption","assignNativeAudioNodeOptions","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","createNativeAudioBufferSourceNodeFactory","addSilentConnection","cacheTestResult","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioBufferSourceNodeStopMethodNullifiedBuffer","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","nativeContext","options","nativeAudioBufferSourceNode","createBufferSource"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/native-audio-buffer-source-node-factory.ts"],"sourcesContent":["import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nimport { TNativeAudioBufferSourceNodeFactoryFactory } from '../types';\n\nexport const createNativeAudioBufferSourceNodeFactory: TNativeAudioBufferSourceNodeFactoryFactory = (\n    addSilentConnection,\n    cacheTestResult,\n    testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport,\n    testAudioBufferSourceNodeStartMethodOffsetClampingSupport,\n    testAudioBufferSourceNodeStopMethodNullifiedBufferSupport,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioBufferSourceNodeStartMethodOffsetClampling,\n    wrapAudioBufferSourceNodeStopMethodNullifiedBuffer,\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n) => {\n    return (nativeContext, options) => {\n        const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n\n        // Bug #149: Safari does not yet support the detune AudioParam.\n\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (\n            !cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () =>\n                testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext)\n            )\n        ) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (\n            !cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () =>\n                testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext)\n            )\n        ) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n\n        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n        if (\n            !cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () =>\n                testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext)\n            )\n        ) {\n            wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n        }\n\n        // Bug #44: Safari does not throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () =>\n                testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n\n        return nativeAudioBufferSourceNode;\n    };\n};\n"],"mappings":"AAAA,SAASA,oCAAoC,QAAQ,uDAAuD;AAC5G,SAASC,2BAA2B,QAAQ,4CAA4C;AACxF,SAASC,4BAA4B,QAAQ,6CAA6C;AAC1F,SAASC,oDAAoD,QAAQ,yEAAyE;AAC9I,SAASC,yDAAyD,QAAQ,8EAA8E;AACxJ,SAASC,wDAAwD,QAAQ,6EAA6E;AAGtJ,OAAO,MAAMC,wCAAwC,GAA+CA,CAChGC,mBAAmB,EACnBC,eAAe,EACfC,2DAA2D,EAC3DC,yDAAyD,EACzDC,yDAAyD,EACzDC,gEAAgE,EAChEC,6DAA6D,EAC7DC,+DAA+D,EAC/DC,mDAAmD,EACnDC,kDAAkD,EAClDC,sDAAsD,KACtD;EACA,OAAO,CAACC,aAAa,EAAEC,OAAO,KAAI;IAC9B,MAAMC,2BAA2B,GAAGF,aAAa,CAACG,kBAAkB,EAAE;IAEtEnB,4BAA4B,CAACkB,2BAA2B,EAAED,OAAO,CAAC;IAElEnB,oCAAoC,CAACoB,2BAA2B,EAAED,OAAO,EAAE,cAAc,CAAC;IAE1FlB,2BAA2B,CAACmB,2BAA2B,EAAED,OAAO,EAAE,QAAQ,CAAC;IAE3E;IAEAlB,2BAA2B,CAACmB,2BAA2B,EAAED,OAAO,EAAE,MAAM,CAAC;IACzElB,2BAA2B,CAACmB,2BAA2B,EAAED,OAAO,EAAE,SAAS,CAAC;IAC5ElB,2BAA2B,CAACmB,2BAA2B,EAAED,OAAO,EAAE,WAAW,CAAC;IAE9E;IACA,IACI,CAACX,eAAe,CAACC,2DAA2D,EAAE,MAC1EA,2DAA2D,CAACS,aAAa,CAAC,CAC7E,EACH;MACEf,oDAAoD,CAACiB,2BAA2B,CAAC;;IAGrF;IACA,IACI,CAACZ,eAAe,CAACE,yDAAyD,EAAE,MACxEA,yDAAyD,CAACQ,aAAa,CAAC,CAC3E,EACH;MACEH,mDAAmD,CAACK,2BAA2B,CAAC;;IAGpF;IACA,IACI,CAACZ,eAAe,CAACG,yDAAyD,EAAE,MACxEA,yDAAyD,CAACO,aAAa,CAAC,CAC3E,EACH;MACEF,kDAAkD,CAACI,2BAA2B,EAAEF,aAAa,CAAC;;IAGlG;IACA,IACI,CAACV,eAAe,CAACI,gEAAgE,EAAE,MAC/EA,gEAAgE,CAACM,aAAa,CAAC,CAClF,EACH;MACEd,yDAAyD,CAACgB,2BAA2B,CAAC;;IAG1F;IACA,IACI,CAACZ,eAAe,CAACK,6DAA6D,EAAE,MAC5EA,6DAA6D,CAACK,aAAa,CAAC,CAC/E,EACH;MACED,sDAAsD,CAACG,2BAA2B,EAAEF,aAAa,CAAC;;IAGtG;IACA,IACI,CAACV,eAAe,CAACM,+DAA+D,EAAE,MAC9EA,+DAA+D,CAACI,aAAa,CAAC,CACjF,EACH;MACEb,wDAAwD,CAACe,2BAA2B,CAAC;;IAGzF;IACAb,mBAAmB,CAACW,aAAa,EAAEE,2BAA2B,CAAC;IAE/D,OAAOA,2BAA2B;EACtC,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}