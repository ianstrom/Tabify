{"ast":null,"code":"import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\nexport class FrequencyEnvelope extends Envelope {\n  constructor() {\n    super(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"FrequencyEnvelope\";\n    const options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    this._octaves = options.octaves;\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._exponent = this.input = new Pow({\n      context: this.context,\n      value: options.exponent\n    });\n    this._scale = this.output = new Scale({\n      context: this.context,\n      min: this._baseFrequency,\n      max: this._baseFrequency * Math.pow(2, this._octaves)\n    });\n    this._sig.chain(this._exponent, this._scale);\n  }\n  static getDefaults() {\n    return Object.assign(Envelope.getDefaults(), {\n      baseFrequency: 200,\n      exponent: 1,\n      octaves: 4\n    });\n  }\n  /**\n   * The envelope's minimum output value. This is the value which it\n   * starts at.\n   */\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n  set baseFrequency(min) {\n    const freq = this.toFrequency(min);\n    assertRange(freq, 0);\n    this._baseFrequency = freq;\n    this._scale.min = this._baseFrequency;\n    // update the max value when the min changes\n    this.octaves = this._octaves;\n  }\n  /**\n   * The number of octaves above the baseFrequency that the\n   * envelope will scale to.\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(octaves) {\n    this._octaves = octaves;\n    this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n  }\n  /**\n   * The envelope's exponent value.\n   */\n  get exponent() {\n    return this._exponent.value;\n  }\n  set exponent(exponent) {\n    this._exponent.value = exponent;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this._exponent.dispose();\n    this._scale.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["optionsFromArguments","Envelope","Scale","Pow","assertRange","FrequencyEnvelope","constructor","getDefaults","arguments","name","options","_octaves","octaves","_baseFrequency","toFrequency","baseFrequency","_exponent","input","context","value","exponent","_scale","output","min","max","Math","pow","_sig","chain","Object","assign","freq","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/component/envelope/FrequencyEnvelope.ts"],"sourcesContent":["import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Frequency, Hertz, NormalRange, Time } from \"../../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport interface FrequencyEnvelopeOptions extends EnvelopeOptions {\n\tbaseFrequency: Frequency;\n\toctaves: number;\n\texponent: number;\n}\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps. \n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\nexport class FrequencyEnvelope extends Envelope {\n\n\treadonly name: string = \"FrequencyEnvelope\";\n\n\t/**\n\t * Private reference to the base frequency as a number\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * The number of octaves\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Internal scaler from 0-1 to the final output range\n\t */\n\tprivate _scale: Scale;\n\n\t/**\n\t * Apply a power curve to the output\n\t */\n\tprivate _exponent: Pow;\n\n\t/**\n\t * @param attack\tthe attack time in seconds\n\t * @param decay\t\tthe decay time in seconds\n\t * @param sustain \ta percentage (0-1) of the full amplitude\n\t * @param release\tthe release time in seconds\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<FrequencyEnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis._octaves = options.octaves;\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\n\t\tthis._exponent = this.input = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent\n\t\t});\n\t\tthis._scale = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: this._baseFrequency,\n\t\t\tmax: this._baseFrequency * Math.pow(2, this._octaves),\n\t\t});\n\t\tthis._sig.chain(this._exponent, this._scale);\n\t}\n\n\tstatic getDefaults(): FrequencyEnvelopeOptions {\n\t\treturn Object.assign(Envelope.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\texponent: 1,\n\t\t\toctaves: 4,\n\t\t});\n\t}\n\n\t/**\n\t * The envelope's minimum output value. This is the value which it\n\t * starts at.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(min) {\n\t\tconst freq = this.toFrequency(min);\n\t\tassertRange(freq, 0);\n\t\tthis._baseFrequency = freq;\n\t\tthis._scale.min = this._baseFrequency;\n\t\t// update the max value when the min changes\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the baseFrequency that the\n\t * envelope will scale to.\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves: number) {\n\t\tthis._octaves = octaves;\n\t\tthis._scale.max = this._baseFrequency * Math.pow(2, octaves);\n\t}\n\n\t/**\n\t * The envelope's exponent value.\n\t */\n\tget exponent(): number {\n\t\treturn this._exponent.value;\n\t}\n\tset exponent(exponent) {\n\t\tthis._exponent.value = exponent;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponent.dispose();\n\t\tthis._scale.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}