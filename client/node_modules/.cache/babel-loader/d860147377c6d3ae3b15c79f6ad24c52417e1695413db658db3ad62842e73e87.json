{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  loop: false,\n  loopEnd: 0,\n  loopStart: 0,\n  playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class AudioBufferSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;\n      super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n      this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n      this._isBufferNullified = false;\n      this._isBufferSet = mergedOptions.buffer !== null;\n      this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n      this._onended = null;\n      // Bug #73: Safari does not export the correct values for maxValue and minValue.\n      this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n      return this._nativeAudioBufferSourceNode.buffer;\n    }\n    set buffer(value) {\n      this._nativeAudioBufferSourceNode.buffer = value;\n      // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.\n      if (value !== null) {\n        if (this._isBufferSet) {\n          throw createInvalidStateError();\n        }\n        this._isBufferSet = true;\n      }\n    }\n    get loop() {\n      return this._nativeAudioBufferSourceNode.loop;\n    }\n    set loop(value) {\n      this._nativeAudioBufferSourceNode.loop = value;\n    }\n    get loopEnd() {\n      return this._nativeAudioBufferSourceNode.loopEnd;\n    }\n    set loopEnd(value) {\n      this._nativeAudioBufferSourceNode.loopEnd = value;\n    }\n    get loopStart() {\n      return this._nativeAudioBufferSourceNode.loopStart;\n    }\n    set loopStart(value) {\n      this._nativeAudioBufferSourceNode.loopStart = value;\n    }\n    get onended() {\n      return this._onended;\n    }\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioBufferSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n    get playbackRate() {\n      return this._playbackRate;\n    }\n    start() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let duration = arguments.length > 2 ? arguments[2] : undefined;\n      this._nativeAudioBufferSourceNode.start(when, offset, duration);\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n      }\n      if (this.context.state !== 'closed') {\n        setInternalStateToActive(this);\n        const resetInternalStateToPassive = () => {\n          this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n          if (isActiveAudioNode(this)) {\n            setInternalStateToPassive(this);\n          }\n        };\n        this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n    stop() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this._nativeAudioBufferSourceNode.stop(when);\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.stop = when;\n      }\n    }\n  };\n};","map":{"version":3,"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","createAudioBufferSourceNodeConstructor","audioNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","createNativeAudioBufferSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","AudioBufferSourceNode","constructor","context","options","nativeContext","mergedOptions","nativeAudioBufferSourceNode","isOffline","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","_onended","_playbackRate","value","onended","wrappedListener","nativeOnEnded","start","when","arguments","length","undefined","offset","duration","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/audio-buffer-source-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { IAudioBufferSourceNode, IAudioBufferSourceOptions, IAudioParam, IAudioScheduledSourceNodeEventMap } from '../interfaces';\nimport {\n    TAnyAudioBuffer,\n    TAudioBufferSourceNodeConstructorFactory,\n    TAudioBufferSourceNodeRenderer,\n    TContext,\n    TEventHandler,\n    TNativeAudioBufferSourceNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n} as const;\n\nexport const createAudioBufferSourceNodeConstructor: TAudioBufferSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioBufferSourceNodeRenderer,\n    createAudioParam,\n    createInvalidStateError,\n    createNativeAudioBufferSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class AudioBufferSourceNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IAudioBufferSourceNode<T>\n    {\n        private _audioBufferSourceNodeRenderer: TAudioBufferSourceNodeRenderer<T>;\n\n        private _isBufferNullified: boolean;\n\n        private _isBufferSet: boolean;\n\n        private _nativeAudioBufferSourceNode: TNativeAudioBufferSourceNode;\n\n        private _onended: null | TEventHandler<this>;\n\n        private _playbackRate: IAudioParam;\n\n        constructor(context: T, options?: Partial<IAudioBufferSourceOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = <TAudioBufferSourceNodeRenderer<T>>(\n                (isOffline ? createAudioBufferSourceNodeRenderer() : null)\n            );\n\n            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = mergedOptions.buffer !== null;\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Safari does not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(\n                this,\n                isOffline,\n                nativeAudioBufferSourceNode.playbackRate,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n        }\n\n        get buffer(): null | TAnyAudioBuffer {\n            if (this._isBufferNullified) {\n                return null;\n            }\n\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n\n        set buffer(value) {\n            this._nativeAudioBufferSourceNode.buffer = value;\n\n            // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n\n                this._isBufferSet = true;\n            }\n        }\n\n        get loop(): boolean {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n\n        get loopEnd(): number {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n\n        get loopStart(): number {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        get playbackRate(): IAudioParam {\n            return this._playbackRate;\n        }\n\n        public start(when = 0, offset = 0, duration?: number): void {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeAudioBufferSourceNode.stop(when);\n\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}