{"ast":null,"code":"import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) => {\n  return (nativeContext, options) => {\n    const nativeWaveShaperNode = nativeContext.createWaveShaper();\n    /*\n     * Bug #119: Safari does not correctly map the values.\n     * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n     * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround\n     * isn't necessary anymore since v14.0.2 of Safari.\n     */\n    if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext' && nativeContext.createGain().gain.automationRate === undefined) {\n      return createNativeWaveShaperNodeFaker(nativeContext, options);\n    }\n    assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n    const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);\n    // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n    if (curve !== null && curve.length < 2) {\n      throw createInvalidStateError();\n    }\n    // Only values of type Float32Array can be assigned to the curve property.\n    assignNativeAudioNodeOption(nativeWaveShaperNode, {\n      curve\n    }, 'curve');\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n    let disconnectNativeAudioBufferSourceNode = null;\n    let isConnected = false;\n    overwriteAccessors(nativeWaveShaperNode, 'curve', get => () => get.call(nativeWaveShaperNode), set => value => {\n      set.call(nativeWaveShaperNode, value);\n      if (isConnected) {\n        if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n          disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n        } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n          disconnectNativeAudioBufferSourceNode();\n          disconnectNativeAudioBufferSourceNode = null;\n        }\n      }\n      return value;\n    });\n    const whenConnected = () => {\n      isConnected = true;\n      if (isDCCurve(nativeWaveShaperNode.curve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n      }\n    };\n    const whenDisconnected = () => {\n      isConnected = false;\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"names":["assignNativeAudioNodeOption","assignNativeAudioNodeOptions","createNativeWaveShaperNodeFactory","createConnectedNativeAudioBufferSourceNode","createInvalidStateError","createNativeWaveShaperNodeFaker","isDCCurve","monitorConnections","nativeAudioContextConstructor","overwriteAccessors","nativeContext","options","nativeWaveShaperNode","createWaveShaper","name","createGain","gain","automationRate","undefined","curve","Float32Array","length","disconnectNativeAudioBufferSourceNode","isConnected","get","call","set","value","whenConnected","whenDisconnected"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/native-wave-shaper-node-factory.ts"],"sourcesContent":["import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeWaveShaperNodeFactoryFactory } from '../types';\n\nexport const createNativeWaveShaperNodeFactory: TNativeWaveShaperNodeFactoryFactory = (\n    createConnectedNativeAudioBufferSourceNode,\n    createInvalidStateError,\n    createNativeWaveShaperNodeFaker,\n    isDCCurve,\n    monitorConnections,\n    nativeAudioContextConstructor,\n    overwriteAccessors\n) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = nativeContext.createWaveShaper();\n\n        /*\n         * Bug #119: Safari does not correctly map the values.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n         * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround\n         * isn't necessary anymore since v14.0.2 of Safari.\n         */\n        if (\n            nativeAudioContextConstructor !== null &&\n            nativeAudioContextConstructor.name === 'webkitAudioContext' &&\n            nativeContext.createGain().gain.automationRate === undefined\n        ) {\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n\n        const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);\n\n        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n\n        // Only values of type Float32Array can be assigned to the curve property.\n        assignNativeAudioNodeOption(nativeWaveShaperNode, { curve }, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n\n        let disconnectNativeAudioBufferSourceNode: null | (() => void) = null;\n        let isConnected = false;\n\n        overwriteAccessors(\n            nativeWaveShaperNode,\n            'curve',\n            (get) => () => get.call(nativeWaveShaperNode),\n            (set) => (value) => {\n                set.call(nativeWaveShaperNode, value);\n\n                if (isConnected) {\n                    if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(\n                            nativeContext,\n                            nativeWaveShaperNode\n                        );\n                    } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n                        disconnectNativeAudioBufferSourceNode();\n                        disconnectNativeAudioBufferSourceNode = null;\n                    }\n                }\n\n                return value;\n            }\n        );\n\n        const whenConnected = () => {\n            isConnected = true;\n\n            if (isDCCurve(nativeWaveShaperNode.curve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n            }\n        };\n        const whenDisconnected = () => {\n            isConnected = false;\n\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n\n        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n    };\n};\n"],"mappings":"AAAA,SAASA,2BAA2B,QAAQ,4CAA4C;AACxF,SAASC,4BAA4B,QAAQ,6CAA6C;AAG1F,OAAO,MAAMC,iCAAiC,GAAwCA,CAClFC,0CAA0C,EAC1CC,uBAAuB,EACvBC,+BAA+B,EAC/BC,SAAS,EACTC,kBAAkB,EAClBC,6BAA6B,EAC7BC,kBAAkB,KAClB;EACA,OAAO,CAACC,aAAa,EAAEC,OAAO,KAAI;IAC9B,MAAMC,oBAAoB,GAAGF,aAAa,CAACG,gBAAgB,EAAE;IAE7D;;;;;;IAMA,IACIL,6BAA6B,KAAK,IAAI,IACtCA,6BAA6B,CAACM,IAAI,KAAK,oBAAoB,IAC3DJ,aAAa,CAACK,UAAU,EAAE,CAACC,IAAI,CAACC,cAAc,KAAKC,SAAS,EAC9D;MACE,OAAOb,+BAA+B,CAACK,aAAa,EAAEC,OAAO,CAAC;;IAGlEV,4BAA4B,CAACW,oBAAoB,EAAED,OAAO,CAAC;IAE3D,MAAMQ,KAAK,GAAGR,OAAO,CAACQ,KAAK,KAAK,IAAI,IAAIR,OAAO,CAACQ,KAAK,YAAYC,YAAY,GAAGT,OAAO,CAACQ,KAAK,GAAG,IAAIC,YAAY,CAACT,OAAO,CAACQ,KAAK,CAAC;IAE/H;IACA,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MACpC,MAAMjB,uBAAuB,EAAE;;IAGnC;IACAJ,2BAA2B,CAACY,oBAAoB,EAAE;MAAEO;IAAK,CAAE,EAAE,OAAO,CAAC;IACrEnB,2BAA2B,CAACY,oBAAoB,EAAED,OAAO,EAAE,YAAY,CAAC;IAExE,IAAIW,qCAAqC,GAAwB,IAAI;IACrE,IAAIC,WAAW,GAAG,KAAK;IAEvBd,kBAAkB,CACdG,oBAAoB,EACpB,OAAO,EACNY,GAAG,IAAK,MAAMA,GAAG,CAACC,IAAI,CAACb,oBAAoB,CAAC,EAC5Cc,GAAG,IAAMC,KAAK,IAAI;MACfD,GAAG,CAACD,IAAI,CAACb,oBAAoB,EAAEe,KAAK,CAAC;MAErC,IAAIJ,WAAW,EAAE;QACb,IAAIjB,SAAS,CAACqB,KAAK,CAAC,IAAIL,qCAAqC,KAAK,IAAI,EAAE;UACpEA,qCAAqC,GAAGnB,0CAA0C,CAC9EO,aAAa,EACbE,oBAAoB,CACvB;SACJ,MAAM,IAAI,CAACN,SAAS,CAACqB,KAAK,CAAC,IAAIL,qCAAqC,KAAK,IAAI,EAAE;UAC5EA,qCAAqC,EAAE;UACvCA,qCAAqC,GAAG,IAAI;;;MAIpD,OAAOK,KAAK;IAChB,CAAC,CACJ;IAED,MAAMC,aAAa,GAAGA,CAAA,KAAK;MACvBL,WAAW,GAAG,IAAI;MAElB,IAAIjB,SAAS,CAACM,oBAAoB,CAACO,KAAK,CAAC,EAAE;QACvCG,qCAAqC,GAAGnB,0CAA0C,CAACO,aAAa,EAAEE,oBAAoB,CAAC;;IAE/H,CAAC;IACD,MAAMiB,gBAAgB,GAAGA,CAAA,KAAK;MAC1BN,WAAW,GAAG,KAAK;MAEnB,IAAID,qCAAqC,KAAK,IAAI,EAAE;QAChDA,qCAAqC,EAAE;QACvCA,qCAAqC,GAAG,IAAI;;IAEpD,CAAC;IAED,OAAOf,kBAAkB,CAACK,oBAAoB,EAAEgB,aAAa,EAAEC,gBAAgB,CAAC;EACpF,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}