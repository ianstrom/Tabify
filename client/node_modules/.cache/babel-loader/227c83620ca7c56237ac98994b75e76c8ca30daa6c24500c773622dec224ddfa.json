{"ast":null,"code":"import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport class Panner3D extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n    this.name = \"Panner3D\";\n    const options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n    this._panner = this.input = this.output = this.context.createPanner();\n    // set some values\n    this.panningModel = options.panningModel;\n    this.maxDistance = options.maxDistance;\n    this.distanceModel = options.distanceModel;\n    this.coneOuterGain = options.coneOuterGain;\n    this.coneOuterAngle = options.coneOuterAngle;\n    this.coneInnerAngle = options.coneInnerAngle;\n    this.refDistance = options.refDistance;\n    this.rolloffFactor = options.rolloffFactor;\n    this.positionX = new Param({\n      context: this.context,\n      param: this._panner.positionX,\n      value: options.positionX\n    });\n    this.positionY = new Param({\n      context: this.context,\n      param: this._panner.positionY,\n      value: options.positionY\n    });\n    this.positionZ = new Param({\n      context: this.context,\n      param: this._panner.positionZ,\n      value: options.positionZ\n    });\n    this.orientationX = new Param({\n      context: this.context,\n      param: this._panner.orientationX,\n      value: options.orientationX\n    });\n    this.orientationY = new Param({\n      context: this.context,\n      param: this._panner.orientationY,\n      value: options.orientationY\n    });\n    this.orientationZ = new Param({\n      context: this.context,\n      param: this._panner.orientationZ,\n      value: options.orientationZ\n    });\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      coneInnerAngle: 360,\n      coneOuterAngle: 360,\n      coneOuterGain: 0,\n      distanceModel: \"inverse\",\n      maxDistance: 10000,\n      orientationX: 0,\n      orientationY: 0,\n      orientationZ: 0,\n      panningModel: \"equalpower\",\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      refDistance: 1,\n      rolloffFactor: 1\n    });\n  }\n  /**\n   * Sets the position of the source in 3d space.\n   */\n  setPosition(x, y, z) {\n    this.positionX.value = x;\n    this.positionY.value = y;\n    this.positionZ.value = z;\n    return this;\n  }\n  /**\n   * Sets the orientation of the source in 3d space.\n   */\n  setOrientation(x, y, z) {\n    this.orientationX.value = x;\n    this.orientationY.value = y;\n    this.orientationZ.value = z;\n    return this;\n  }\n  /**\n   * The panning model. Either \"equalpower\" or \"HRTF\".\n   */\n  get panningModel() {\n    return this._panner.panningModel;\n  }\n  set panningModel(val) {\n    this._panner.panningModel = val;\n  }\n  /**\n   * A reference distance for reducing volume as source move further from the listener\n   */\n  get refDistance() {\n    return this._panner.refDistance;\n  }\n  set refDistance(val) {\n    this._panner.refDistance = val;\n  }\n  /**\n   * Describes how quickly the volume is reduced as source moves away from listener.\n   */\n  get rolloffFactor() {\n    return this._panner.rolloffFactor;\n  }\n  set rolloffFactor(val) {\n    this._panner.rolloffFactor = val;\n  }\n  /**\n   * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n   */\n  get distanceModel() {\n    return this._panner.distanceModel;\n  }\n  set distanceModel(val) {\n    this._panner.distanceModel = val;\n  }\n  /**\n   * The angle, in degrees, inside of which there will be no volume reduction\n   */\n  get coneInnerAngle() {\n    return this._panner.coneInnerAngle;\n  }\n  set coneInnerAngle(val) {\n    this._panner.coneInnerAngle = val;\n  }\n  /**\n   * The angle, in degrees, outside of which the volume will be reduced\n   * to a constant value of coneOuterGain\n   */\n  get coneOuterAngle() {\n    return this._panner.coneOuterAngle;\n  }\n  set coneOuterAngle(val) {\n    this._panner.coneOuterAngle = val;\n  }\n  /**\n   * The gain outside of the coneOuterAngle\n   */\n  get coneOuterGain() {\n    return this._panner.coneOuterGain;\n  }\n  set coneOuterGain(val) {\n    this._panner.coneOuterGain = val;\n  }\n  /**\n   * The maximum distance between source and listener,\n   * after which the volume will not be reduced any further.\n   */\n  get maxDistance() {\n    return this._panner.maxDistance;\n  }\n  set maxDistance(val) {\n    this._panner.maxDistance = val;\n  }\n  dispose() {\n    super.dispose();\n    this._panner.disconnect();\n    this.orientationX.dispose();\n    this.orientationY.dispose();\n    this.orientationZ.dispose();\n    this.positionX.dispose();\n    this.positionY.dispose();\n    this.positionZ.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Param","ToneAudioNode","optionsFromArguments","Panner3D","constructor","getDefaults","arguments","name","options","_panner","input","output","context","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","positionX","param","value","positionY","positionZ","orientationX","orientationY","orientationZ","Object","assign","setPosition","x","y","z","setOrientation","val","dispose","disconnect"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/component/channel/Panner3D.ts"],"sourcesContent":["import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Degrees, GainFactor } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n\nexport interface Panner3DOptions extends ToneAudioNodeOptions {\n\tconeInnerAngle: Degrees;\n\tconeOuterAngle: Degrees;\n\tconeOuterGain: GainFactor;\n\tdistanceModel: DistanceModelType;\n\tmaxDistance: number;\n\torientationX: number;\n\torientationY: number;\n\torientationZ: number;\n\tpanningModel: PanningModelType;\n\tpositionX: number;\n\tpositionY: number;\n\tpositionZ: number;\n\trefDistance: number;\n\trolloffFactor: number;\n}\n\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport class Panner3D extends ToneAudioNode<Panner3DOptions> {\n\n\treadonly name: string = \"Panner3D\";\n\n\t/**\n\t * The panning object\n\t */\n\tprivate _panner: PannerNode;\n\treadonly input: PannerNode;\n\treadonly output: PannerNode;\n\n\treadonly positionX: Param<\"number\">;\n\treadonly positionY: Param<\"number\">;\n\treadonly positionZ: Param<\"number\">;\n\n\treadonly orientationX: Param<\"number\">;\n\treadonly orientationY: Param<\"number\">;\n\treadonly orientationZ: Param<\"number\">;\n\n\t/**\n\t * @param positionX The initial x position.\n\t * @param positionY The initial y position.\n\t * @param positionZ The initial z position.\n\t */\n\tconstructor(positionX: number, positionY: number, positionZ: number);\n\tconstructor(options?: Partial<Panner3DOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n\t\tconst options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n\n\t\tthis._panner = this.input = this.output = this.context.createPanner();\n\t\t// set some values\n\t\tthis.panningModel = options.panningModel;\n\t\tthis.maxDistance = options.maxDistance;\n\t\tthis.distanceModel = options.distanceModel;\n\t\tthis.coneOuterGain = options.coneOuterGain;\n\t\tthis.coneOuterAngle = options.coneOuterAngle;\n\t\tthis.coneInnerAngle = options.coneInnerAngle;\n\t\tthis.refDistance = options.refDistance;\n\t\tthis.rolloffFactor = options.rolloffFactor;\n\n\t\tthis.positionX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionX,\n\t\t\tvalue: options.positionX,\n\t\t});\n\t\tthis.positionY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionY,\n\t\t\tvalue: options.positionY,\n\t\t});\n\t\tthis.positionZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionZ,\n\t\t\tvalue: options.positionZ,\n\t\t});\n\t\tthis.orientationX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationX,\n\t\t\tvalue: options.orientationX,\n\t\t});\n\t\tthis.orientationY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationY,\n\t\t\tvalue: options.orientationY,\n\t\t});\n\t\tthis.orientationZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationZ,\n\t\t\tvalue: options.orientationZ,\n\t\t});\n\t}\n\n\tstatic getDefaults(): Panner3DOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconeInnerAngle: 360,\n\t\t\tconeOuterAngle: 360,\n\t\t\tconeOuterGain: 0,\n\t\t\tdistanceModel: \"inverse\" as DistanceModelType,\n\t\t\tmaxDistance: 10000,\n\t\t\torientationX: 0,\n\t\t\torientationY: 0,\n\t\t\torientationZ: 0,\n\t\t\tpanningModel: \"equalpower\" as PanningModelType,\n\t\t\tpositionX: 0,\n\t\t\tpositionY: 0,\n\t\t\tpositionZ: 0,\n\t\t\trefDistance: 1,\n\t\t\trolloffFactor: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Sets the position of the source in 3d space.\n\t */\n\tsetPosition(x: number, y: number, z: number): this {\n\t\tthis.positionX.value = x;\n\t\tthis.positionY.value = y;\n\t\tthis.positionZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the orientation of the source in 3d space.\n\t */\n\tsetOrientation(x: number, y: number, z: number): this {\n\t\tthis.orientationX.value = x;\n\t\tthis.orientationY.value = y;\n\t\tthis.orientationZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The panning model. Either \"equalpower\" or \"HRTF\".\n\t */\n\tget panningModel(): PanningModelType {\n\t\treturn this._panner.panningModel;\n\t}\n\tset panningModel(val) {\n\t\tthis._panner.panningModel = val;\n\t}\n\n\t/**\n\t * A reference distance for reducing volume as source move further from the listener\n\t */\n\tget refDistance(): number {\n\t\treturn this._panner.refDistance;\n\t}\n\tset refDistance(val) {\n\t\tthis._panner.refDistance = val;\n\t}\n\n\t/**\n\t * Describes how quickly the volume is reduced as source moves away from listener.\n\t */\n\tget rolloffFactor(): number {\n\t\treturn this._panner.rolloffFactor;\n\t}\n\tset rolloffFactor(val) {\n\t\tthis._panner.rolloffFactor = val;\n\t}\n\n\t/**\n\t * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t */\n\tget distanceModel(): DistanceModelType {\n\t\treturn this._panner.distanceModel;\n\t}\n\tset distanceModel(val) {\n\t\tthis._panner.distanceModel = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, inside of which there will be no volume reduction\n\t */\n\tget coneInnerAngle(): Degrees {\n\t\treturn this._panner.coneInnerAngle;\n\t}\n\tset coneInnerAngle(val) {\n\t\tthis._panner.coneInnerAngle = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, outside of which the volume will be reduced\n\t * to a constant value of coneOuterGain\n\t */\n\tget coneOuterAngle(): Degrees {\n\t\treturn this._panner.coneOuterAngle;\n\t}\n\tset coneOuterAngle(val) {\n\t\tthis._panner.coneOuterAngle = val;\n\t}\n\n\t/**\n\t * The gain outside of the coneOuterAngle\n\t */\n\tget coneOuterGain(): GainFactor {\n\t\treturn this._panner.coneOuterGain;\n\t}\n\tset coneOuterGain(val) {\n\t\tthis._panner.coneOuterGain = val;\n\t}\n\n\t/**\n\t * The maximum distance between source and listener,\n\t * after which the volume will not be reduced any further.\n\t */\n\tget maxDistance(): number {\n\t\treturn this._panner.maxDistance;\n\t}\n\tset maxDistance(val) {\n\t\tthis._panner.maxDistance = val;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.orientationX.dispose();\n\t\tthis.orientationY.dispose();\n\t\tthis.orientationZ.dispose();\n\t\tthis.positionX.dispose();\n\t\tthis.positionY.dispose();\n\t\tthis.positionZ.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}