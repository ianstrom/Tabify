{"ast":null,"code":"import { AudioContext as stdAudioContext, AudioWorkletNode as stdAudioWorkletNode, OfflineAudioContext as stdOfflineAudioContext } from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(options) {\n  return new stdAudioContext(options);\n}\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels, length, sampleRate) {\n  return new stdOfflineAudioContext(channels, length, sampleRate);\n}\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow = typeof self === \"object\" ? self : null;\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow && (theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\nexport function createAudioWorkletNode(context, name, options) {\n  assert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\");\n  // @ts-ignore\n  return new stdAudioWorkletNode(context, name, options);\n}\n/**\n * This promise resolves to a boolean which indicates if the\n * functionality is supported within the currently used browse.\n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\nexport { isSupported as supported } from \"standardized-audio-context\";","map":{"version":3,"names":["AudioContext","stdAudioContext","AudioWorkletNode","stdAudioWorkletNode","OfflineAudioContext","stdOfflineAudioContext","assert","isDefined","createAudioContext","options","createOfflineAudioContext","channels","length","sampleRate","theWindow","self","hasAudioContext","hasOwnProperty","createAudioWorkletNode","context","name","isSupported","supported"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/core/context/AudioContext.ts"],"sourcesContent":["import {\n\tAudioContext as stdAudioContext,\n\tAudioWorkletNode as stdAudioWorkletNode,\n\tOfflineAudioContext as stdOfflineAudioContext\n} from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(options?: AudioContextOptions): AudioContext {\n\treturn new stdAudioContext(options) as unknown as AudioContext;\n}\n\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels: number, length: number, sampleRate: number): OfflineAudioContext {\n\treturn new stdOfflineAudioContext(channels, length, sampleRate) as unknown as OfflineAudioContext;\n}\n\n/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n}\n\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\n\nexport function createAudioWorkletNode(context: AnyAudioContext, name: string, options?: Partial<AudioWorkletNodeOptions>): AudioWorkletNode {\n\tassert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\");\n\t// @ts-ignore\n\treturn new stdAudioWorkletNode(context, name, options);\n}\n\n/**\n * This promise resolves to a boolean which indicates if the \n * functionality is supported within the currently used browse. \n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\nexport { isSupported as supported } from \"standardized-audio-context\";\n"],"mappings":"AAAA,SACCA,YAAY,IAAIC,eAAe,EAC/BC,gBAAgB,IAAIC,mBAAmB,EACvCC,mBAAmB,IAAIC,sBAAsB,QACvC,4BAA4B;AACnC,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,SAAS,QAAQ,mBAAmB;AAE7C;;;AAGA,OAAM,SAAUC,kBAAkBA,CAACC,OAA6B;EAC/D,OAAO,IAAIR,eAAe,CAACQ,OAAO,CAA4B;AAC/D;AAEA;;;AAGA,OAAM,SAAUC,yBAAyBA,CAACC,QAAgB,EAAEC,MAAc,EAAEC,UAAkB;EAC7F,OAAO,IAAIR,sBAAsB,CAACM,QAAQ,EAAEC,MAAM,EAAEC,UAAU,CAAmC;AAClG;AAeA;;;;AAIA,OAAO,MAAMC,SAAS,GAAsB,OAAOC,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAG,IAAI;AAElF;;;;AAIA,OAAO,MAAMC,eAAe,GAAGF,SAAS,KACtCA,SAAS,CAACG,cAAc,CAAC,cAAc,CAAC,IAAIH,SAAS,CAACG,cAAc,CAAC,oBAAoB,CAAC,CAAC;AAE7F,OAAM,SAAUC,sBAAsBA,CAACC,OAAwB,EAAEC,IAAY,EAAEX,OAA0C;EACxHH,MAAM,CAACC,SAAS,CAACJ,mBAAmB,CAAC,EAAE,+DAA+D,CAAC;EACvG;EACA,OAAO,IAAIA,mBAAmB,CAACgB,OAAO,EAAEC,IAAI,EAAEX,OAAO,CAAC;AACvD;AAEA;;;;;AAKA,SAASY,WAAW,IAAIC,SAAS,QAAQ,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}