{"ast":null,"code":"import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToActive = audioNode => {\n  if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n    throw new Error('The AudioNode is already stored.');\n  }\n  ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n  getEventListenersOfAudioNode(audioNode).forEach(eventListener => eventListener(true));\n};","map":{"version":3,"names":["ACTIVE_AUDIO_NODE_STORE","getEventListenersOfAudioNode","setInternalStateToActive","audioNode","has","Error","add","forEach","eventListener"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/helpers/set-internal-state-to-active.ts"],"sourcesContent":["import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\n\nexport const setInternalStateToActive = <T extends TContext>(audioNode: IAudioNode<T>) => {\n    if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is already stored.');\n    }\n\n    ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n\n    getEventListenersOfAudioNode(audioNode).forEach((eventListener) => eventListener(true));\n};\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,YAAY;AAGpD,SAASC,4BAA4B,QAAQ,qCAAqC;AAElF,OAAO,MAAMC,wBAAwB,GAAwBC,SAAwB,IAAI;EACrF,IAAIH,uBAAuB,CAACI,GAAG,CAACD,SAAS,CAAC,EAAE;IACxC,MAAM,IAAIE,KAAK,CAAC,kCAAkC,CAAC;;EAGvDL,uBAAuB,CAACM,GAAG,CAACH,SAAS,CAAC;EAEtCF,4BAA4B,CAACE,SAAS,CAAC,CAACI,OAAO,CAAEC,aAAa,IAAKA,aAAa,CAAC,IAAI,CAAC,CAAC;AAC3F,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}