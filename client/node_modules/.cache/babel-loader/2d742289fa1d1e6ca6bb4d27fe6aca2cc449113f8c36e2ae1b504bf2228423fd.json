{"ast":null,"code":"import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n  return (nativeContext, _ref) => {\n    let {\n      offset,\n      ...audioNodeOptions\n    } = _ref;\n    const audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n      buffer: null,\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      playbackRate: 1\n    });\n    const gainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: offset\n    });\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    const channelData = audioBuffer.getChannelData(0);\n    // Bug #95: Safari does not play or loop one sample buffers.\n    channelData[0] = 1;\n    channelData[1] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.loop = true;\n    const nativeConstantSourceNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n      set channelCount(value) {\n        gainNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        gainNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return gainNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        gainNode.channelInterpretation = value;\n      },\n      get context() {\n        return gainNode.context;\n      },\n      get inputs() {\n        return [];\n      },\n      get numberOfInputs() {\n        return audioBufferSourceNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return gainNode.numberOfOutputs;\n      },\n      get offset() {\n        return gainNode.gain;\n      },\n      get onended() {\n        return audioBufferSourceNode.onended;\n      },\n      set onended(value) {\n        audioBufferSourceNode.onended = value;\n      },\n      addEventListener() {\n        return audioBufferSourceNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent() {\n        return audioBufferSourceNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener() {\n        return audioBufferSourceNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      start() {\n        let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n      },\n      stop() {\n        let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n      }\n    };\n    const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n    // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n    addSilentConnection(nativeContext, audioBufferSourceNode);\n    return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"names":["interceptConnections","createNativeConstantSourceNodeFakerFactory","addSilentConnection","createNativeAudioBufferSourceNode","createNativeGainNode","monitorConnections","nativeContext","_ref","offset","audioNodeOptions","audioBuffer","createBuffer","audioBufferSourceNode","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","gainNode","gain","channelData","getChannelData","nativeConstantSourceNodeFaker","bufferSize","undefined","value","context","inputs","numberOfInputs","numberOfOutputs","onended","addEventListener","arguments","length","dispatchEvent","removeEventListener","start","when","call","stop","whenConnected","connect","whenDisconnected","disconnect"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/native-constant-source-node-faker-factory.ts"],"sourcesContent":["import { interceptConnections } from '../helpers/intercept-connections';\nimport {\n    TNativeAudioBufferSourceNode,\n    TNativeAudioNode,\n    TNativeConstantSourceNode,\n    TNativeConstantSourceNodeFakerFactoryFactory\n} from '../types';\n\nexport const createNativeConstantSourceNodeFakerFactory: TNativeConstantSourceNodeFakerFactoryFactory = (\n    addSilentConnection,\n    createNativeAudioBufferSourceNode,\n    createNativeGainNode,\n    monitorConnections\n) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n            buffer: null,\n            channelCount: 2,\n            channelCountMode: 'max',\n            channelInterpretation: 'speakers',\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            playbackRate: 1\n        });\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize(): undefined {\n                return undefined;\n            },\n            get channelCount(): number {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode(): TNativeConstantSourceNode['channelCountMode'] {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativeConstantSourceNode['channelInterpretation'] {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context(): TNativeConstantSourceNode['context'] {\n                return gainNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [];\n            },\n            get numberOfInputs(): number {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return gainNode.numberOfOutputs;\n            },\n            get offset(): TNativeConstantSourceNode['offset'] {\n                return gainNode.gain;\n            },\n            get onended(): TNativeConstantSourceNode['onended'] {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = <TNativeAudioBufferSourceNode['onended']>value;\n            },\n            addEventListener(...args: any[]): void {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0): void {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0): void {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n\n        const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, audioBufferSourceNode);\n\n        return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}