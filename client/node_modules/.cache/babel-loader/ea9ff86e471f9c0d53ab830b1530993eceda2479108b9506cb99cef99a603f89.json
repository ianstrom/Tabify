{"ast":null,"code":"import { Loop } from \"./Loop\";\nimport { PatternGenerator } from \"./PatternGenerator\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns.\n * @example\n * const pattern = new Tone.Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\nexport class Pattern extends Loop {\n  constructor() {\n    super(optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]));\n    this.name = \"Pattern\";\n    const options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n    this.callback = options.callback;\n    this._values = options.values;\n    this._pattern = PatternGenerator(options.values, options.pattern);\n    this._type = options.pattern;\n  }\n  static getDefaults() {\n    return Object.assign(Loop.getDefaults(), {\n      pattern: \"up\",\n      values: [],\n      callback: noOp\n    });\n  }\n  /**\n   * Internal function called when the notes should be called\n   */\n  _tick(time) {\n    const value = this._pattern.next();\n    this._value = value.value;\n    this.callback(time, this._value);\n  }\n  /**\n   * The array of events.\n   */\n  get values() {\n    return this._values;\n  }\n  set values(val) {\n    this._values = val;\n    // reset the pattern\n    this.pattern = this._type;\n  }\n  /**\n   * The current value of the pattern.\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * The pattern type. See Tone.CtrlPattern for the full list of patterns.\n   */\n  get pattern() {\n    return this._type;\n  }\n  set pattern(pattern) {\n    this._type = pattern;\n    this._pattern = PatternGenerator(this._values, this._type);\n  }\n}","map":{"version":3,"names":["Loop","PatternGenerator","optionsFromArguments","noOp","Pattern","constructor","getDefaults","arguments","name","options","callback","_values","values","_pattern","pattern","_type","Object","assign","_tick","time","value","next","_value","val"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/event/Pattern.ts"],"sourcesContent":["import { Loop, LoopOptions } from \"./Loop\";\nimport { PatternGenerator, PatternName } from \"./PatternGenerator\";\nimport { ToneEventCallback } from \"./ToneEvent\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Seconds } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\n\nexport interface PatternOptions<ValueType> extends LoopOptions {\n\tpattern: PatternName;\n\tvalues: ValueType[];\n\tcallback: (time: Seconds, value?: ValueType) => void;\n}\n\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns. \n * @example\n * const pattern = new Tone.Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\nexport class Pattern<ValueType> extends Loop<PatternOptions<ValueType>> {\n\n\treadonly name: string = \"Pattern\";\n\n\t/**\n\t * The pattern generator function\n\t */\n\tprivate _pattern: Iterator<ValueType>;\n\n\t/**\n\t * The current value\n\t */\n\tprivate _value?: ValueType;\n\n\t/**\n\t * Hold the pattern type\n\t */\n\tprivate _type: PatternName;\n\n\t/**\n\t * Hold the values\n\t */\n\tprivate _values: ValueType[];\n\n\t/**\n\t * The callback to be invoked at a regular interval\n\t */\n\tcallback: (time: Seconds, value?: ValueType) => void;\n\n\t/**\n\t * @param  callback The callback to invoke with the event.\n\t * @param  values The values to arpeggiate over.\n\t * @param  pattern  The name of the pattern\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tvalues?: ValueType[],\n\t\tpattern?: PatternName,\n\t);\n\tconstructor(options?: Partial<PatternOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]));\n\t\tconst options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._values = options.values;\n\t\tthis._pattern = PatternGenerator(options.values, options.pattern);\n\t\tthis._type = options.pattern;\n\t}\n\n\tstatic getDefaults(): PatternOptions<any> {\n\t\treturn Object.assign(Loop.getDefaults(), {\n\t\t\tpattern: \"up\" as \"up\",\n\t\t\tvalues: [],\n\t\t\tcallback: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst value = this._pattern.next() as IteratorResult<ValueType>;\n\t\tthis._value = value.value;\n\t\tthis.callback(time, this._value);\n\t}\n\n\t/**\n\t * The array of events.\n\t */\n\tget values(): ValueType[] {\n\t\treturn this._values;\n\t}\n\tset values(val) {\n\t\tthis._values = val;\n\t\t// reset the pattern\n\t\tthis.pattern = this._type;\n\t}\n\n\t/**\n\t * The current value of the pattern.\n\t */\n\tget value(): ValueType | undefined {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t */\n\tget pattern(): PatternName {\n\t\treturn this._type;\n\t}\n\tset pattern(pattern) {\n\t\tthis._type = pattern;\n\t\tthis._pattern = PatternGenerator(this._values, this._type);\n\t}\n}\n\n"],"mappings":"AAAA,SAASA,IAAI,QAAqB,QAAQ;AAC1C,SAASC,gBAAgB,QAAqB,oBAAoB;AAElE,SAASC,oBAAoB,QAAQ,uBAAuB;AAE5D,SAASC,IAAI,QAAQ,wBAAwB;AAQ7C;;;;;;;;;AASA,OAAM,MAAOC,OAAmB,SAAQJ,IAA+B;EAwCtEK,YAAA;IAEC,KAAK,CAACH,oBAAoB,CAACE,OAAO,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;IAxCxF,KAAAC,IAAI,GAAW,SAAS;IAyChC,MAAMC,OAAO,GAAGP,oBAAoB,CAACE,OAAO,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAEzG,IAAI,CAACG,QAAQ,GAAGD,OAAO,CAACC,QAAQ;IAChC,IAAI,CAACC,OAAO,GAAGF,OAAO,CAACG,MAAM;IAC7B,IAAI,CAACC,QAAQ,GAAGZ,gBAAgB,CAACQ,OAAO,CAACG,MAAM,EAAEH,OAAO,CAACK,OAAO,CAAC;IACjE,IAAI,CAACC,KAAK,GAAGN,OAAO,CAACK,OAAO;EAC7B;EAEA,OAAOR,WAAWA,CAAA;IACjB,OAAOU,MAAM,CAACC,MAAM,CAACjB,IAAI,CAACM,WAAW,EAAE,EAAE;MACxCQ,OAAO,EAAE,IAAY;MACrBF,MAAM,EAAE,EAAE;MACVF,QAAQ,EAAEP;KACV,CAAC;EACH;EAEA;;;EAGUe,KAAKA,CAACC,IAAa;IAC5B,MAAMC,KAAK,GAAG,IAAI,CAACP,QAAQ,CAACQ,IAAI,EAA+B;IAC/D,IAAI,CAACC,MAAM,GAAGF,KAAK,CAACA,KAAK;IACzB,IAAI,CAACV,QAAQ,CAACS,IAAI,EAAE,IAAI,CAACG,MAAM,CAAC;EACjC;EAEA;;;EAGA,IAAIV,MAAMA,CAAA;IACT,OAAO,IAAI,CAACD,OAAO;EACpB;EACA,IAAIC,MAAMA,CAACW,GAAG;IACb,IAAI,CAACZ,OAAO,GAAGY,GAAG;IAClB;IACA,IAAI,CAACT,OAAO,GAAG,IAAI,CAACC,KAAK;EAC1B;EAEA;;;EAGA,IAAIK,KAAKA,CAAA;IACR,OAAO,IAAI,CAACE,MAAM;EACnB;EAEA;;;EAGA,IAAIR,OAAOA,CAAA;IACV,OAAO,IAAI,CAACC,KAAK;EAClB;EACA,IAAID,OAAOA,CAACA,OAAO;IAClB,IAAI,CAACC,KAAK,GAAGD,OAAO;IACpB,IAAI,CAACD,QAAQ,GAAGZ,gBAAgB,CAAC,IAAI,CAACU,OAAO,EAAE,IAAI,CAACI,KAAK,CAAC;EAC3D"},"metadata":{},"sourceType":"module","externalDependencies":[]}