{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Merge } from \"./Merge\";\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\nexport class Mono extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Mono.getDefaults(), arguments));\n    this.name = \"Mono\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this._merge = this.output = new Merge({\n      channels: 2,\n      context: this.context\n    });\n    this.input.connect(this._merge, 0, 0);\n    this.input.connect(this._merge, 0, 1);\n  }\n  dispose() {\n    super.dispose();\n    this._merge.dispose();\n    this.input.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","ToneAudioNode","optionsFromArguments","Merge","Mono","constructor","getDefaults","arguments","name","input","context","_merge","output","channels","connect","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/component/channel/Mono.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Merge } from \"./Merge\";\n\nexport type MonoOptions = ToneAudioNodeOptions;\n\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\nexport class Mono extends ToneAudioNode<MonoOptions> {\n\n\treadonly name: string = \"Mono\";\n\n\t/**\n\t * merge the signal\n\t */\n\tprivate _merge: Merge;\n\n\t/**\n\t * The summed output of the multiple inputs\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * The stereo signal to sum to mono\n\t */\n\treadonly input: Gain;\n\n\tconstructor(options?: Partial<MonoOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Mono.getDefaults(), arguments));\n\n\t\tthis.input = new Gain({ context: this.context });\n\n\t\tthis._merge = this.output = new Merge({\n\t\t\tchannels: 2,\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tthis.input.connect(this._merge, 0, 0);\n\t\tthis.input.connect(this._merge, 0, 1);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merge.dispose();\n\t\tthis.input.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,yBAAyB;AAC9C,SAAqBC,aAAa,QAA8B,kCAAkC;AAClG,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,KAAK,QAAQ,SAAS;AAI/B;;;;;;AAMA,OAAM,MAAOC,IAAK,SAAQH,aAA0B;EAoBnDI,YAAA;IAEC,KAAK,CAACH,oBAAoB,CAACE,IAAI,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC;IApBlD,KAAAC,IAAI,GAAW,MAAM;IAsB7B,IAAI,CAACC,KAAK,GAAG,IAAIT,IAAI,CAAC;MAAEU,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAEhD,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIT,KAAK,CAAC;MACrCU,QAAQ,EAAE,CAAC;MACXH,OAAO,EAAE,IAAI,CAACA;KACd,CAAC;IAEF,IAAI,CAACD,KAAK,CAACK,OAAO,CAAC,IAAI,CAACH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IACrC,IAAI,CAACF,KAAK,CAACK,OAAO,CAAC,IAAI,CAACH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EACtC;EAEAI,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACJ,MAAM,CAACI,OAAO,EAAE;IACrB,IAAI,CAACN,KAAK,CAACM,OAAO,EAAE;IACpB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}