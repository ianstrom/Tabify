{"ast":null,"code":"/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent) {\n  const piFactor = 0.5 * Math.PI;\n  return Math.sin(percent * piFactor);\n}\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db) {\n  return Math.pow(10, db / 20);\n}\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain) {\n  return 20 * (Math.log(gain) / Math.LN10);\n}\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval) {\n  return Math.pow(2, interval / 12);\n}\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4 = 440;\nexport function getA4() {\n  return A4;\n}\nexport function setA4(freq) {\n  A4 = freq;\n}\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\nexport function ftom(frequency) {\n  return Math.round(ftomf(frequency));\n}\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency) {\n  return 69 + 12 * Math.log2(frequency / A4);\n}\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\nexport function mtof(midi) {\n  return A4 * Math.pow(2, (midi - 69) / 12);\n}","map":{"version":3,"names":["equalPowerScale","percent","piFactor","Math","PI","sin","dbToGain","db","pow","gainToDb","gain","log","LN10","intervalToFrequencyRatio","interval","A4","getA4","setA4","freq","ftom","frequency","round","ftomf","log2","mtof","midi"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/core/type/Conversions.ts"],"sourcesContent":["import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn Math.round(ftomf(frequency)) as MidiNote;\n}\n\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency: Hertz): number {\n\treturn 69 + 12 * Math.log2(frequency / A4);\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n"],"mappings":"AAEA;;;;AAIA,OAAM,SAAUA,eAAeA,CAACC,OAAoB;EACnD,MAAMC,QAAQ,GAAG,GAAG,GAAGC,IAAI,CAACC,EAAE;EAC9B,OAAOD,IAAI,CAACE,GAAG,CAACJ,OAAO,GAAGC,QAAQ,CAAC;AACpC;AAEA;;;AAGA,OAAM,SAAUI,QAAQA,CAACC,EAAY;EACpC,OAAOJ,IAAI,CAACK,GAAG,CAAC,EAAE,EAAED,EAAE,GAAG,EAAE,CAAC;AAC7B;AAEA;;;AAGA,OAAM,SAAUE,QAAQA,CAACC,IAAgB;EACxC,OAAO,EAAE,IAAIP,IAAI,CAACQ,GAAG,CAACD,IAAI,CAAC,GAAGP,IAAI,CAACS,IAAI,CAAC;AACzC;AAEA;;;;;;;;AAQA,OAAM,SAAUC,wBAAwBA,CAACC,QAAkB;EAC1D,OAAOX,IAAI,CAACK,GAAG,CAAC,CAAC,EAAGM,QAAQ,GAAG,EAAE,CAAE;AACpC;AAEA;;;;AAIA,IAAIC,EAAE,GAAU,GAAG;AAEnB,OAAM,SAAUC,KAAKA,CAAA;EACpB,OAAOD,EAAE;AACV;AAEA,OAAM,SAAUE,KAAKA,CAACC,IAAW;EAChCH,EAAE,GAAGG,IAAI;AACV;AAEA;;;;;;AAMA,OAAM,SAAUC,IAAIA,CAACC,SAAgB;EACpC,OAAOjB,IAAI,CAACkB,KAAK,CAACC,KAAK,CAACF,SAAS,CAAC,CAAa;AAChD;AAEA;;;AAGA,OAAM,SAAUE,KAAKA,CAACF,SAAgB;EACrC,OAAO,EAAE,GAAG,EAAE,GAAGjB,IAAI,CAACoB,IAAI,CAACH,SAAS,GAAGL,EAAE,CAAC;AAC3C;AAEA;;;;;;;AAOA,OAAM,SAAUS,IAAIA,CAACC,IAAc;EAClC,OAAOV,EAAE,GAAGZ,IAAI,CAACK,GAAG,CAAC,CAAC,EAAE,CAACiB,IAAI,GAAG,EAAE,IAAI,EAAE,CAAC;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}