{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideSplit extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n    this.name = \"MidSideSplit\";\n    this._split = this.input = new Split({\n      channels: 2,\n      context: this.context\n    });\n    this._midAdd = new Add({\n      context: this.context\n    });\n    this.mid = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._sideSubtract = new Subtract({\n      context: this.context\n    });\n    this.side = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._split.connect(this._midAdd, 0);\n    this._split.connect(this._midAdd.addend, 1);\n    this._split.connect(this._sideSubtract, 0);\n    this._split.connect(this._sideSubtract.subtrahend, 1);\n    this._midAdd.connect(this.mid);\n    this._sideSubtract.connect(this.side);\n  }\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n    this._midAdd.dispose();\n    this._sideSubtract.dispose();\n    this._split.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","Split","Add","Multiply","Subtract","optionsFromArguments","MidSideSplit","constructor","getDefaults","arguments","name","_split","input","channels","context","_midAdd","mid","value","Math","SQRT1_2","_sideSubtract","side","connect","addend","subtrahend","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/component/channel/MidSideSplit.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideSplitOptions = ToneAudioNodeOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideSplit extends ToneAudioNode<MidSideSplitOptions> {\n\t\n\treadonly name: string = \"MidSideSplit\";\n\n\treadonly input: Split;\n\n\t/**\n\t * There is no output node, use either [[mid]] or [[side]] outputs.\n\t */\n\treadonly output: undefined;\n\t/**\n\t * Split the incoming signal into left and right channels\n\t */\n\tprivate _split: Split;\n\n\t/**\n\t * Sums the left and right channels\n\t */\n\tprivate _midAdd: Add;\n\n\t/**\n\t * Subtract left and right channels. \n\t */\n\tprivate _sideSubtract: Subtract;\n\n\t/**\n\t * The \"mid\" output. `(Left+Right)/sqrt(2)`\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" output. `(Left-Right)/sqrt(2)`\n\t */\n\treadonly side: ToneAudioNode;\n\t\n\tconstructor(options?: Partial<MidSideSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n\n\t\tthis._split = this.input = new Split({\n\t\t\tchannels: 2,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._midAdd = new Add({ context: this.context });\n\t\tthis.mid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\t\tthis._sideSubtract = new Subtract({ context: this.context });\n\t\tthis.side = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\n\t\tthis._split.connect(this._midAdd, 0);\n\t\tthis._split.connect(this._midAdd.addend, 1);\n\t\tthis._split.connect(this._sideSubtract, 0);\n\t\tthis._split.connect(this._sideSubtract.subtrahend, 1);\n\t\tthis._midAdd.connect(this.mid);\n\t\tthis._sideSubtract.connect(this.side);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midAdd.dispose();\n\t\tthis._sideSubtract.dispose();\n\t\tthis._split.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAA8B,kCAAkC;AACtF,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,oBAAoB,QAAQ,0BAA0B;AAI/D;;;;;;;;;AASA,OAAM,MAAOC,YAAa,SAAQN,aAAkC;EAoCnEO,YAAA;IACC,KAAK,CAACF,oBAAoB,CAACC,YAAY,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC;IAnC1D,KAAAC,IAAI,GAAW,cAAc;IAqCrC,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,KAAK,GAAG,IAAIX,KAAK,CAAC;MACpCY,QAAQ,EAAE,CAAC;MACXC,OAAO,EAAE,IAAI,CAACA;KACd,CAAC;IACF,IAAI,CAACC,OAAO,GAAG,IAAIb,GAAG,CAAC;MAAEY,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IACjD,IAAI,CAACE,GAAG,GAAG,IAAIb,QAAQ,CAAC;MACvBW,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBG,KAAK,EAAEC,IAAI,CAACC;KACZ,CAAC;IACF,IAAI,CAACC,aAAa,GAAG,IAAIhB,QAAQ,CAAC;MAAEU,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAC5D,IAAI,CAACO,IAAI,GAAG,IAAIlB,QAAQ,CAAC;MACxBW,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBG,KAAK,EAAEC,IAAI,CAACC;KACZ,CAAC;IAEF,IAAI,CAACR,MAAM,CAACW,OAAO,CAAC,IAAI,CAACP,OAAO,EAAE,CAAC,CAAC;IACpC,IAAI,CAACJ,MAAM,CAACW,OAAO,CAAC,IAAI,CAACP,OAAO,CAACQ,MAAM,EAAE,CAAC,CAAC;IAC3C,IAAI,CAACZ,MAAM,CAACW,OAAO,CAAC,IAAI,CAACF,aAAa,EAAE,CAAC,CAAC;IAC1C,IAAI,CAACT,MAAM,CAACW,OAAO,CAAC,IAAI,CAACF,aAAa,CAACI,UAAU,EAAE,CAAC,CAAC;IACrD,IAAI,CAACT,OAAO,CAACO,OAAO,CAAC,IAAI,CAACN,GAAG,CAAC;IAC9B,IAAI,CAACI,aAAa,CAACE,OAAO,CAAC,IAAI,CAACD,IAAI,CAAC;EACtC;EAEAI,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACT,GAAG,CAACS,OAAO,EAAE;IAClB,IAAI,CAACJ,IAAI,CAACI,OAAO,EAAE;IACnB,IAAI,CAACV,OAAO,CAACU,OAAO,EAAE;IACtB,IAAI,CAACL,aAAa,CAACK,OAAO,EAAE;IAC5B,IAAI,CAACd,MAAM,CAACc,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}