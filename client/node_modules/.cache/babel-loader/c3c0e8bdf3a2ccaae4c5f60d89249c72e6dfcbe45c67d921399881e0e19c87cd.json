{"ast":null,"code":"//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext = [];\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb) {\n  notifyNewContext.push(cb);\n}\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx) {\n  // add any additional modules\n  notifyNewContext.forEach(cb => cb(ctx));\n}\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext = [];\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb) {\n  notifyCloseContext.push(cb);\n}\nexport function closeContext(ctx) {\n  // add any additional modules\n  notifyCloseContext.forEach(cb => cb(ctx));\n}","map":{"version":3,"names":["notifyNewContext","onContextInit","cb","push","initializeContext","ctx","forEach","notifyCloseContext","onContextClose","closeContext"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/core/context/ContextInitialization.ts"],"sourcesContent":["//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA;;;AAGA,MAAMA,gBAAgB,GAAkC,EAAE;AAE1D;;;AAGA,OAAM,SAAUC,aAAaA,CAACC,EAA0B;EACvDF,gBAAgB,CAACG,IAAI,CAACD,EAAE,CAAC;AAC1B;AAEA;;;AAGA,OAAM,SAAUE,iBAAiBA,CAACC,GAAY;EAC7C;EACAL,gBAAgB,CAACM,OAAO,CAACJ,EAAE,IAAIA,EAAE,CAACG,GAAG,CAAC,CAAC;AACxC;AAEA;;;AAGA,MAAME,kBAAkB,GAAkC,EAAE;AAE5D;;;AAGA,OAAM,SAAUC,cAAcA,CAACN,EAA0B;EACxDK,kBAAkB,CAACJ,IAAI,CAACD,EAAE,CAAC;AAC5B;AAEA,OAAM,SAAUO,YAAYA,CAACJ,GAAY;EACxC;EACAE,kBAAkB,CAACD,OAAO,CAACJ,EAAE,IAAIA,EAAE,CAACG,GAAG,CAAC,CAAC;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}