{"ast":null,"code":"import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport class Effect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"Effect\";\n    /**\n     * the drywet knob to control the amount of effect\n     */\n    this._dryWet = new CrossFade({\n      context: this.context\n    });\n    /**\n     * The wet control is how much of the effected\n     * will pass through to the output. 1 = 100% effected\n     * signal, 0 = 100% dry signal.\n     */\n    this.wet = this._dryWet.fade;\n    /**\n     * connect the effectSend to the input of hte effect\n     */\n    this.effectSend = new Gain({\n      context: this.context\n    });\n    /**\n     * connect the output of the effect to the effectReturn\n     */\n    this.effectReturn = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect input node\n     */\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect output\n     */\n    this.output = this._dryWet;\n    // connections\n    this.input.fan(this._dryWet.a, this.effectSend);\n    this.effectReturn.connect(this._dryWet.b);\n    this.wet.setValueAtTime(options.wet, 0);\n    this._internalChannels = [this.effectReturn, this.effectSend];\n    readOnly(this, \"wet\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n  /**\n   * chains the effect in between the effectSend and effectReturn\n   */\n  connectEffect(effect) {\n    // add it to the internal channels\n    this._internalChannels.push(effect);\n    this.effectSend.chain(effect, this.effectReturn);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._dryWet.dispose();\n    this.effectSend.dispose();\n    this.effectReturn.dispose();\n    this.wet.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["CrossFade","Gain","ToneAudioNode","readOnly","Effect","constructor","options","name","_dryWet","context","wet","fade","effectSend","effectReturn","input","output","fan","a","connect","b","setValueAtTime","_internalChannels","getDefaults","Object","assign","connectEffect","effect","push","chain","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/effect/Effect.ts"],"sourcesContent":["import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport abstract class Effect<Options extends EffectOptions>\n\textends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context: this.context });\n\n\t/**\n\t * The wet control is how much of the effected\n\t * will pass through to the output. 1 = 100% effected\n\t * signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<\"normalRange\"> = this._dryWet.fade;\n\n\t/**\n\t * connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\t/**\n\t * chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,aAAa,QAA8B,+BAA+B;AAEnF,SAASC,QAAQ,QAAQ,wBAAwB;AAMjD;;;;;AAKA,OAAM,MAAgBC,MACrB,SAAQF,aAAsB;EAoC9BG,YAAYC,OAAsB;IACjC,KAAK,CAACA,OAAO,CAAC;IAnCN,KAAAC,IAAI,GAAW,QAAQ;IAEhC;;;IAGQ,KAAAC,OAAO,GAAc,IAAIR,SAAS,CAAC;MAAES,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAErE;;;;;IAKA,KAAAC,GAAG,GAA0B,IAAI,CAACF,OAAO,CAACG,IAAI;IAE9C;;;IAGU,KAAAC,UAAU,GAAS,IAAIX,IAAI,CAAC;MAAEQ,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAEhE;;;IAGU,KAAAI,YAAY,GAAS,IAAIZ,IAAI,CAAC;MAAEQ,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAElE;;;IAGA,KAAAK,KAAK,GAAS,IAAIb,IAAI,CAAC;MAAEQ,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAEjD;;;IAGA,KAAAM,MAAM,GAAG,IAAI,CAACP,OAAO;IAKpB;IACA,IAAI,CAACM,KAAK,CAACE,GAAG,CAAC,IAAI,CAACR,OAAO,CAACS,CAAC,EAAE,IAAI,CAACL,UAAU,CAAC;IAC/C,IAAI,CAACC,YAAY,CAACK,OAAO,CAAC,IAAI,CAACV,OAAO,CAACW,CAAC,CAAC;IACzC,IAAI,CAACT,GAAG,CAACU,cAAc,CAACd,OAAO,CAACI,GAAG,EAAE,CAAC,CAAC;IACvC,IAAI,CAACW,iBAAiB,GAAG,CAAC,IAAI,CAACR,YAAY,EAAE,IAAI,CAACD,UAAU,CAAC;IAC7DT,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC;EACtB;EAEA,OAAOmB,WAAWA,CAAA;IACjB,OAAOC,MAAM,CAACC,MAAM,CAACtB,aAAa,CAACoB,WAAW,EAAE,EAAE;MACjDZ,GAAG,EAAE;KACL,CAAC;EACH;EAEA;;;EAGUe,aAAaA,CAACC,MAAiC;IACxD;IACA,IAAI,CAACL,iBAAiB,CAACM,IAAI,CAACD,MAAM,CAAC;IACnC,IAAI,CAACd,UAAU,CAACgB,KAAK,CAACF,MAAM,EAAE,IAAI,CAACb,YAAY,CAAC;IAChD,OAAO,IAAI;EACZ;EAEAgB,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACrB,OAAO,CAACqB,OAAO,EAAE;IACtB,IAAI,CAACjB,UAAU,CAACiB,OAAO,EAAE;IACzB,IAAI,CAAChB,YAAY,CAACgB,OAAO,EAAE;IAC3B,IAAI,CAACnB,GAAG,CAACmB,OAAO,EAAE;IAClB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}