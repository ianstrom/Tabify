{"ast":null,"code":"import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n  return class AudioContext extends baseAudioContextConstructor {\n    constructor() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n      let nativeAudioContext;\n      try {\n        nativeAudioContext = new nativeAudioContextConstructor(options);\n      } catch (err) {\n        // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n        if (err.code === 12 && err.message === 'sampleRate is not in range') {\n          throw createNotSupportedError();\n        }\n        throw err;\n      }\n      // Bug #131 Safari returns null when there are four other AudioContexts running already.\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      }\n      // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      }\n      // Bug #150 Safari does not support setting the sampleRate.\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext;\n      // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext;\n      // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n        this._nativeGainNode = nativeAudioContext.createGain();\n        this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n        this._nativeGainNode.gain.value = 1e-37;\n        this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n        this._nativeOscillatorNode.start();\n      } else {\n        this._nativeGainNode = null;\n        this._nativeOscillatorNode = null;\n      }\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n       * to 'running'.\n       */\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n    get baseLatency() {\n      return this._baseLatency;\n    }\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      }\n      // Bug #34: If the state was set to suspended before it should be revoked now.\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n      return this._nativeAudioContext.close().then(() => {\n        if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n          this._nativeOscillatorNode.stop();\n          this._nativeGainNode.disconnect();\n          this._nativeOscillatorNode.disconnect();\n        }\n        deactivateAudioGraph(this);\n      });\n    }\n    createMediaElementSource(mediaElement) {\n      return new mediaElementAudioSourceNodeConstructor(this, {\n        mediaElement\n      });\n    }\n    createMediaStreamDestination() {\n      return new mediaStreamAudioDestinationNodeConstructor(this);\n    }\n    createMediaStreamSource(mediaStream) {\n      return new mediaStreamAudioSourceNodeConstructor(this, {\n        mediaStream\n      });\n    }\n    createMediaStreamTrackSource(mediaStreamTrack) {\n      return new mediaStreamTrackAudioSourceNodeConstructor(this, {\n        mediaStreamTrack\n      });\n    }\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n        throw err;\n      });\n    }\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n        throw err;\n      });\n    }\n  };\n};","map":{"version":3,"names":["deactivateAudioGraph","isValidLatencyHint","createAudioContextConstructor","baseAudioContextConstructor","createInvalidStateError","createNotSupportedError","createUnknownError","mediaElementAudioSourceNodeConstructor","mediaStreamAudioDestinationNodeConstructor","mediaStreamAudioSourceNodeConstructor","mediaStreamTrackAudioSourceNodeConstructor","nativeAudioContextConstructor","AudioContext","constructor","options","arguments","length","undefined","Error","nativeAudioContext","err","code","message","latencyHint","TypeError","sampleRate","_baseLatency","baseLatency","Math","max","min","round","_nativeAudioContext","name","_nativeGainNode","createGain","_nativeOscillatorNode","createOscillator","gain","value","connect","destination","start","_state","state","revokeState","removeEventListener","addEventListener","close","then","stop","disconnect","createMediaElementSource","mediaElement","createMediaStreamDestination","createMediaStreamSource","mediaStream","createMediaStreamTrackSource","mediaStreamTrack","resume","Promise","resolve","reject","resolvePromise","catch","suspend"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/audio-context-constructor.ts"],"sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nimport {\n    IAudioContext,\n    IAudioContextOptions,\n    IMediaElementAudioSourceNode,\n    IMediaStreamAudioDestinationNode,\n    IMediaStreamAudioSourceNode,\n    IMediaStreamTrackAudioSourceNode\n} from '../interfaces';\nimport { TAudioContextConstructorFactory, TAudioContextState, TNativeAudioContext, TNativeGainNode, TNativeOscillatorNode } from '../types';\n\nexport const createAudioContextConstructor: TAudioContextConstructorFactory = (\n    baseAudioContextConstructor,\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    mediaElementAudioSourceNodeConstructor,\n    mediaStreamAudioDestinationNodeConstructor,\n    mediaStreamAudioSourceNodeConstructor,\n    mediaStreamTrackAudioSourceNodeConstructor,\n    nativeAudioContextConstructor\n) => {\n    return class AudioContext extends baseAudioContextConstructor<IAudioContext> implements IAudioContext {\n        private _baseLatency: number;\n\n        private _nativeAudioContext: TNativeAudioContext;\n\n        private _nativeGainNode: null | TNativeGainNode;\n\n        private _nativeOscillatorNode: null | TNativeOscillatorNode;\n\n        private _state: null | 'suspended';\n\n        constructor(options: IAudioContextOptions = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n\n            let nativeAudioContext: TNativeAudioContext;\n\n            try {\n                nativeAudioContext = new nativeAudioContextConstructor(options);\n            } catch (err) {\n                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n                if (err.code === 12 && err.message === 'sampleRate is not in range') {\n                    throw createNotSupportedError();\n                }\n\n                throw err;\n            }\n\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n\n            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(\n                    `The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`\n                );\n            }\n\n            // Bug #150 Safari does not support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n\n            super(nativeAudioContext, 2);\n\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency =\n                typeof nativeAudioContext.baseLatency === 'number'\n                    ? nativeAudioContext.baseLatency\n                    : latencyHint === 'balanced'\n                    ? 512 / sampleRate\n                    : latencyHint === 'interactive' || latencyHint === undefined\n                    ? 256 / sampleRate\n                    : latencyHint === 'playback'\n                    ? 1024 / sampleRate\n                    : /*\n                       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                       * ScriptProcessorNode.\n                       */\n                      (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;\n            this._nativeAudioContext = nativeAudioContext;\n\n            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                this._nativeGainNode = nativeAudioContext.createGain();\n                this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n\n                this._nativeGainNode.gain.value = 1e-37;\n\n                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n                this._nativeOscillatorNode.start();\n            } else {\n                this._nativeGainNode = null;\n                this._nativeOscillatorNode = null;\n            }\n\n            this._state = null;\n\n            /*\n             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n\n        get baseLatency(): number {\n            return this._baseLatency;\n        }\n\n        get state(): TAudioContextState {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n        }\n\n        public close(): Promise<void> {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext.close().then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n\n            return this._nativeAudioContext.close().then(() => {\n                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n                    this._nativeOscillatorNode.stop();\n\n                    this._nativeGainNode.disconnect();\n                    this._nativeOscillatorNode.disconnect();\n                }\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        public createMediaElementSource(mediaElement: HTMLMediaElement): IMediaElementAudioSourceNode<this> {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n\n        public createMediaStreamDestination(): IMediaStreamAudioDestinationNode<this> {\n            return new mediaStreamAudioDestinationNodeConstructor(this);\n        }\n\n        public createMediaStreamSource(mediaStream: MediaStream): IMediaStreamAudioSourceNode<this> {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n\n        public createMediaStreamTrackSource(mediaStreamTrack: MediaStreamTrack): IMediaStreamTrackAudioSourceNode<this> {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n\n        public resume(): Promise<void> {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        } else {\n                            this.resume().then(resolve, reject);\n                        }\n                    };\n\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n\n            return this._nativeAudioContext.resume().catch((err) => {\n                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n\n        public suspend(): Promise<void> {\n            return this._nativeAudioContext.suspend().catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}