{"ast":null,"code":"import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n  let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n  if (nodeToProcessorMap === undefined) {\n    nodeToProcessorMap = new WeakMap();\n    NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n  }\n  const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n  nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n  return audioWorkletProcessorPromise;\n};","map":{"version":3,"names":["NODE_TO_PROCESSOR_MAPS","createAudioWorkletProcessorPromise","createAudioWorkletProcessor","nativeContext","nativeAudioWorkletNode","processorConstructor","audioWorkletNodeOptions","nodeToProcessorMap","get","undefined","WeakMap","set","audioWorkletProcessorPromise"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/helpers/create-audio-worklet-processor.ts"],"sourcesContent":["import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { IAudioWorkletNodeOptions, IAudioWorkletProcessor, IAudioWorkletProcessorConstructor } from '../interfaces';\nimport { TNativeAudioWorkletNode, TNativeContext } from '../types';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\n\nexport const createAudioWorkletProcessor = (\n    nativeContext: TNativeContext,\n    nativeAudioWorkletNode: TNativeAudioWorkletNode,\n    processorConstructor: IAudioWorkletProcessorConstructor,\n    audioWorkletNodeOptions: IAudioWorkletNodeOptions\n): Promise<IAudioWorkletProcessor> => {\n    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n\n    if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n    }\n\n    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n\n    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n\n    return audioWorkletProcessorPromise;\n};\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,YAAY;AAGnD,SAASC,kCAAkC,QAAQ,0CAA0C;AAE7F,OAAO,MAAMC,2BAA2B,GAAGA,CACvCC,aAA6B,EAC7BC,sBAA+C,EAC/CC,oBAAuD,EACvDC,uBAAiD,KAChB;EACjC,IAAIC,kBAAkB,GAAGP,sBAAsB,CAACQ,GAAG,CAACL,aAAa,CAAC;EAElE,IAAII,kBAAkB,KAAKE,SAAS,EAAE;IAClCF,kBAAkB,GAAG,IAAIG,OAAO,EAAE;IAElCV,sBAAsB,CAACW,GAAG,CAACR,aAAa,EAAEI,kBAAkB,CAAC;;EAGjE,MAAMK,4BAA4B,GAAGX,kCAAkC,CAACI,oBAAoB,EAAEC,uBAAuB,CAAC;EAEtHC,kBAAkB,CAACI,GAAG,CAACP,sBAAsB,EAAEQ,4BAA4B,CAAC;EAE5E,OAAOA,4BAA4B;AACvC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}