{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let renderedBufferPromise = null;\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeGainNode = null;\n      let nativePannerNode = getNativeAudioNode(proxy);\n      const commonAudioNodeOptions = {\n        channelCount: nativePannerNode.channelCount,\n        channelCountMode: nativePannerNode.channelCountMode,\n        channelInterpretation: nativePannerNode.channelInterpretation\n      };\n      const commonNativePannerNodeOptions = {\n        ...commonAudioNodeOptions,\n        coneInnerAngle: nativePannerNode.coneInnerAngle,\n        coneOuterAngle: nativePannerNode.coneOuterAngle,\n        coneOuterGain: nativePannerNode.coneOuterGain,\n        distanceModel: nativePannerNode.distanceModel,\n        maxDistance: nativePannerNode.maxDistance,\n        panningModel: nativePannerNode.panningModel,\n        refDistance: nativePannerNode.refDistance,\n        rolloffFactor: nativePannerNode.rolloffFactor\n      };\n      // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n      // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n      if ('bufferSize' in nativePannerNode) {\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          ...commonAudioNodeOptions,\n          gain: 1\n        });\n      } else if (!nativePannerNodeIsOwnedByContext) {\n        const options = {\n          ...commonNativePannerNodeOptions,\n          orientationX: nativePannerNode.orientationX.value,\n          orientationY: nativePannerNode.orientationY.value,\n          orientationZ: nativePannerNode.orientationZ.value,\n          positionX: nativePannerNode.positionX.value,\n          positionY: nativePannerNode.positionY.value,\n          positionZ: nativePannerNode.positionZ.value\n        };\n        nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n      if (nativeGainNode !== null) {\n        if (renderedBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6,\n          // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n          const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n          });\n          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n          renderedBufferPromise = (async () => {\n            const nativeConstantSourceNodes = await Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map(async (audioParam, index) => {\n              const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                offset: index === 0 ? 1 : 0\n              });\n              await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n              return nativeConstantSourceNode;\n            }));\n            for (let i = 0; i < 6; i += 1) {\n              nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n              nativeConstantSourceNodes[i].start(0);\n            }\n            return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n          })();\n        }\n        const renderedBuffer = await renderedBufferPromise;\n        const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          ...commonAudioNodeOptions,\n          gain: 1\n        });\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n        const channelDatas = [];\n        for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n          channelDatas.push(renderedBuffer.getChannelData(i));\n        }\n        let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n        let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n        let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          ...commonAudioNodeOptions,\n          gain: 1\n        });\n        let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n          ...commonNativePannerNodeOptions,\n          orientationX: lastOrientation[0],\n          orientationY: lastOrientation[1],\n          orientationZ: lastOrientation[2],\n          positionX: lastPosition[0],\n          positionY: lastPosition[1],\n          positionZ: lastPosition[2]\n        });\n        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n        partialPannerNode.connect(nativeGainNode);\n        for (let i = 128; i < renderedBuffer.length; i += 128) {\n          const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n          const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n          if (orientation.some((value, index) => value !== lastOrientation[index]) || positon.some((value, index) => value !== lastPosition[index])) {\n            lastOrientation = orientation;\n            lastPosition = positon;\n            const currentTime = i / nativeOfflineAudioContext.sampleRate;\n            gateGainNode.gain.setValueAtTime(0, currentTime);\n            gateGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n              ...commonAudioNodeOptions,\n              gain: 0\n            });\n            partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n              ...commonNativePannerNodeOptions,\n              orientationX: lastOrientation[0],\n              orientationY: lastOrientation[1],\n              orientationZ: lastOrientation[2],\n              positionX: lastPosition[0],\n              positionY: lastPosition[1],\n              positionZ: lastPosition[2]\n            });\n            gateGainNode.gain.setValueAtTime(1, currentTime);\n            inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n            partialPannerNode.connect(nativeGainNode);\n          }\n        }\n        return nativeGainNode;\n      }\n      if (!nativePannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n      }\n      if (isNativeAudioNodeFaker(nativePannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n      }\n      return nativePannerNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isNativeAudioNodeFaker","isOwnedByContext","createPannerNodeRendererFactory","connectAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeGainNode","createNativePannerNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderAutomation","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","renderedBufferPromise","createAudioNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativePannerNode","commonAudioNodeOptions","channelCount","channelCountMode","channelInterpretation","commonNativePannerNodeOptions","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","nativePannerNodeIsOwnedByContext","gain","options","orientationX","value","orientationY","orientationZ","positionX","positionY","positionZ","set","Error","partialOfflineAudioContext","context","length","sampleRate","nativeChannelMergerNode","numberOfInputs","connect","destination","nativeConstantSourceNodes","Promise","all","map","audioParam","index","nativeConstantSourceNode","offset","i","start","renderedBuffer","inputGainNode","channelDatas","numberOfChannels","push","getChannelData","lastOrientation","lastPosition","gateGainNode","partialPannerNode","inputs","orientation","positon","some","currentTime","setValueAtTime","render","renderedNativeGainNodeOrNativePannerNode","get","undefined","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/panner-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, INativePannerNodeFaker, IOfflineAudioContext, IPannerNode } from '../interfaces';\nimport {\n    TNativeAudioBuffer,\n    TNativeGainNode,\n    TNativeOfflineAudioContext,\n    TNativePannerNode,\n    TPannerNodeRendererFactoryFactory\n} from '../types';\n\nexport const createPannerNodeRendererFactory: TPannerNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativePannerNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeGainNode | TNativePannerNode>();\n\n        let renderedBufferPromise: null | Promise<TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeGainNode: null | TNativeGainNode = null;\n            let nativePannerNode = getNativeAudioNode<T, TNativePannerNode>(proxy);\n\n            const commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n            };\n            const commonNativePannerNodeOptions = {\n                ...commonAudioNodeOptions,\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n            };\n\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n\n            // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n            if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n            } else if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                };\n\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n            if (nativeGainNode !== null) {\n                if (renderedBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                        6,\n                        // Bug #17: Safari does not yet expose the length.\n                        proxy.context.length,\n                        nativeOfflineAudioContext.sampleRate\n                    );\n                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: 6\n                    });\n                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n                    renderedBufferPromise = (async () => {\n                        const nativeConstantSourceNodes = await Promise.all(\n                            [\n                                proxy.orientationX,\n                                proxy.orientationY,\n                                proxy.orientationZ,\n                                proxy.positionX,\n                                proxy.positionY,\n                                proxy.positionZ\n                            ].map(async (audioParam, index) => {\n                                const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                    channelCount: 1,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    offset: index === 0 ? 1 : 0\n                                });\n\n                                await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n\n                                return nativeConstantSourceNode;\n                            })\n                        );\n\n                        for (let i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                        }\n\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    })();\n                }\n\n                const renderedBuffer = await renderedBufferPromise;\n                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n\n                const channelDatas: Float32Array[] = [];\n\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                }\n\n                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                });\n\n                inputGainNode.connect(gateGainNode).connect((<INativePannerNodeFaker>partialPannerNode).inputs[0]);\n                partialPannerNode.connect(nativeGainNode);\n\n                for (let i = 128; i < renderedBuffer.length; i += 128) {\n                    const orientation: [number, number, number] = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n                    const positon: [number, number, number] = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n\n                    if (\n                        orientation.some((value, index) => value !== lastOrientation[index]) ||\n                        positon.some((value, index) => value !== lastPosition[index])\n                    ) {\n                        lastOrientation = orientation;\n                        lastPosition = positon;\n\n                        const currentTime = i / nativeOfflineAudioContext.sampleRate;\n\n                        gateGainNode.gain.setValueAtTime(0, currentTime);\n\n                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });\n                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                            ...commonNativePannerNodeOptions,\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                        });\n\n                        gateGainNode.gain.setValueAtTime(1, currentTime);\n\n                        inputGainNode.connect(gateGainNode).connect((<INativePannerNodeFaker>partialPannerNode).inputs[0]);\n                        partialPannerNode.connect(nativeGainNode);\n                    }\n                }\n\n                return nativeGainNode;\n            }\n\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n\n            return nativePannerNode;\n        };\n\n        return {\n            render(\n                proxy: IPannerNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeGainNode | TNativePannerNode> {\n                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}