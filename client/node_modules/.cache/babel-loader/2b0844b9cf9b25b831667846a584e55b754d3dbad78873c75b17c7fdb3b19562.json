{"ast":null,"code":"import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n    this.name = \"Waveform\";\n    const options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n    this._analyser.type = \"waveform\";\n    this.size = options.size;\n  }\n  static getDefaults() {\n    return Object.assign(MeterBase.getDefaults(), {\n      size: 1024\n    });\n  }\n  /**\n   * Return the waveform for the current time as a Float32Array where each value in the array\n   * represents a sample in the waveform.\n   */\n  getValue() {\n    return this._analyser.getValue();\n  }\n  /**\n   * The size of analysis. This must be a power of two in the range 16 to 16384.\n   * Determines the size of the array returned by [[getValue]].\n   */\n  get size() {\n    return this._analyser.size;\n  }\n  set size(size) {\n    this._analyser.size = size;\n  }\n}","map":{"version":3,"names":["optionsFromArguments","MeterBase","Waveform","constructor","getDefaults","arguments","name","options","_analyser","type","size","Object","assign","getValue"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/component/analysis/Waveform.ts"],"sourcesContent":["import { PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport interface WaveformOptions extends MeterBaseOptions {\n\t/**\n\t * The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tsize: PowerOfTwo;\n}\n\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase<WaveformOptions> {\n\n\treadonly name: string = \"Waveform\";\n\n\t/**\n\t * @param size The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<WaveformOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): WaveformOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Return the waveform for the current time as a Float32Array where each value in the array\n\t * represents a sample in the waveform.\n\t */\n\tgetValue(): Float32Array {\n\t\treturn this._analyser.getValue() as Float32Array;\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]].\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n}\n"],"mappings":"AACA,SAASA,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,SAAS,QAA0B,aAAa;AASzD;;;;AAIA,OAAM,MAAOC,QAAS,SAAQD,SAA0B;EASvDE,YAAA;IACC,KAAK,CAACH,oBAAoB,CAACE,QAAQ,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IARhE,KAAAC,IAAI,GAAW,UAAU;IASjC,MAAMC,OAAO,GAAGP,oBAAoB,CAACE,QAAQ,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;IAEjF,IAAI,CAACG,SAAS,CAACC,IAAI,GAAG,UAAU;IAChC,IAAI,CAACC,IAAI,GAAGH,OAAO,CAACG,IAAI;EACzB;EAEA,OAAON,WAAWA,CAAA;IACjB,OAAOO,MAAM,CAACC,MAAM,CAACX,SAAS,CAACG,WAAW,EAAE,EAAE;MAC7CM,IAAI,EAAE;KACN,CAAC;EACH;EAEA;;;;EAIAG,QAAQA,CAAA;IACP,OAAO,IAAI,CAACL,SAAS,CAACK,QAAQ,EAAkB;EACjD;EAEA;;;;EAIA,IAAIH,IAAIA,CAAA;IACP,OAAO,IAAI,CAACF,SAAS,CAACE,IAAI;EAC3B;EACA,IAAIA,IAAIA,CAACA,IAAI;IACZ,IAAI,CAACF,SAAS,CAACE,IAAI,GAAGA,IAAI;EAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}