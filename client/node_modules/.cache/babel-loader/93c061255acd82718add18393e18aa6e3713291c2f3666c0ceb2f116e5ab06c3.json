{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class ConstantSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n       * for GainNodes.\n       */\n      this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._onended = null;\n    }\n    get offset() {\n      return this._offset;\n    }\n    get onended() {\n      return this._onended;\n    }\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeConstantSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeConstantSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n    start() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this._nativeConstantSourceNode.start(when);\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.start = when;\n      }\n      if (this.context.state !== 'closed') {\n        setInternalStateToActive(this);\n        const resetInternalStateToPassive = () => {\n          this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n          if (isActiveAudioNode(this)) {\n            setInternalStateToPassive(this);\n          }\n        };\n        this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n    stop() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this._nativeConstantSourceNode.stop(when);\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.stop = when;\n      }\n    }\n  };\n};","map":{"version":3,"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","offset","createConstantSourceNodeConstructor","audioNodeConstructor","createAudioParam","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","ConstantSourceNode","constructor","context","options","nativeContext","mergedOptions","nativeConstantSourceNode","isOffline","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","_onended","onended","value","wrappedListener","nativeOnEnded","start","when","arguments","length","undefined","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/constant-source-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { IAudioParam, IAudioScheduledSourceNodeEventMap, IConstantSourceNode, IConstantSourceOptions } from '../interfaces';\nimport {\n    TConstantSourceNodeConstructorFactory,\n    TConstantSourceNodeRenderer,\n    TContext,\n    TEventHandler,\n    TNativeConstantSourceNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n} as const;\n\nexport const createConstantSourceNodeConstructor: TConstantSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createConstantSourceNodeRendererFactory,\n    createNativeConstantSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class ConstantSourceNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IConstantSourceNode<T>\n    {\n        private _constantSourceNodeRenderer: TConstantSourceNodeRenderer<T>;\n\n        private _nativeConstantSourceNode: TNativeConstantSourceNode;\n\n        private _offset: IAudioParam;\n\n        private _onended: null | TEventHandler<this>;\n\n        constructor(context: T, options?: Partial<IConstantSourceOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = <TConstantSourceNodeRenderer<T>>(\n                (isOffline ? createConstantSourceNodeRendererFactory() : null)\n            );\n\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n             * for GainNodes.\n             */\n            this._offset = createAudioParam(\n                this,\n                isOffline,\n                nativeConstantSourceNode.offset,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._onended = null;\n        }\n\n        get offset(): IAudioParam {\n            return this._offset;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeConstantSourceNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        public start(when = 0): void {\n            this._nativeConstantSourceNode.start(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeConstantSourceNode.stop(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}