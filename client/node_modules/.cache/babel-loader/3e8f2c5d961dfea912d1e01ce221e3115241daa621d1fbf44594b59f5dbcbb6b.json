{"ast":null,"code":"export const detachArrayBuffer = arrayBuffer => {\n  const {\n    port1,\n    port2\n  } = new MessageChannel();\n  return new Promise(resolve => {\n    const closeAndResolve = () => {\n      port2.onmessage = null;\n      port1.close();\n      port2.close();\n      resolve();\n    };\n    port2.onmessage = () => closeAndResolve();\n    try {\n      port1.postMessage(arrayBuffer, [arrayBuffer]);\n    } catch {\n      // Ignore errors.\n    } finally {\n      closeAndResolve();\n    }\n  });\n};","map":{"version":3,"names":["detachArrayBuffer","arrayBuffer","port1","port2","MessageChannel","Promise","resolve","closeAndResolve","onmessage","close","postMessage"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/helpers/detach-array-buffer.ts"],"sourcesContent":["export const detachArrayBuffer = (arrayBuffer: ArrayBuffer): Promise<void> => {\n    const { port1, port2 } = new MessageChannel();\n\n    return new Promise((resolve) => {\n        const closeAndResolve = () => {\n            port2.onmessage = null;\n\n            port1.close();\n            port2.close();\n\n            resolve();\n        };\n\n        port2.onmessage = () => closeAndResolve();\n\n        try {\n            port1.postMessage(arrayBuffer, [arrayBuffer]);\n        } catch {\n            // Ignore errors.\n        } finally {\n            closeAndResolve();\n        }\n    });\n};\n"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAIC,WAAwB,IAAmB;EACzE,MAAM;IAAEC,KAAK;IAAEC;EAAK,CAAE,GAAG,IAAIC,cAAc,EAAE;EAE7C,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAI;IAC3B,MAAMC,eAAe,GAAGA,CAAA,KAAK;MACzBJ,KAAK,CAACK,SAAS,GAAG,IAAI;MAEtBN,KAAK,CAACO,KAAK,EAAE;MACbN,KAAK,CAACM,KAAK,EAAE;MAEbH,OAAO,EAAE;IACb,CAAC;IAEDH,KAAK,CAACK,SAAS,GAAG,MAAMD,eAAe,EAAE;IAEzC,IAAI;MACAL,KAAK,CAACQ,WAAW,CAACT,WAAW,EAAE,CAACA,WAAW,CAAC,CAAC;KAChD,CAAC,MAAM;MACJ;IAAA,CACH,SAAS;MACNM,eAAe,EAAE;;EAEzB,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}