{"ast":null,"code":"import { createInvalidStateError } from './invalid-state-error';\nexport const createGetNativeContext = contextStore => {\n  return context => {\n    const nativeContext = contextStore.get(context);\n    if (nativeContext === undefined) {\n      throw createInvalidStateError();\n    }\n    return nativeContext;\n  };\n};","map":{"version":3,"names":["createInvalidStateError","createGetNativeContext","contextStore","context","nativeContext","get","undefined"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/get-native-context.ts"],"sourcesContent":["import { IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TContext, TGetNativeContextFactory, TNativeAudioContext, TNativeOfflineAudioContext } from '../types';\nimport { createInvalidStateError } from './invalid-state-error';\n\nexport const createGetNativeContext: TGetNativeContextFactory = (contextStore) => {\n    return <T extends TContext>(\n        context: T\n    ): T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? TNativeOfflineAudioContext : TNativeAudioContext => {\n        const nativeContext = contextStore.get(context);\n\n        if (nativeContext === undefined) {\n            throw createInvalidStateError();\n        }\n\n        return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? TNativeOfflineAudioContext : TNativeAudioContext>(\n            nativeContext\n        );\n    };\n};\n"],"mappings":"AAEA,SAASA,uBAAuB,QAAQ,uBAAuB;AAE/D,OAAO,MAAMC,sBAAsB,GAA8BC,YAAY,IAAI;EAC7E,OACIC,OAAU,IACuG;IACjH,MAAMC,aAAa,GAAGF,YAAY,CAACG,GAAG,CAACF,OAAO,CAAC;IAE/C,IAAIC,aAAa,KAAKE,SAAS,EAAE;MAC7B,MAAMN,uBAAuB,EAAE;;IAGnC,OACII,aAAa;EAErB,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}