{"ast":null,"code":"export const createAudioParamRenderer = automationEventList => {\n  return {\n    replay(audioParam) {\n      for (const automationEvent of automationEventList) {\n        if (automationEvent.type === 'exponentialRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.exponentialRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'linearRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.linearRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'setTarget') {\n          const {\n            startTime,\n            target,\n            timeConstant\n          } = automationEvent;\n          audioParam.setTargetAtTime(target, startTime, timeConstant);\n        } else if (automationEvent.type === 'setValue') {\n          const {\n            startTime,\n            value\n          } = automationEvent;\n          audioParam.setValueAtTime(value, startTime);\n        } else if (automationEvent.type === 'setValueCurve') {\n          const {\n            duration,\n            startTime,\n            values\n          } = automationEvent;\n          audioParam.setValueCurveAtTime(values, startTime, duration);\n        } else {\n          throw new Error(\"Can't apply an unknown automation.\");\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["createAudioParamRenderer","automationEventList","replay","audioParam","automationEvent","type","endTime","value","exponentialRampToValueAtTime","linearRampToValueAtTime","startTime","target","timeConstant","setTargetAtTime","setValueAtTime","duration","values","setValueCurveAtTime","Error"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/factories/audio-param-renderer.ts"],"sourcesContent":["import { TAudioParamRendererFactory, TNativeAudioParam } from '../types';\n\nexport const createAudioParamRenderer: TAudioParamRendererFactory = (automationEventList) => {\n    return {\n        replay(audioParam: TNativeAudioParam): void {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                } else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                } else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                } else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n\n                    audioParam.setValueAtTime(value, startTime);\n                } else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                } else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n"],"mappings":"AAEA,OAAO,MAAMA,wBAAwB,GAAgCC,mBAAmB,IAAI;EACxF,OAAO;IACHC,MAAMA,CAACC,UAA6B;MAChC,KAAK,MAAMC,eAAe,IAAIH,mBAAmB,EAAE;QAC/C,IAAIG,eAAe,CAACC,IAAI,KAAK,wBAAwB,EAAE;UACnD,MAAM;YAAEC,OAAO;YAAEC;UAAK,CAAE,GAAGH,eAAe;UAE1CD,UAAU,CAACK,4BAA4B,CAACD,KAAK,EAAED,OAAO,CAAC;SAC1D,MAAM,IAAIF,eAAe,CAACC,IAAI,KAAK,mBAAmB,EAAE;UACrD,MAAM;YAAEC,OAAO;YAAEC;UAAK,CAAE,GAAGH,eAAe;UAE1CD,UAAU,CAACM,uBAAuB,CAACF,KAAK,EAAED,OAAO,CAAC;SACrD,MAAM,IAAIF,eAAe,CAACC,IAAI,KAAK,WAAW,EAAE;UAC7C,MAAM;YAAEK,SAAS;YAAEC,MAAM;YAAEC;UAAY,CAAE,GAAGR,eAAe;UAE3DD,UAAU,CAACU,eAAe,CAACF,MAAM,EAAED,SAAS,EAAEE,YAAY,CAAC;SAC9D,MAAM,IAAIR,eAAe,CAACC,IAAI,KAAK,UAAU,EAAE;UAC5C,MAAM;YAAEK,SAAS;YAAEH;UAAK,CAAE,GAAGH,eAAe;UAE5CD,UAAU,CAACW,cAAc,CAACP,KAAK,EAAEG,SAAS,CAAC;SAC9C,MAAM,IAAIN,eAAe,CAACC,IAAI,KAAK,eAAe,EAAE;UACjD,MAAM;YAAEU,QAAQ;YAAEL,SAAS;YAAEM;UAAM,CAAE,GAAGZ,eAAe;UAEvDD,UAAU,CAACc,mBAAmB,CAACD,MAAM,EAAEN,SAAS,EAAEK,QAAQ,CAAC;SAC9D,MAAM;UACH,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;;;IAGjE;GACH;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}