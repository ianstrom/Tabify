{"ast":null,"code":"import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nexport class NoiseSynth extends Instrument {\n  constructor() {\n    super(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n    this.name = \"NoiseSynth\";\n    const options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n    this.noise = new Noise(Object.assign({\n      context: this.context\n    }, options.noise));\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope));\n    // connect the noise to the output\n    this.noise.chain(this.envelope, this.output);\n  }\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        decay: 0.1,\n        sustain: 0.0\n      }),\n      noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"white\"\n      })\n    });\n  }\n  /**\n   * Start the attack portion of the envelopes. Unlike other\n   * instruments, Tone.NoiseSynth doesn't have a note.\n   * @example\n   * const noiseSynth = new Tone.NoiseSynth().toDestination();\n   * noiseSynth.triggerAttack();\n   */\n  triggerAttack(time) {\n    let velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    time = this.toSeconds(time);\n    // the envelopes\n    this.envelope.triggerAttack(time, velocity);\n    // start the noise\n    this.noise.start(time);\n    if (this.envelope.sustain === 0) {\n      this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n    }\n    return this;\n  }\n  /**\n   * Start the release portion of the envelopes.\n   */\n  triggerRelease(time) {\n    time = this.toSeconds(time);\n    this.envelope.triggerRelease(time);\n    this.noise.stop(time + this.toSeconds(this.envelope.release));\n    return this;\n  }\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 0);\n      this._syncMethod(\"triggerRelease\", 0);\n    }\n    return this;\n  }\n  triggerAttackRelease(duration, time) {\n    let velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    time = this.toSeconds(time);\n    duration = this.toSeconds(duration);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + duration);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this.noise.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["AmplitudeEnvelope","omitFromObject","optionsFromArguments","Noise","Instrument","ToneAudioNode","Envelope","Source","NoiseSynth","constructor","getDefaults","arguments","name","options","noise","Object","assign","context","envelope","chain","output","keys","decay","sustain","type","triggerAttack","time","velocity","length","undefined","toSeconds","start","stop","attack","triggerRelease","release","sync","_syncState","_syncMethod","triggerAttackRelease","duration","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/instrument/NoiseSynth.ts"],"sourcesContent":["import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise, NoiseOptions } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n\nexport interface NoiseSynthOptions extends InstrumentOptions {\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tnoise: Omit<NoiseOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]]. \n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nexport class NoiseSynth extends Instrument<NoiseSynthOptions> {\n\n\treadonly name = \"NoiseSynth\";\n\n\t/**\n\t * The noise source.\n\t */\n\treadonly noise: Noise;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<NoiseSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n\t\tthis.noise = new Noise(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.noise));\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the noise to the output\n\t\tthis.noise.chain(this.envelope, this.output);\n\t}\n\n\tstatic getDefaults(): NoiseSynthOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\tsustain: 0.0,\n\t\t\t\t},\n\t\t\t),\n\t\t\tnoise: Object.assign(\n\t\t\t\tomitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"white\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * Start the attack portion of the envelopes. Unlike other\n\t * instruments, Tone.NoiseSynth doesn't have a note.\n\t * @example\n\t * const noiseSynth = new Tone.NoiseSynth().toDestination();\n\t * noiseSynth.triggerAttack();\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t// start the noise\n\t\tthis.noise.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the release portion of the envelopes.\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.noise.stop(time + this.toSeconds(this.envelope.release));\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tif (this._syncState()) {\n\t\t\tthis._syncMethod(\"triggerAttack\", 0);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tduration = this.toSeconds(duration);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + duration);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.noise.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}