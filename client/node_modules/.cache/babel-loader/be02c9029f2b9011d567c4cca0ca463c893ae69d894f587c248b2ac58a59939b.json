{"ast":null,"code":"import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Source } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * // initialize the noise and start\n * const noise = new Tone.Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new Tone.AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\nexport class Noise extends Source {\n  constructor() {\n    super(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n    this.name = \"Noise\";\n    /**\n     * Private reference to the source\n     */\n    this._source = null;\n    const options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n    this._playbackRate = options.playbackRate;\n    this.type = options.type;\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      fadeIn: 0,\n      fadeOut: 0,\n      playbackRate: 1,\n      type: \"white\"\n    });\n  }\n  /**\n   * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n   * @example\n   * const noise = new Tone.Noise().toDestination().start();\n   * noise.type = \"brown\";\n   */\n  get type() {\n    return this._type;\n  }\n  set type(type) {\n    assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n    if (this._type !== type) {\n      this._type = type;\n      // if it's playing, stop and restart it\n      if (this.state === \"started\") {\n        const now = this.now();\n        this._stop(now);\n        this._start(now);\n      }\n    }\n  }\n  /**\n   * The playback rate of the noise. Affects\n   * the \"frequency\" of the noise.\n   */\n  get playbackRate() {\n    return this._playbackRate;\n  }\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    if (this._source) {\n      this._source.playbackRate.value = rate;\n    }\n  }\n  /**\n   * internal start method\n   */\n  _start(time) {\n    const buffer = _noiseBuffers[this._type];\n    this._source = new ToneBufferSource({\n      url: buffer,\n      context: this.context,\n      fadeIn: this._fadeIn,\n      fadeOut: this._fadeOut,\n      loop: true,\n      onended: () => this.onstop(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output);\n    this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n  }\n  /**\n   * internal stop method\n   */\n  _stop(time) {\n    if (this._source) {\n      this._source.stop(this.toSeconds(time));\n      this._source = null;\n    }\n  }\n  /**\n   * The fadeIn time of the amplitude envelope.\n   */\n  get fadeIn() {\n    return this._fadeIn;\n  }\n  set fadeIn(time) {\n    this._fadeIn = time;\n    if (this._source) {\n      this._source.fadeIn = this._fadeIn;\n    }\n  }\n  /**\n   * The fadeOut time of the amplitude envelope.\n   */\n  get fadeOut() {\n    return this._fadeOut;\n  }\n  set fadeOut(time) {\n    this._fadeOut = time;\n    if (this._source) {\n      this._source.fadeOut = this._fadeOut;\n    }\n  }\n  _restart(time) {\n    // TODO could be optimized by cancelling the buffer source 'stop'\n    this._stop(time);\n    this._start(time);\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    if (this._source) {\n      this._source.disconnect();\n    }\n    return this;\n  }\n}\n//--------------------\n// THE NOISE BUFFERS\n//--------------------\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n/**\n * Cache the noise buffers\n */\nconst _noiseCache = {\n  brown: null,\n  pink: null,\n  white: null\n};\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n  get brown() {\n    if (!_noiseCache.brown) {\n      const buffer = [];\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        let lastOut = 0.0;\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          const white = Math.random() * 2 - 1;\n          channel[i] = (lastOut + 0.02 * white) / 1.02;\n          lastOut = channel[i];\n          channel[i] *= 3.5; // (roughly) compensate for gain\n        }\n      }\n\n      _noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n    }\n    return _noiseCache.brown;\n  },\n  get pink() {\n    if (!_noiseCache.pink) {\n      const buffer = [];\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        let b0, b1, b2, b3, b4, b5, b6;\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          const white = Math.random() * 2 - 1;\n          b0 = 0.99886 * b0 + white * 0.0555179;\n          b1 = 0.99332 * b1 + white * 0.0750759;\n          b2 = 0.96900 * b2 + white * 0.1538520;\n          b3 = 0.86650 * b3 + white * 0.3104856;\n          b4 = 0.55000 * b4 + white * 0.5329522;\n          b5 = -0.7616 * b5 - white * 0.0168980;\n          channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n          channel[i] *= 0.11; // (roughly) compensate for gain\n          b6 = white * 0.115926;\n        }\n      }\n      _noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n    }\n    return _noiseCache.pink;\n  },\n  get white() {\n    if (!_noiseCache.white) {\n      const buffer = [];\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          channel[i] = Math.random() * 2 - 1;\n        }\n      }\n      _noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n    }\n    return _noiseCache.white;\n  }\n};","map":{"version":3,"names":["ToneAudioBuffer","optionsFromArguments","assert","Source","ToneBufferSource","Noise","constructor","getDefaults","arguments","name","_source","options","_playbackRate","playbackRate","type","_fadeIn","fadeIn","_fadeOut","fadeOut","Object","assign","_type","_noiseBuffers","state","now","_stop","_start","rate","value","time","buffer","url","context","loop","onended","onstop","connect","output","start","toSeconds","Math","random","duration","stop","_restart","dispose","disconnect","BUFFER_LENGTH","NUM_CHANNELS","_noiseCache","brown","pink","white","channelNum","channel","Float32Array","lastOut","i","fromArray","b0","b1","b2","b3","b4","b5","b6"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/source/Noise.ts"],"sourcesContent":["import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n\nexport type NoiseType = \"white\" | \"brown\" | \"pink\";\n\nexport interface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * // initialize the noise and start\n * const noise = new Tone.Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new Tone.AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\treadonly name: string = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * @param type the noise type (white|pink|brown)\n\t */\n\tconstructor(type?: NoiseType);\n\tconstructor(options?: Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * const noise = new Tone.Noise().toDestination().start();\n\t * noise.type = \"brown\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tassert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t * internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource({\n\t\t\turl: buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this._fadeIn,\n\t\t\tfadeOut: this._fadeOut,\n\t\t\tloop: true,\n\t\t\tonended: () => this.onstop(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t * internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(time) {\n\t\tthis._fadeIn = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeIn = this._fadeIn;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(time) {\n\t\tthis._fadeOut = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeOut = this._fadeOut;\n\t\t}\n\t}\n\n\tprotected _restart(time?: Time): void {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n//--------------------\n// THE NOISE BUFFERS\n//--------------------\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}