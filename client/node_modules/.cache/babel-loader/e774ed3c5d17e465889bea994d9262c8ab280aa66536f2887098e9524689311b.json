{"ast":null,"code":"export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.start = (start => {\n    return function () {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let duration = arguments.length > 2 ? arguments[2] : undefined;\n      if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {\n        throw new RangeError(\"The parameters can't be negative.\");\n      }\n      // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n      start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n    };\n  })(nativeAudioScheduledSourceNode.start);\n};","map":{"version":3,"names":["wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","start","when","arguments","length","undefined","offset","duration","RangeError","call"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.ts"],"sourcesContent":["import { TNativeAudioBufferSourceNode, TNativeConstantSourceNode, TNativeOscillatorNode } from '../types';\n\nexport const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (\n    nativeAudioScheduledSourceNode: TNativeAudioBufferSourceNode | TNativeConstantSourceNode | TNativeOscillatorNode\n): void => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration?: number) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            (<(when: number, offset: number, duration?: number) => void>start).call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n"],"mappings":"AAEA,OAAO,MAAMA,yDAAyD,GAClEC,8BAAgH,IAC1G;EACNA,8BAA8B,CAACC,KAAK,GAAG,CAAEA,KAAK,IAAI;IAC9C,OAAO,YAA4C;MAAA,IAA3CC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IAAEI,QAAiB,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAC3C,IAAK,OAAOE,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,GAAG,CAAC,IAAKD,MAAM,GAAG,CAAC,IAAIJ,IAAI,GAAG,CAAC,EAAE;QAC1E,MAAM,IAAIM,UAAU,CAAC,mCAAmC,CAAC;;MAG7D;MAC4DP,KAAM,CAACQ,IAAI,CAACT,8BAA8B,EAAEE,IAAI,EAAEI,MAAM,EAAEC,QAAQ,CAAC;IACnI,CAAC;EACL,CAAC,EAAEP,8BAA8B,CAACC,KAAK,CAAC;AAC5C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}