{"ast":null,"code":"export const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = nativeContext => {\n  const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n  nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n  nativeAudioBufferSourceNode.start();\n  nativeAudioBufferSourceNode.stop();\n  try {\n    nativeAudioBufferSourceNode.stop();\n    return true;\n  } catch {\n    return false;\n  }\n};","map":{"version":3,"names":["testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","nativeContext","nativeAudioBuffer","createBuffer","nativeAudioBufferSourceNode","createBufferSource","buffer","start","stop"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.ts"],"sourcesContent":["import { TNativeContext } from '../types';\n\nexport const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (nativeContext: TNativeContext) => {\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    nativeAudioBufferSourceNode.start();\n    nativeAudioBufferSourceNode.stop();\n\n    try {\n        nativeAudioBufferSourceNode.stop();\n\n        return true;\n    } catch {\n        return false;\n    }\n};\n"],"mappings":"AAEA,OAAO,MAAMA,6DAA6D,GAAIC,aAA6B,IAAI;EAC3G,MAAMC,iBAAiB,GAAGD,aAAa,CAACE,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;EACjE,MAAMC,2BAA2B,GAAGH,aAAa,CAACI,kBAAkB,EAAE;EAEtED,2BAA2B,CAACE,MAAM,GAAGJ,iBAAiB;EACtDE,2BAA2B,CAACG,KAAK,EAAE;EACnCH,2BAA2B,CAACI,IAAI,EAAE;EAElC,IAAI;IACAJ,2BAA2B,CAACI,IAAI,EAAE;IAElC,OAAO,IAAI;GACd,CAAC,MAAM;IACJ,OAAO,KAAK;;AAEpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}