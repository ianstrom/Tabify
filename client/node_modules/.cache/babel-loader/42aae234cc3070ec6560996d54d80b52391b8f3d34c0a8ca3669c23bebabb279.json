{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/interfaces/read-only-map.ts"],"sourcesContent":["export interface IReadOnlyMap<T, U> {\n    readonly entries: Map<T, U>['entries'];\n\n    readonly get: Map<T, U>['get'];\n\n    readonly has: Map<T, U>['has'];\n\n    readonly keys: Map<T, U>['keys'];\n\n    readonly size: Map<T, U>['size'];\n\n    readonly values: Map<T, U>['values'];\n\n    /*\n     * The signature of forEach() differs from the signature Map's forEach() function because the callback receives a IReadOnlyMap as third\n     * argument.\n     */\n    forEach(callback: (value: U, key: T, map: IReadOnlyMap<T, U>) => void, thisArg?: any): void;\n\n    // @todo Symbol.iterator\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}