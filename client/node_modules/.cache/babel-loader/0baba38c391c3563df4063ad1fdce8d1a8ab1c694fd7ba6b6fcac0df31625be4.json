{"ast":null,"code":"export const visitEachAudioNodeOnce = (cycles, visitor) => {\n  const counts = new Map();\n  for (const cycle of cycles) {\n    for (const audioNode of cycle) {\n      const count = counts.get(audioNode);\n      counts.set(audioNode, count === undefined ? 1 : count + 1);\n    }\n  }\n  counts.forEach((count, audioNode) => visitor(audioNode, count));\n};","map":{"version":3,"names":["visitEachAudioNodeOnce","cycles","visitor","counts","Map","cycle","audioNode","count","get","set","undefined","forEach"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/standardized-audio-context/src/helpers/visit-each-audio-node-once.ts"],"sourcesContent":["import { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const visitEachAudioNodeOnce = <T extends TContext>(\n    cycles: IAudioNode<T>[][],\n    visitor: (audioNode: IAudioNode<T>, count: number) => void\n): void => {\n    const counts = new Map<IAudioNode<T>, number>();\n\n    for (const cycle of cycles) {\n        for (const audioNode of cycle) {\n            const count = counts.get(audioNode);\n\n            counts.set(audioNode, count === undefined ? 1 : count + 1);\n        }\n    }\n\n    counts.forEach((count, audioNode) => visitor(audioNode, count));\n};\n"],"mappings":"AAGA,OAAO,MAAMA,sBAAsB,GAAGA,CAClCC,MAAyB,EACzBC,OAA0D,KACpD;EACN,MAAMC,MAAM,GAAG,IAAIC,GAAG,EAAyB;EAE/C,KAAK,MAAMC,KAAK,IAAIJ,MAAM,EAAE;IACxB,KAAK,MAAMK,SAAS,IAAID,KAAK,EAAE;MAC3B,MAAME,KAAK,GAAGJ,MAAM,CAACK,GAAG,CAACF,SAAS,CAAC;MAEnCH,MAAM,CAACM,GAAG,CAACH,SAAS,EAAEC,KAAK,KAAKG,SAAS,GAAG,CAAC,GAAGH,KAAK,GAAG,CAAC,CAAC;;;EAIlEJ,MAAM,CAACQ,OAAO,CAAC,CAACJ,KAAK,EAAED,SAAS,KAAKJ,OAAO,CAACI,SAAS,EAAEC,KAAK,CAAC,CAAC;AACnE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}