{"ast":null,"code":"export const createAudioDestinationNodeRenderer = renderInputsOfAudioNode => {\n  const renderedNativeAudioDestinationNodes = new WeakMap();\n  const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n    renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n    return nativeAudioDestinationNode;\n  };\n  return {\n    render(proxy, nativeOfflineAudioContext) {\n      const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n      if (renderedNativeAudioDestinationNode !== undefined) {\n        return Promise.resolve(renderedNativeAudioDestinationNode);\n      }\n      return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n    }\n  };\n};","map":{"version":3,"names":["createAudioDestinationNodeRenderer","renderInputsOfAudioNode","renderedNativeAudioDestinationNodes","WeakMap","createAudioDestinationNode","proxy","nativeOfflineAudioContext","nativeAudioDestinationNode","destination","set","render","renderedNativeAudioDestinationNode","get","undefined","Promise","resolve"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/audio-destination-node-renderer-factory.ts"],"sourcesContent":["import { IAudioDestinationNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport {\n    TAudioDestinationNodeRendererFactory,\n    TNativeAudioDestinationNode,\n    TNativeOfflineAudioContext,\n    TRenderInputsOfAudioNodeFunction\n} from '../types';\n\nexport const createAudioDestinationNodeRenderer: TAudioDestinationNodeRendererFactory = <\n    T extends IMinimalOfflineAudioContext | IOfflineAudioContext\n>(\n    renderInputsOfAudioNode: TRenderInputsOfAudioNodeFunction\n) => {\n    const renderedNativeAudioDestinationNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioDestinationNode>();\n\n    const createAudioDestinationNode = async (proxy: IAudioDestinationNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n\n        renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        return nativeAudioDestinationNode;\n    };\n\n    return {\n        render(\n            proxy: IAudioDestinationNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ): Promise<TNativeAudioDestinationNode> {\n            const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n\n            if (renderedNativeAudioDestinationNode !== undefined) {\n                return Promise.resolve(renderedNativeAudioDestinationNode);\n            }\n\n            return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n        }\n    };\n};\n"],"mappings":"AAQA,OAAO,MAAMA,kCAAkC,GAG3CC,uBAAyD,IACzD;EACA,MAAMC,mCAAmC,GAAG,IAAIC,OAAO,EAA2D;EAElH,MAAMC,0BAA0B,GAAG,MAAAA,CAAOC,KAA+B,EAAEC,yBAAqD,KAAI;IAChI,MAAMC,0BAA0B,GAAGD,yBAAyB,CAACE,WAAW;IAExEN,mCAAmC,CAACO,GAAG,CAACH,yBAAyB,EAAEC,0BAA0B,CAAC;IAE9F,MAAMN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,0BAA0B,CAAC;IAE3F,OAAOA,0BAA0B;EACrC,CAAC;EAED,OAAO;IACHG,MAAMA,CACFL,KAA+B,EAC/BC,yBAAqD;MAErD,MAAMK,kCAAkC,GAAGT,mCAAmC,CAACU,GAAG,CAACN,yBAAyB,CAAC;MAE7G,IAAIK,kCAAkC,KAAKE,SAAS,EAAE;QAClD,OAAOC,OAAO,CAACC,OAAO,CAACJ,kCAAkC,CAAC;;MAG9D,OAAOP,0BAA0B,CAACC,KAAK,EAAEC,yBAAyB,CAAC;IACvE;GACH;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}