{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n    this.name = \"Follower\";\n    const options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n    this._abs = this.input = new Abs({\n      context: this.context\n    });\n    this._lowpass = this.output = new OnePoleFilter({\n      context: this.context,\n      frequency: 1 / this.toSeconds(options.smoothing),\n      type: \"lowpass\"\n    });\n    this._abs.connect(this._lowpass);\n    this._smoothing = options.smoothing;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.05\n    });\n  }\n  /**\n   * The amount of time it takes a value change to arrive at the updated value.\n   */\n  get smoothing() {\n    return this._smoothing;\n  }\n  set smoothing(smoothing) {\n    this._smoothing = smoothing;\n    this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n  }\n  dispose() {\n    super.dispose();\n    this._abs.dispose();\n    this._lowpass.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","optionsFromArguments","OnePoleFilter","Abs","Follower","constructor","getDefaults","arguments","name","options","_abs","input","context","_lowpass","output","frequency","toSeconds","smoothing","type","connect","_smoothing","Object","assign","dispose"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/component/analysis/Follower.ts"],"sourcesContent":["import { Time } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n\nexport interface FollowerOptions extends ToneAudioNodeOptions {\n\tsmoothing: Time;\n}\n\n/**\n * Follower is a simple envelope follower. \n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal. \n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode<FollowerOptions> {\n\n\treadonly name: string = \"Follower\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Private reference to the smoothing parameter\n\t */\n\tprivate _smoothing: Time;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The absolute value\n\t */\n\tprivate _abs: Abs;\n\n\t/**\n\t * @param smoothing The rate of change of the follower.\n\t */\n\tconstructor(smoothing?: Time);\n\tconstructor(options?: Partial<FollowerOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis._abs = this.input = new Abs({ context: this.context });\n\t\tthis._lowpass = this.output = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 1 / this.toSeconds(options.smoothing),\n\t\t\ttype: \"lowpass\"\n\t\t});\n\t\tthis._abs.connect(this._lowpass);\n\t\tthis._smoothing = options.smoothing;\n\t}\n\n\tstatic getDefaults(): FollowerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.05\n\t\t});\n\t}\n\n\t/**\n\t * The amount of time it takes a value change to arrive at the updated value. \n\t */\n\tget smoothing(): Time {\n\t\treturn this._smoothing;\n\t}\n\tset smoothing(smoothing) {\n\t\tthis._smoothing = smoothing;\n\t\tthis._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"AACA,SAAgCA,aAAa,QAA8B,kCAAkC;AAC7G,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,GAAG,QAAQ,kBAAkB;AAMtC;;;;;;;;;;AAUA,OAAM,MAAOC,QAAS,SAAQJ,aAA8B;EA2B3DK,YAAA;IACC,KAAK,CAACJ,oBAAoB,CAACG,QAAQ,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IA1BrE,KAAAC,IAAI,GAAW,UAAU;IA2BjC,MAAMC,OAAO,GAAGR,oBAAoB,CAACG,QAAQ,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;IAEtF,IAAI,CAACG,IAAI,GAAG,IAAI,CAACC,KAAK,GAAG,IAAIR,GAAG,CAAC;MAAES,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAC3D,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIZ,aAAa,CAAC;MAC/CU,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBG,SAAS,EAAE,CAAC,GAAG,IAAI,CAACC,SAAS,CAACP,OAAO,CAACQ,SAAS,CAAC;MAChDC,IAAI,EAAE;KACN,CAAC;IACF,IAAI,CAACR,IAAI,CAACS,OAAO,CAAC,IAAI,CAACN,QAAQ,CAAC;IAChC,IAAI,CAACO,UAAU,GAAGX,OAAO,CAACQ,SAAS;EACpC;EAEA,OAAOX,WAAWA,CAAA;IACjB,OAAOe,MAAM,CAACC,MAAM,CAACtB,aAAa,CAACM,WAAW,EAAE,EAAE;MACjDW,SAAS,EAAE;KACX,CAAC;EACH;EAEA;;;EAGA,IAAIA,SAASA,CAAA;IACZ,OAAO,IAAI,CAACG,UAAU;EACvB;EACA,IAAIH,SAASA,CAACA,SAAS;IACtB,IAAI,CAACG,UAAU,GAAGH,SAAS;IAC3B,IAAI,CAACJ,QAAQ,CAACE,SAAS,GAAG,CAAC,GAAG,IAAI,CAACC,SAAS,CAAC,IAAI,CAACC,SAAS,CAAC;EAC7D;EAEAM,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACb,IAAI,CAACa,OAAO,EAAE;IACnB,IAAI,CAACV,QAAQ,CAACU,OAAO,EAAE;IACvB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}