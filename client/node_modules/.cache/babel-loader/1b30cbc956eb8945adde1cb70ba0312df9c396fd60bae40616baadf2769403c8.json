{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class BiquadFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n      // Bug #80: Safari does not export the correct values for maxValue and minValue.\n      this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n      this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n      // Bug #77: Firefox & Safari do not export the correct value for minValue.\n      this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n      // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n      this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n      this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(this, 1);\n    }\n    get detune() {\n      return this._detune;\n    }\n    get frequency() {\n      return this._frequency;\n    }\n    get gain() {\n      return this._gain;\n    }\n    get Q() {\n      return this._Q;\n    }\n    get type() {\n      return this._nativeBiquadFilterNode.type;\n    }\n    set type(value) {\n      this._nativeBiquadFilterNode.type = value;\n    }\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      // Bug #189: Safari does throw an InvalidStateError.\n      try {\n        this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n      } catch (err) {\n        if (err.code === 11) {\n          throw createInvalidAccessError();\n        }\n        throw err;\n      }\n      // Bug #68: Safari does not throw an error if the parameters differ in their length.\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n    }\n  };\n};","map":{"version":3,"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","Q","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","createBiquadFilterNodeConstructor","audioNodeConstructor","createAudioParam","createBiquadFilterNodeRenderer","createInvalidAccessError","createNativeBiquadFilterNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","BiquadFilterNode","constructor","context","options","nativeContext","mergedOptions","nativeBiquadFilterNode","isOffline","biquadFilterNodeRenderer","_Q","_detune","Math","log2","_frequency","sampleRate","_gain","log10","_nativeBiquadFilterNode","value","getFrequencyResponse","frequencyHz","magResponse","phaseResponse","err","code","length"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/biquad-filter-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IBiquadFilterNode, IBiquadFilterOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TBiquadFilterNodeConstructorFactory, TBiquadFilterType, TContext, TNativeBiquadFilterNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n} as const;\n\nexport const createBiquadFilterNodeConstructor: TBiquadFilterNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createBiquadFilterNodeRenderer,\n    createInvalidAccessError,\n    createNativeBiquadFilterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class BiquadFilterNode<T extends TContext> extends audioNodeConstructor<T> implements IBiquadFilterNode<T> {\n        private _detune: IAudioParam;\n\n        private _frequency: IAudioParam;\n\n        private _gain: IAudioParam;\n\n        private _nativeBiquadFilterNode: TNativeBiquadFilterNode;\n\n        private _Q: IAudioParam;\n\n        constructor(context: T, options?: Partial<IBiquadFilterOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createBiquadFilterNodeRenderer() : null);\n\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n\n            // Bug #80: Safari does not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(\n                this,\n                isOffline,\n                nativeBiquadFilterNode.detune,\n                1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT),\n                -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT)\n            );\n            // Bug #77: Firefox & Safari do not export the correct value for minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(\n                this,\n                isOffline,\n                nativeBiquadFilterNode.gain,\n                40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT),\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get detune(): IAudioParam {\n            return this._detune;\n        }\n\n        get frequency(): IAudioParam {\n            return this._frequency;\n        }\n\n        get gain(): IAudioParam {\n            return this._gain;\n        }\n\n        get Q(): IAudioParam {\n            return this._Q;\n        }\n\n        get type(): TBiquadFilterType {\n            return this._nativeBiquadFilterNode.type;\n        }\n\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n\n        public getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void {\n            // Bug #189: Safari does throw an InvalidStateError.\n            try {\n                this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            } catch (err) {\n                if (err.code === 11) {\n                    throw createInvalidAccessError();\n                }\n\n                throw err;\n            }\n\n            // Bug #68: Safari does not throw an error if the parameters differ in their length.\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n"],"mappings":"AAAA,SAASA,0BAA0B,EAAEC,0BAA0B,QAAQ,cAAc;AAIrF,MAAMC,eAAe,GAAG;EACpBC,CAAC,EAAE,CAAC;EACJC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE,UAAU;EACjCC,MAAM,EAAE,CAAC;EACTC,SAAS,EAAE,GAAG;EACdC,IAAI,EAAE,CAAC;EACPC,IAAI,EAAE;CACA;AAEV,OAAO,MAAMC,iCAAiC,GAAwCA,CAClFC,oBAAoB,EACpBC,gBAAgB,EAChBC,8BAA8B,EAC9BC,wBAAwB,EACxBC,4BAA4B,EAC5BC,gBAAgB,EAChBC,2BAA2B,EAC3BC,oBAAoB,KACpB;EACA,OAAO,MAAMC,gBAAqC,SAAQR,oBAAuB;IAW7ES,YAAYC,OAAU,EAAEC,OAAuC;MAC3D,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAO,CAAC;MAC/C,MAAMG,aAAa,GAAG;QAAE,GAAGvB,eAAe;QAAE,GAAGqB;MAAO,CAAE;MACxD,MAAMG,sBAAsB,GAAGV,4BAA4B,CAACQ,aAAa,EAAEC,aAAa,CAAC;MACzF,MAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAa,CAAC;MAC5D,MAAMI,wBAAwB,GAAiCD,SAAS,GAAGb,8BAA8B,EAAE,GAAG,IAAK;MAEnH,KAAK,CAACQ,OAAO,EAAE,KAAK,EAAEI,sBAAsB,EAAEE,wBAAwB,CAAC;MAEvE;MACA,IAAI,CAACC,EAAE,GAAGhB,gBAAgB,CAAC,IAAI,EAAEc,SAAS,EAAED,sBAAsB,CAACvB,CAAC,EAAEF,0BAA0B,EAAED,0BAA0B,CAAC;MAC7H;MACA,IAAI,CAAC8B,OAAO,GAAGjB,gBAAgB,CAC3B,IAAI,EACJc,SAAS,EACTD,sBAAsB,CAACnB,MAAM,EAC7B,IAAI,GAAGwB,IAAI,CAACC,IAAI,CAAC/B,0BAA0B,CAAC,EAC5C,CAAC,IAAI,GAAG8B,IAAI,CAACC,IAAI,CAAC/B,0BAA0B,CAAC,CAChD;MACD;MACA,IAAI,CAACgC,UAAU,GAAGpB,gBAAgB,CAAC,IAAI,EAAEc,SAAS,EAAED,sBAAsB,CAAClB,SAAS,EAAEc,OAAO,CAACY,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC;MAChH;MACA,IAAI,CAACC,KAAK,GAAGtB,gBAAgB,CACzB,IAAI,EACJc,SAAS,EACTD,sBAAsB,CAACjB,IAAI,EAC3B,EAAE,GAAGsB,IAAI,CAACK,KAAK,CAACnC,0BAA0B,CAAC,EAC3CD,0BAA0B,CAC7B;MACD,IAAI,CAACqC,uBAAuB,GAAGX,sBAAsB;MAErD;MACAP,oBAAoB,CAAC,IAAI,EAAE,CAAC,CAAC;IACjC;IAEA,IAAIZ,MAAMA,CAAA;MACN,OAAO,IAAI,CAACuB,OAAO;IACvB;IAEA,IAAItB,SAASA,CAAA;MACT,OAAO,IAAI,CAACyB,UAAU;IAC1B;IAEA,IAAIxB,IAAIA,CAAA;MACJ,OAAO,IAAI,CAAC0B,KAAK;IACrB;IAEA,IAAIhC,CAACA,CAAA;MACD,OAAO,IAAI,CAAC0B,EAAE;IAClB;IAEA,IAAInB,IAAIA,CAAA;MACJ,OAAO,IAAI,CAAC2B,uBAAuB,CAAC3B,IAAI;IAC5C;IAEA,IAAIA,IAAIA,CAAC4B,KAAK;MACV,IAAI,CAACD,uBAAuB,CAAC3B,IAAI,GAAG4B,KAAK;IAC7C;IAEOC,oBAAoBA,CAACC,WAAyB,EAAEC,WAAyB,EAAEC,aAA2B;MACzG;MACA,IAAI;QACA,IAAI,CAACL,uBAAuB,CAACE,oBAAoB,CAACC,WAAW,EAAEC,WAAW,EAAEC,aAAa,CAAC;OAC7F,CAAC,OAAOC,GAAG,EAAE;QACV,IAAIA,GAAG,CAACC,IAAI,KAAK,EAAE,EAAE;UACjB,MAAM7B,wBAAwB,EAAE;;QAGpC,MAAM4B,GAAG;;MAGb;MACA,IAAIH,WAAW,CAACK,MAAM,KAAKJ,WAAW,CAACI,MAAM,IAAIJ,WAAW,CAACI,MAAM,KAAKH,aAAa,CAACG,MAAM,EAAE;QAC1F,MAAM9B,wBAAwB,EAAE;;IAExC;GACH;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}