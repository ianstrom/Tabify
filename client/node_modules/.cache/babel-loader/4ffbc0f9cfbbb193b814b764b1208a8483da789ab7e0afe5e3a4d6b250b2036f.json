{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n    this.name = \"Channel\";\n    const options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    this._solo = this.input = new Solo({\n      solo: options.solo,\n      context: this.context\n    });\n    this._panVol = this.output = new PanVol({\n      context: this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute,\n      channelCount: options.channelCount\n    });\n    this.pan = this._panVol.pan;\n    this.volume = this._panVol.volume;\n    this._solo.connect(this._panVol);\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      volume: 0,\n      mute: false,\n      solo: false,\n      channelCount: 1\n    });\n  }\n  /**\n   * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n   */\n  get solo() {\n    return this._solo.solo;\n  }\n  set solo(solo) {\n    this._solo.solo = solo;\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed,\n   * or the channel is muted\n   */\n  get muted() {\n    return this._solo.muted || this.mute;\n  }\n  /**\n   * Mute/unmute the volume\n   */\n  get mute() {\n    return this._panVol.mute;\n  }\n  set mute(mute) {\n    this._panVol.mute = mute;\n  }\n  /**\n   * Get the gain node belonging to the bus name. Create it if\n   * it doesn't exist\n   * @param name The bus name\n   */\n  _getBus(name) {\n    if (!Channel.buses.has(name)) {\n      Channel.buses.set(name, new Gain({\n        context: this.context\n      }));\n    }\n    return Channel.buses.get(name);\n  }\n  /**\n   * Send audio to another channel using a string. `send` is a lot like\n   * [[connect]], except it uses a string instead of an object. This can\n   * be useful in large applications to decouple sections since [[send]]\n   * and [[receive]] can be invoked separately in order to connect an object\n   * @param name The channel name to send the audio\n   * @param volume The amount of the signal to send.\n   * \tDefaults to 0db, i.e. send the entire signal\n   * @returns Returns the gain node of this connection.\n   */\n  send(name) {\n    let volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const bus = this._getBus(name);\n    const sendKnob = new Gain({\n      context: this.context,\n      units: \"decibels\",\n      gain: volume\n    });\n    this.connect(sendKnob);\n    sendKnob.connect(bus);\n    return sendKnob;\n  }\n  /**\n   * Receive audio from a channel which was connected with [[send]].\n   * @param name The channel name to receive audio from.\n   */\n  receive(name) {\n    const bus = this._getBus(name);\n    bus.connect(this);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._panVol.dispose();\n    this.pan.dispose();\n    this.volume.dispose();\n    this._solo.dispose();\n    return this;\n  }\n}\n/**\n * Store the send/receive channels by name.\n */\nChannel.buses = new Map();","map":{"version":3,"names":["ToneAudioNode","optionsFromArguments","Solo","PanVol","readOnly","Gain","Channel","constructor","getDefaults","arguments","name","options","_solo","input","solo","context","_panVol","output","pan","volume","mute","channelCount","connect","Object","assign","muted","_getBus","buses","has","set","get","send","length","undefined","bus","sendKnob","units","gain","receive","dispose","Map"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/tone/Tone/component/channel/Channel.ts"],"sourcesContent":["import { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface ChannelOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tsolo: boolean;\n\tmute: boolean;\n\tchannelCount: number;\n}\n\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls. \n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode<ChannelOptions> {\n\n\treadonly name: string = \"Channel\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The soloing interface\n\t */\n\tprivate _solo: Solo;\n\n\t/**\n\t * The panning and volume node\n\t */\n\tprivate _panVol: PanVol;\n\n\t/**\n\t * The L/R panning control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume The output volume.\n\t * @param pan the initial pan\n\t */\n\tconstructor(volume?: Decibels, pan?: AudioRange);\n\tconstructor(options?: Partial<ChannelOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n\t\tconst options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n\n\t\tthis._solo = this.input = new Solo({\n\t\t\tsolo: options.solo,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._panVol = this.output = new PanVol({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tvolume: options.volume,\n\t\t\tmute: options.mute,\n\t\t\tchannelCount: options.channelCount\n\t\t});\n\t\tthis.pan = this._panVol.pan;\n\t\tthis.volume = this._panVol.volume;\n\n\t\tthis._solo.connect(this._panVol);\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): ChannelOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tmute: false,\n\t\t\tsolo: false,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n\t */\n\tget solo(): boolean {\n\t\treturn this._solo.solo;\n\t}\n\tset solo(solo) {\n\t\tthis._solo.solo = solo;\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed,\n\t * or the channel is muted\n\t */\n\tget muted(): boolean {\n\t\treturn this._solo.muted || this.mute;\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._panVol.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._panVol.mute = mute;\n\t}\n\n\t/**\n\t * Store the send/receive channels by name. \n\t */\n\tprivate static buses: Map<string, Gain> = new Map();\n\n\t/**\n\t * Get the gain node belonging to the bus name. Create it if\n\t * it doesn't exist\n\t * @param name The bus name\n\t */\n\tprivate _getBus(name: string): Gain {\n\t\tif (!Channel.buses.has(name)) {\n\t\t\tChannel.buses.set(name, new Gain({ context: this.context }));\n\t\t}\n\t\treturn Channel.buses.get(name) as Gain;\n\t}\n\n\t/**\n\t * Send audio to another channel using a string. `send` is a lot like\n\t * [[connect]], except it uses a string instead of an object. This can \n\t * be useful in large applications to decouple sections since [[send]]\n\t * and [[receive]] can be invoked separately in order to connect an object\n\t * @param name The channel name to send the audio\n\t * @param volume The amount of the signal to send. \n\t * \tDefaults to 0db, i.e. send the entire signal\n\t * @returns Returns the gain node of this connection.\n\t */\n\tsend(name: string, volume: Decibels = 0): Gain<\"decibels\"> {\n\t\tconst bus = this._getBus(name);\n\t\tconst sendKnob = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tgain: volume,\n\t\t});\n\t\tthis.connect(sendKnob);\n\t\tsendKnob.connect(bus);\n\t\treturn sendKnob;\n\t}\n\n\t/**\n\t * Receive audio from a channel which was connected with [[send]]. \n\t * @param name The channel name to receive audio from.\n\t */\n\treceive(name: string): this {\n\t\tconst bus = this._getBus(name);\n\t\tbus.connect(this);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panVol.dispose();\n\t\tthis.pan.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._solo.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}