{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Split } from \"../channel/Split\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert, assertRange } from \"../../core/util/Debug\";\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n    this.name = \"Analyser\";\n    /**\n     * The analyser node.\n     */\n    this._analysers = [];\n    /**\n     * The buffer that the FFT data is written to\n     */\n    this._buffers = [];\n    const options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n    this.input = this.output = this._gain = new Gain({\n      context: this.context\n    });\n    this._split = new Split({\n      context: this.context,\n      channels: options.channels\n    });\n    this.input.connect(this._split);\n    assertRange(options.channels, 1);\n    // create the analysers\n    for (let channel = 0; channel < options.channels; channel++) {\n      this._analysers[channel] = this.context.createAnalyser();\n      this._split.connect(this._analysers[channel], channel, 0);\n    }\n    // set the values initially\n    this.size = options.size;\n    this.type = options.type;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      size: 1024,\n      smoothing: 0.8,\n      type: \"fft\",\n      channels: 1\n    });\n  }\n  /**\n   * Run the analysis given the current settings. If [[channels]] = 1,\n   * it will return a Float32Array. If [[channels]] > 1, it will\n   * return an array of Float32Arrays where each index in the array\n   * represents the analysis done on a channel.\n   */\n  getValue() {\n    this._analysers.forEach((analyser, index) => {\n      const buffer = this._buffers[index];\n      if (this._type === \"fft\") {\n        analyser.getFloatFrequencyData(buffer);\n      } else if (this._type === \"waveform\") {\n        analyser.getFloatTimeDomainData(buffer);\n      }\n    });\n    if (this.channels === 1) {\n      return this._buffers[0];\n    } else {\n      return this._buffers;\n    }\n  }\n  /**\n   * The size of analysis. This must be a power of two in the range 16 to 16384.\n   */\n  get size() {\n    return this._analysers[0].frequencyBinCount;\n  }\n  set size(size) {\n    this._analysers.forEach((analyser, index) => {\n      analyser.fftSize = size * 2;\n      this._buffers[index] = new Float32Array(size);\n    });\n  }\n  /**\n   * The number of channels the analyser does the analysis on. Channel\n   * separation is done using [[Split]]\n   */\n  get channels() {\n    return this._analysers.length;\n  }\n  /**\n   * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n   */\n  get type() {\n    return this._type;\n  }\n  set type(type) {\n    assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n    this._type = type;\n  }\n  /**\n   * 0 represents no time averaging with the last analysis frame.\n   */\n  get smoothing() {\n    return this._analysers[0].smoothingTimeConstant;\n  }\n  set smoothing(val) {\n    this._analysers.forEach(a => a.smoothingTimeConstant = val);\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._analysers.forEach(a => a.disconnect());\n    this._split.dispose();\n    this._gain.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","optionsFromArguments","Split","Gain","assert","assertRange","Analyser","constructor","getDefaults","arguments","name","_analysers","_buffers","options","input","output","_gain","context","_split","channels","connect","channel","createAnalyser","size","type","Object","assign","smoothing","getValue","forEach","analyser","index","buffer","_type","getFloatFrequencyData","getFloatTimeDomainData","frequencyBinCount","fftSize","Float32Array","length","smoothingTimeConstant","val","a","dispose","disconnect"],"sources":["/Users/ianstrom/Development/code/Capstone/client/node_modules/tone/Tone/component/analysis/Analyser.ts"],"sourcesContent":["import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Split } from \"../channel/Split\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert, assertRange } from \"../../core/util/Debug\";\n\nexport type AnalyserType = \"fft\" | \"waveform\";\n\nexport interface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n\tchannels: number;\n}\n\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\treadonly name: string = \"Analyser\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The analyser node.\n\t */\n\tprivate _analysers: AnalyserNode[] = [];\n\n\t/**\n\t * Input and output are a gain node\n\t */\n\tprivate _gain: Gain;\n\n\t/**\n\t * The channel splitter node\n\t */\n\tprivate _split: Split;\n\n\t/**\n\t * The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t * The buffer that the FFT data is written to\n\t */\n\tprivate _buffers: Float32Array[] = [];\n\n\t/**\n\t * @param type The return type of the analysis, either \"fft\", or \"waveform\".\n\t * @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\n\t\tthis.input = this.output = this._gain = new Gain({ context: this.context });\n\t\tthis._split = new Split({\n\t\t\tcontext: this.context,\n\t\t\tchannels: options.channels,\n\t\t});\n\t\tthis.input.connect(this._split);\n\t\t\n\t\tassertRange(options.channels, 1);\n\t\t\n\t\t// create the analysers\n\t\tfor (let channel = 0; channel < options.channels; channel++) {\n\t\t\tthis._analysers[channel] = this.context.createAnalyser();\n\t\t\tthis._split.connect(this._analysers[channel], channel, 0);\n\t\t}\n\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t\tchannels: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Run the analysis given the current settings. If [[channels]] = 1,\n\t * it will return a Float32Array. If [[channels]] > 1, it will\n\t * return an array of Float32Arrays where each index in the array\n\t * represents the analysis done on a channel.\n\t */\n\tgetValue(): Float32Array | Float32Array[] {\n\t\tthis._analysers.forEach((analyser, index) => {\n\t\t\tconst buffer = this._buffers[index];\n\t\t\tif (this._type === \"fft\") {\n\t\t\t\tanalyser.getFloatFrequencyData(buffer);\n\t\t\t} else if (this._type === \"waveform\") {\n\t\t\t\tanalyser.getFloatTimeDomainData(buffer);\n\t\t\t}\n\t\t});\n\t\tif (this.channels === 1) {\n\t\t\treturn this._buffers[0];\n\t\t} else {\n\t\t\treturn this._buffers;\n\t\t}\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analysers[0].frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analysers.forEach((analyser, index) => {\n\t\t\tanalyser.fftSize = size * 2;\n\t\t\tthis._buffers[index] = new Float32Array(size);\n\t\t});\n\t}\n\n\t/**\n\t * The number of channels the analyser does the analysis on. Channel\n\t * separation is done using [[Split]]\n\t */\n\tget channels(): number {\n\t\treturn this._analysers.length;\n\t}\n\n\t/**\n\t * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tassert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analysers[0].smoothingTimeConstant;\n\t}\n\tset smoothing(val: NormalRange) {\n\t\tthis._analysers.forEach(a => a.smoothingTimeConstant = val);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analysers.forEach(a => a.disconnect());\n\t\tthis._split.dispose();\n\t\tthis._gain.dispose();\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}