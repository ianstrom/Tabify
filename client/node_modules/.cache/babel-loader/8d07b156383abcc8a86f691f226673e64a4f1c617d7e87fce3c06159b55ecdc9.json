{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class AnalyserNode extends audionNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      const analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n      this._nativeAnalyserNode = nativeAnalyserNode;\n    }\n    get fftSize() {\n      return this._nativeAnalyserNode.fftSize;\n    }\n    set fftSize(value) {\n      this._nativeAnalyserNode.fftSize = value;\n    }\n    get frequencyBinCount() {\n      return this._nativeAnalyserNode.frequencyBinCount;\n    }\n    get maxDecibels() {\n      return this._nativeAnalyserNode.maxDecibels;\n    }\n    set maxDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n      this._nativeAnalyserNode.maxDecibels = value;\n      if (!(value > this._nativeAnalyserNode.minDecibels)) {\n        this._nativeAnalyserNode.maxDecibels = maxDecibels;\n        throw createIndexSizeError();\n      }\n    }\n    get minDecibels() {\n      return this._nativeAnalyserNode.minDecibels;\n    }\n    set minDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const minDecibels = this._nativeAnalyserNode.minDecibels;\n      this._nativeAnalyserNode.minDecibels = value;\n      if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n        this._nativeAnalyserNode.minDecibels = minDecibels;\n        throw createIndexSizeError();\n      }\n    }\n    get smoothingTimeConstant() {\n      return this._nativeAnalyserNode.smoothingTimeConstant;\n    }\n    set smoothingTimeConstant(value) {\n      this._nativeAnalyserNode.smoothingTimeConstant = value;\n    }\n    getByteFrequencyData(array) {\n      this._nativeAnalyserNode.getByteFrequencyData(array);\n    }\n    getByteTimeDomainData(array) {\n      this._nativeAnalyserNode.getByteTimeDomainData(array);\n    }\n    getFloatFrequencyData(array) {\n      this._nativeAnalyserNode.getFloatFrequencyData(array);\n    }\n    getFloatTimeDomainData(array) {\n      this._nativeAnalyserNode.getFloatTimeDomainData(array);\n    }\n  };\n};","map":{"version":3,"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","createAnalyserNodeConstructor","audionNodeConstructor","createAnalyserNodeRenderer","createIndexSizeError","createNativeAnalyserNode","getNativeContext","isNativeOfflineAudioContext","AnalyserNode","constructor","context","options","nativeContext","mergedOptions","nativeAnalyserNode","analyserNodeRenderer","_nativeAnalyserNode","value","frequencyBinCount","getByteFrequencyData","array","getByteTimeDomainData","getFloatFrequencyData","getFloatTimeDomainData"],"sources":["/Users/ianstrom/Development/code/Capstone/node_modules/standardized-audio-context/src/factories/analyser-node-constructor.ts"],"sourcesContent":["import { IAnalyserNode, IAnalyserOptions } from '../interfaces';\nimport { TAnalyserNodeConstructorFactory, TAudioNodeRenderer, TContext, TNativeAnalyserNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n} as const;\n\nexport const createAnalyserNodeConstructor: TAnalyserNodeConstructorFactory = (\n    audionNodeConstructor,\n    createAnalyserNodeRenderer,\n    createIndexSizeError,\n    createNativeAnalyserNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class AnalyserNode<T extends TContext> extends audionNodeConstructor<T> implements IAnalyserNode<T> {\n        private _nativeAnalyserNode: TNativeAnalyserNode;\n\n        constructor(context: T, options?: Partial<IAnalyserOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null)\n            );\n\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n\n        get fftSize(): number {\n            return this._nativeAnalyserNode.fftSize;\n        }\n\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n\n        get frequencyBinCount(): number {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n\n        get maxDecibels(): number {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n\n            this._nativeAnalyserNode.maxDecibels = value;\n\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get minDecibels(): number {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n\n            this._nativeAnalyserNode.minDecibels = value;\n\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get smoothingTimeConstant(): number {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n\n        public getByteFrequencyData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n\n        public getByteTimeDomainData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n\n        public getFloatFrequencyData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n\n        public getFloatTimeDomainData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}